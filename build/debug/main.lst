ARM GAS  /tmp/ccpm2Mw3.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB71:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <stdlib.h>
  25:Core/Src/main.c **** #include <stdint.h>
  26:Core/Src/main.c **** #include <stm32f1xx_hal_tim.h>
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
ARM GAS  /tmp/ccpm2Mw3.s 			page 2


  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** #define open_loop_revolution_limit 130000
  42:Core/Src/main.c **** // HATA DUZELTME: Macro'da = kullanilmaz.
  43:Core/Src/main.c **** #define sector_change_interval (2000 / open_loop_velocity_rpm) 
  44:Core/Src/main.c **** /* USER CODE END PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  47:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  48:Core/Src/main.c **** CAN_HandleTypeDef hcan;
  49:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  50:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE BEGIN PV */
  53:Core/Src/main.c **** // Degiskenler ilk koddan kopyalandi
  54:Core/Src/main.c **** uint8_t sector = 0;
  55:Core/Src/main.c **** double sector_change_interval_counter = 0;
  56:Core/Src/main.c **** double motor_align_time_counter = 1.0;
  57:Core/Src/main.c **** uint32_t align_duration = 3; // duration value which the motor will hold its position for
  58:Core/Src/main.c **** uint16_t motor_align_ccr_value = 1500; //ccr value when alignment is being made
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** float rpm_ramp_slope = 0.1; // open loop open_loop_velocity_rpm increment value
  61:Core/Src/main.c **** uint32_t ol_sector_counter = 0;
  62:Core/Src/main.c **** uint32_t ol_revolution_limit = (open_loop_revolution_limit* 30);
  63:Core/Src/main.c **** const double open_loop_velocity_rpm = 1200;
  64:Core/Src/main.c **** const double open_loop_start_speed_rpm = 300;
  65:Core/Src/main.c **** double desired_sector_change_interval = (2000/open_loop_velocity_rpm); // soft start opening value
  66:Core/Src/main.c **** double initial_sector_change_interval = (2000/open_loop_start_speed_rpm); //(2000/ open_loop_start_
  67:Core/Src/main.c **** //uint32_t initial_sector_change_interval;
  68:Core/Src/main.c **** //uint32_t initial_sector_change_interval = 5;
  69:Core/Src/main.c **** uint32_t initial_open_loop_ccr = 50; // soft start opening value
  70:Core/Src/main.c **** uint32_t desired_open_loop_ccr = 50; // drive ccr value after soft start cycle
  71:Core/Src/main.c **** uint32_t ccr_ramp_slope = 32; // open loop ccr value increment value
  72:Core/Src/main.c **** float ms_counter;
  73:Core/Src/main.c **** /* USER CODE END PV */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  76:Core/Src/main.c **** void SystemClock_Config(void);
  77:Core/Src/main.c **** static void MX_GPIO_Init(void);
  78:Core/Src/main.c **** static void MX_ADC1_Init(void);
  79:Core/Src/main.c **** static void MX_CAN_Init(void);
  80:Core/Src/main.c **** static void MX_TIM1_Init(void); // YENI
  81:Core/Src/main.c **** static void MX_TIM2_Init(void); // YENI
  82:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  83:Core/Src/main.c **** void update_sector_for_open_loop(void); // YENI FONKSIYON TANIMI
  84:Core/Src/main.c **** /* USER CODE END PFP */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  87:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  88:Core/Src/main.c **** 
  89:Core/Src/main.c **** /* USER CODE END 0 */
  90:Core/Src/main.c **** 
ARM GAS  /tmp/ccpm2Mw3.s 			page 3


  91:Core/Src/main.c **** /**
  92:Core/Src/main.c ****   * @brief  The application entry point.
  93:Core/Src/main.c ****   * @retval int
  94:Core/Src/main.c ****   */
  95:Core/Src/main.c **** int main(void)
  96:Core/Src/main.c **** {
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE END 1 */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 105:Core/Src/main.c ****   HAL_Init();
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* USER CODE END Init */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* Configure the system clock */
 112:Core/Src/main.c ****   SystemClock_Config();
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* USER CODE END SysInit */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* Initialize all configured peripherals */
 119:Core/Src/main.c ****   MX_GPIO_Init();
 120:Core/Src/main.c ****   MX_ADC1_Init();
 121:Core/Src/main.c ****   MX_CAN_Init();
 122:Core/Src/main.c ****   MX_TIM1_Init(); // YENI
 123:Core/Src/main.c ****   MX_TIM2_Init(); // YENI
 124:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 125:Core/Src/main.c ****   
 126:Core/Src/main.c ****   // Baslangicta tum CCR degerlerini 0 yap
 127:Core/Src/main.c ****   TIM1->CCR1 = 0;
 128:Core/Src/main.c ****   TIM1->CCR2 = 0;
 129:Core/Src/main.c ****   TIM1->CCR3 = 0;
 130:Core/Src/main.c ****   
 131:Core/Src/main.c ****   // 6-Kanal Complementary PWM'i baslat
 132:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 133:Core/Src/main.c ****   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 134:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 135:Core/Src/main.c ****   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 136:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 137:Core/Src/main.c ****   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****   // IPM'e giden sinyal cikislarini etkinlestir (Main Output Enable)
 140:Core/Src/main.c ****   __HAL_TIM_MOE_ENABLE(&htim1);
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   // Komutasyon icin zamanlayici interrupt'ini baslat
 143:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* USER CODE END 2 */
 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   /* Infinite loop */
ARM GAS  /tmp/ccpm2Mw3.s 			page 4


 148:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 149:Core/Src/main.c ****   while (1)
 150:Core/Src/main.c ****   {
 151:Core/Src/main.c ****     /* USER CODE END WHILE */
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 154:Core/Src/main.c ****   }
 155:Core/Src/main.c ****   /* USER CODE END 3 */
 156:Core/Src/main.c **** }
 157:Core/Src/main.c **** 
 158:Core/Src/main.c **** /**
 159:Core/Src/main.c ****   * @brief System Clock Configuration
 160:Core/Src/main.c ****   * @retval None
 161:Core/Src/main.c ****   */
 162:Core/Src/main.c **** void SystemClock_Config(void)
 163:Core/Src/main.c **** {
 164:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 165:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 166:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 169:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 170:Core/Src/main.c ****   */
 171:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 172:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 173:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 174:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 177:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 178:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 179:Core/Src/main.c ****   {
 180:Core/Src/main.c ****     Error_Handler();
 181:Core/Src/main.c ****   }
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 184:Core/Src/main.c ****   */
 185:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 186:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 187:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 188:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 189:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 190:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 193:Core/Src/main.c ****   {
 194:Core/Src/main.c ****     Error_Handler();
 195:Core/Src/main.c ****   }
 196:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 197:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 198:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 199:Core/Src/main.c ****   {
 200:Core/Src/main.c ****     Error_Handler();
 201:Core/Src/main.c ****   }
 202:Core/Src/main.c **** }
 203:Core/Src/main.c **** 
 204:Core/Src/main.c **** /**
ARM GAS  /tmp/ccpm2Mw3.s 			page 5


 205:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 206:Core/Src/main.c ****   * @param None
 207:Core/Src/main.c ****   * @retval None
 208:Core/Src/main.c ****   */
 209:Core/Src/main.c **** static void MX_ADC1_Init(void)
 210:Core/Src/main.c **** {
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /** Common config
 223:Core/Src/main.c ****   */
 224:Core/Src/main.c ****   hadc1.Instance = ADC1;
 225:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 226:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 227:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 228:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 229:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 230:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 231:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 232:Core/Src/main.c ****   {
 233:Core/Src/main.c ****     Error_Handler();
 234:Core/Src/main.c ****   }
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****   /** Configure Regular Channel
 237:Core/Src/main.c ****   */
 238:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_2;
 239:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 240:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 241:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 242:Core/Src/main.c ****   {
 243:Core/Src/main.c ****     Error_Handler();
 244:Core/Src/main.c ****   }
 245:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 248:Core/Src/main.c **** 
 249:Core/Src/main.c **** }
 250:Core/Src/main.c **** 
 251:Core/Src/main.c **** /**
 252:Core/Src/main.c ****   * @brief CAN Initialization Function
 253:Core/Src/main.c ****   * @param None
 254:Core/Src/main.c ****   * @retval None
 255:Core/Src/main.c ****   */
 256:Core/Src/main.c **** static void MX_CAN_Init(void)
 257:Core/Src/main.c **** {
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* USER CODE BEGIN CAN_Init 0 */
 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* USER CODE END CAN_Init 0 */
ARM GAS  /tmp/ccpm2Mw3.s 			page 6


 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /* USER CODE BEGIN CAN_Init 1 */
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* USER CODE END CAN_Init 1 */
 266:Core/Src/main.c ****   hcan.Instance = CAN1;
 267:Core/Src/main.c ****   hcan.Init.Prescaler = 16;
 268:Core/Src/main.c ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 269:Core/Src/main.c ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 270:Core/Src/main.c ****   hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 271:Core/Src/main.c ****   hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 272:Core/Src/main.c ****   hcan.Init.TimeTriggeredMode = DISABLE;
 273:Core/Src/main.c ****   hcan.Init.AutoBusOff = DISABLE;
 274:Core/Src/main.c ****   hcan.Init.AutoWakeUp = DISABLE;
 275:Core/Src/main.c ****   hcan.Init.AutoRetransmission = DISABLE;
 276:Core/Src/main.c ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 277:Core/Src/main.c ****   hcan.Init.TransmitFifoPriority = DISABLE;
 278:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 279:Core/Src/main.c ****   {
 280:Core/Src/main.c ****     Error_Handler();
 281:Core/Src/main.c ****   }
 282:Core/Src/main.c ****   /* USER CODE BEGIN CAN_Init 2 */
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* USER CODE END CAN_Init 2 */
 285:Core/Src/main.c **** 
 286:Core/Src/main.c **** }
 287:Core/Src/main.c **** 
 288:Core/Src/main.c **** /**
 289:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 290:Core/Src/main.c ****   * @param None
 291:Core/Src/main.c ****   * @retval None
 292:Core/Src/main.c ****   */
 293:Core/Src/main.c **** static void MX_TIM1_Init(void)
 294:Core/Src/main.c **** {
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 297:Core/Src/main.c **** 
 298:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 301:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 302:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 303:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 308:Core/Src/main.c ****   htim1.Instance = TIM1;
 309:Core/Src/main.c ****   // 72MHz / (44 + 1) / (99 + 1) = 16 kHz PWM
 310:Core/Src/main.c ****   htim1.Init.Prescaler = 44;
 311:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 312:Core/Src/main.c ****   htim1.Init.Period = 99;
 313:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 314:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0; // Her periyotta update event
 315:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 316:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 317:Core/Src/main.c ****   {
 318:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccpm2Mw3.s 			page 7


 319:Core/Src/main.c ****   }
 320:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 321:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 322:Core/Src/main.c ****   {
 323:Core/Src/main.c ****     Error_Handler();
 324:Core/Src/main.c ****   }
 325:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 326:Core/Src/main.c ****   {
 327:Core/Src/main.c ****     Error_Handler();
 328:Core/Src/main.c ****   }
 329:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 330:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 331:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 332:Core/Src/main.c ****   {
 333:Core/Src/main.c ****     Error_Handler();
 334:Core/Src/main.c ****   }
 335:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 336:Core/Src/main.c ****   sConfigOC.Pulse = 0; // Baslangicta %0 duty
 337:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 338:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH; // Complementary pin de HIGH
 339:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 340:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 341:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 342:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 343:Core/Src/main.c ****   {
 344:Core/Src/main.c ****     Error_Handler();
 345:Core/Src/main.c ****   }
 346:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 347:Core/Src/main.c ****   {
 348:Core/Src/main.c ****     Error_Handler();
 349:Core/Src/main.c ****   }
 350:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 351:Core/Src/main.c ****   {
 352:Core/Src/main.c ****     Error_Handler();
 353:Core/Src/main.c ****   }
 354:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 355:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 356:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 357:Core/Src/main.c ****   // Deadtime Ayari: 72MHz clock -> 13.88ns per tick.
 358:Core/Src/main.c ****   // 181 * 13.88ns = ~2.5 microsecond deadtime.
 359:Core/Src/main.c ****   // IPM datasheet'ine gore bu degeri ayarlayin.
 360:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 181; 
 361:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE; // ALM pinleri icin Break aktif
 362:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW; // ALM pinleri active-low
 363:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE; // Break'ten sonra otomatik ku
 364:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 365:Core/Src/main.c ****   {
 366:Core/Src/main.c ****     Error_Handler();
 367:Core/Src/main.c ****   }
 368:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 371:Core/Src/main.c ****   // HAL_TIM_MspPostInit, GPIO init icinde cagiriliyor olmali
 372:Core/Src/main.c ****   // Eger CubeMX ile yapildiysa PE pinleri AF olarak ayarlanmistir.
 373:Core/Src/main.c **** }
 374:Core/Src/main.c **** 
 375:Core/Src/main.c **** /**
ARM GAS  /tmp/ccpm2Mw3.s 			page 8


 376:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 377:Core/Src/main.c ****   * @param None
 378:Core/Src/main.c ****   * @retval None
 379:Core/Src/main.c ****   */
 380:Core/Src/main.c **** static void MX_TIM2_Init(void)
 381:Core/Src/main.c **** {
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 386:Core/Src/main.c **** 
 387:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 388:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 389:Core/Src/main.c **** 
 390:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 393:Core/Src/main.c ****   htim2.Instance = TIM2;
 394:Core/Src/main.c ****   // 72MHz Timer Clock (APB1=36M, Timer x2 = 72M)
 395:Core/Src/main.c ****   // 10kHz interrupt (0.1ms periyot)
 396:Core/Src/main.c ****   // 72,000,000 / (719 + 1) / (9 + 1) = 10,000 Hz
 397:Core/Src/main.c ****   htim2.Init.Prescaler = 719;
 398:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 399:Core/Src/main.c ****   htim2.Init.Period = 9;
 400:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 401:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 402:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 403:Core/Src/main.c ****   {
 404:Core/Src/main.c ****     Error_Handler();
 405:Core/Src/main.c ****   }
 406:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 407:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 408:Core/Src/main.c ****   {
 409:Core/Src/main.c ****     Error_Handler();
 410:Core/Src/main.c ****   }
 411:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 412:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 413:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 414:Core/Src/main.c ****   {
 415:Core/Src/main.c ****     Error_Handler();
 416:Core/Src/main.c ****   }
 417:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 418:Core/Src/main.c **** 
 419:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 420:Core/Src/main.c **** 
 421:Core/Src/main.c **** }
 422:Core/Src/main.c **** 
 423:Core/Src/main.c **** /**
 424:Core/Src/main.c ****   * @brief GPIO Initialization Function
 425:Core/Src/main.c ****   * @param None
 426:Core/Src/main.c ****   * @retval None
 427:Core/Src/main.c ****   */
 428:Core/Src/main.c **** static void MX_GPIO_Init(void)
 429:Core/Src/main.c **** {
  26              		.loc 1 429 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 40
ARM GAS  /tmp/ccpm2Mw3.s 			page 9


  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  31              		.cfi_def_cfa_offset 32
  32              		.cfi_offset 4, -32
  33              		.cfi_offset 5, -28
  34              		.cfi_offset 6, -24
  35              		.cfi_offset 7, -20
  36              		.cfi_offset 8, -16
  37              		.cfi_offset 9, -12
  38              		.cfi_offset 10, -8
  39              		.cfi_offset 14, -4
  40 0004 8AB0     		sub	sp, sp, #40
  41              		.cfi_def_cfa_offset 72
 430:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 430 3 view .LVU1
  43              		.loc 1 430 20 is_stmt 0 view .LVU2
  44 0006 06AD     		add	r5, sp, #24
  45 0008 0024     		movs	r4, #0
  46 000a 0694     		str	r4, [sp, #24]
  47 000c 0794     		str	r4, [sp, #28]
  48 000e 0894     		str	r4, [sp, #32]
  49 0010 0994     		str	r4, [sp, #36]
 431:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 432:Core/Src/main.c **** 
 433:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 434:Core/Src/main.c **** 
 435:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 436:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  50              		.loc 1 436 3 is_stmt 1 view .LVU3
  51              	.LBB4:
  52              		.loc 1 436 3 view .LVU4
  53              		.loc 1 436 3 view .LVU5
  54 0012 4D4B     		ldr	r3, .L3
  55 0014 9A69     		ldr	r2, [r3, #24]
  56 0016 42F00402 		orr	r2, r2, #4
  57 001a 9A61     		str	r2, [r3, #24]
  58              		.loc 1 436 3 view .LVU6
  59 001c 9A69     		ldr	r2, [r3, #24]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0192     		str	r2, [sp, #4]
  62              		.loc 1 436 3 view .LVU7
  63 0024 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 436 3 view .LVU8
 437:Core/Src/main.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
  66              		.loc 1 437 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 437 3 view .LVU10
  69              		.loc 1 437 3 view .LVU11
  70 0026 9A69     		ldr	r2, [r3, #24]
  71 0028 42F04002 		orr	r2, r2, #64
  72 002c 9A61     		str	r2, [r3, #24]
  73              		.loc 1 437 3 view .LVU12
  74 002e 9A69     		ldr	r2, [r3, #24]
  75 0030 02F04002 		and	r2, r2, #64
  76 0034 0292     		str	r2, [sp, #8]
  77              		.loc 1 437 3 view .LVU13
ARM GAS  /tmp/ccpm2Mw3.s 			page 10


  78 0036 029A     		ldr	r2, [sp, #8]
  79              	.LBE5:
  80              		.loc 1 437 3 view .LVU14
 438:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  81              		.loc 1 438 3 view .LVU15
  82              	.LBB6:
  83              		.loc 1 438 3 view .LVU16
  84              		.loc 1 438 3 view .LVU17
  85 0038 9A69     		ldr	r2, [r3, #24]
  86 003a 42F00802 		orr	r2, r2, #8
  87 003e 9A61     		str	r2, [r3, #24]
  88              		.loc 1 438 3 view .LVU18
  89 0040 9A69     		ldr	r2, [r3, #24]
  90 0042 02F00802 		and	r2, r2, #8
  91 0046 0392     		str	r2, [sp, #12]
  92              		.loc 1 438 3 view .LVU19
  93 0048 039A     		ldr	r2, [sp, #12]
  94              	.LBE6:
  95              		.loc 1 438 3 view .LVU20
 439:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  96              		.loc 1 439 3 view .LVU21
  97              	.LBB7:
  98              		.loc 1 439 3 view .LVU22
  99              		.loc 1 439 3 view .LVU23
 100 004a 9A69     		ldr	r2, [r3, #24]
 101 004c 42F02002 		orr	r2, r2, #32
 102 0050 9A61     		str	r2, [r3, #24]
 103              		.loc 1 439 3 view .LVU24
 104 0052 9A69     		ldr	r2, [r3, #24]
 105 0054 02F02002 		and	r2, r2, #32
 106 0058 0492     		str	r2, [sp, #16]
 107              		.loc 1 439 3 view .LVU25
 108 005a 049A     		ldr	r2, [sp, #16]
 109              	.LBE7:
 110              		.loc 1 439 3 view .LVU26
 440:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 111              		.loc 1 440 3 view .LVU27
 112              	.LBB8:
 113              		.loc 1 440 3 view .LVU28
 114              		.loc 1 440 3 view .LVU29
 115 005c 9A69     		ldr	r2, [r3, #24]
 116 005e 42F01002 		orr	r2, r2, #16
 117 0062 9A61     		str	r2, [r3, #24]
 118              		.loc 1 440 3 view .LVU30
 119 0064 9B69     		ldr	r3, [r3, #24]
 120 0066 03F01003 		and	r3, r3, #16
 121 006a 0593     		str	r3, [sp, #20]
 122              		.loc 1 440 3 view .LVU31
 123 006c 059B     		ldr	r3, [sp, #20]
 124              	.LBE8:
 125              		.loc 1 440 3 view .LVU32
 441:Core/Src/main.c **** 
 442:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 443:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 126              		.loc 1 443 3 view .LVU33
 127 006e DFF8DCA0 		ldr	r10, .L3+4
 128 0072 2246     		mov	r2, r4
ARM GAS  /tmp/ccpm2Mw3.s 			page 11


 129 0074 4FF40061 		mov	r1, #2048
 130 0078 5046     		mov	r0, r10
 131 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 132              	.LVL0:
 444:Core/Src/main.c **** 
 445:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 446:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 133              		.loc 1 446 3 view .LVU34
 134 007e 344F     		ldr	r7, .L3+8
 135 0080 2246     		mov	r2, r4
 136 0082 4FF47041 		mov	r1, #61440
 137 0086 3846     		mov	r0, r7
 138 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 139              	.LVL1:
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****   /*Configure GPIO pins : PE8 PE9 PE10 PE11
 449:Core/Src/main.c ****                            PE12 PE13 */
 450:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 140              		.loc 1 450 3 view .LVU35
 141              		.loc 1 450 23 is_stmt 0 view .LVU36
 142 008c 4FF47C53 		mov	r3, #16128
 143 0090 0693     		str	r3, [sp, #24]
 451:Core/Src/main.c ****                           |GPIO_PIN_12|GPIO_PIN_13;
 452:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // TIM1 pinleri (Full remap)
 144              		.loc 1 452 3 is_stmt 1 view .LVU37
 145              		.loc 1 452 24 is_stmt 0 view .LVU38
 146 0092 4FF00208 		mov	r8, #2
 147 0096 CDF81C80 		str	r8, [sp, #28]
 453:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; // HIZLI PWM
 148              		.loc 1 453 3 is_stmt 1 view .LVU39
 149              		.loc 1 453 25 is_stmt 0 view .LVU40
 150 009a 4FF00309 		mov	r9, #3
 151 009e CDF82490 		str	r9, [sp, #36]
 454:Core/Src/main.c ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 152              		.loc 1 454 3 is_stmt 1 view .LVU41
 153 00a2 2946     		mov	r1, r5
 154 00a4 2B48     		ldr	r0, .L3+12
 155 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL2:
 455:Core/Src/main.c **** 
 456:Core/Src/main.c ****   /*Configure GPIO pin : PB11 */
 457:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_11;
 157              		.loc 1 457 3 view .LVU42
 158              		.loc 1 457 23 is_stmt 0 view .LVU43
 159 00aa 4FF40063 		mov	r3, #2048
 160 00ae 0693     		str	r3, [sp, #24]
 458:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 161              		.loc 1 458 3 is_stmt 1 view .LVU44
 162              		.loc 1 458 24 is_stmt 0 view .LVU45
 163 00b0 0126     		movs	r6, #1
 164 00b2 0796     		str	r6, [sp, #28]
 459:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 165              		.loc 1 459 3 is_stmt 1 view .LVU46
 166              		.loc 1 459 24 is_stmt 0 view .LVU47
 167 00b4 0894     		str	r4, [sp, #32]
 460:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 168              		.loc 1 460 3 is_stmt 1 view .LVU48
ARM GAS  /tmp/ccpm2Mw3.s 			page 12


 169              		.loc 1 460 25 is_stmt 0 view .LVU49
 170 00b6 CDF82480 		str	r8, [sp, #36]
 461:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 171              		.loc 1 461 3 is_stmt 1 view .LVU50
 172 00ba 2946     		mov	r1, r5
 173 00bc 5046     		mov	r0, r10
 174 00be FFF7FEFF 		bl	HAL_GPIO_Init
 175              	.LVL3:
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
 464:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 176              		.loc 1 464 3 view .LVU51
 177              		.loc 1 464 23 is_stmt 0 view .LVU52
 178 00c2 4FF47043 		mov	r3, #61440
 179 00c6 0693     		str	r3, [sp, #24]
 465:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 180              		.loc 1 465 3 is_stmt 1 view .LVU53
 181              		.loc 1 465 24 is_stmt 0 view .LVU54
 182 00c8 0796     		str	r6, [sp, #28]
 466:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 183              		.loc 1 466 3 is_stmt 1 view .LVU55
 184              		.loc 1 466 24 is_stmt 0 view .LVU56
 185 00ca 0894     		str	r4, [sp, #32]
 467:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 186              		.loc 1 467 3 is_stmt 1 view .LVU57
 187              		.loc 1 467 25 is_stmt 0 view .LVU58
 188 00cc CDF82480 		str	r8, [sp, #36]
 468:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 189              		.loc 1 468 3 is_stmt 1 view .LVU59
 190 00d0 2946     		mov	r1, r5
 191 00d2 3846     		mov	r0, r7
 192 00d4 FFF7FEFF 		bl	HAL_GPIO_Init
 193              	.LVL4:
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   /*Configure GPIO pin : PC6 */
 471:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_6;
 194              		.loc 1 471 3 view .LVU60
 195              		.loc 1 471 23 is_stmt 0 view .LVU61
 196 00d8 4023     		movs	r3, #64
 197 00da 0693     		str	r3, [sp, #24]
 472:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 198              		.loc 1 472 3 is_stmt 1 view .LVU62
 199              		.loc 1 472 24 is_stmt 0 view .LVU63
 200 00dc CDF81C90 		str	r9, [sp, #28]
 473:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 201              		.loc 1 473 3 is_stmt 1 view .LVU64
 202 00e0 DFF87480 		ldr	r8, .L3+16
 203 00e4 2946     		mov	r1, r5
 204 00e6 4046     		mov	r0, r8
 205 00e8 FFF7FEFF 		bl	HAL_GPIO_Init
 206              	.LVL5:
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   /*Configure GPIO pin : PA15 */
 476:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_15;
 207              		.loc 1 476 3 view .LVU65
 208              		.loc 1 476 23 is_stmt 0 view .LVU66
 209 00ec 4FF40043 		mov	r3, #32768
ARM GAS  /tmp/ccpm2Mw3.s 			page 13


 210 00f0 0693     		str	r3, [sp, #24]
 477:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 211              		.loc 1 477 3 is_stmt 1 view .LVU67
 212              		.loc 1 477 24 is_stmt 0 view .LVU68
 213 00f2 0794     		str	r4, [sp, #28]
 478:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 214              		.loc 1 478 3 is_stmt 1 view .LVU69
 215              		.loc 1 478 24 is_stmt 0 view .LVU70
 216 00f4 0896     		str	r6, [sp, #32]
 479:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 217              		.loc 1 479 3 is_stmt 1 view .LVU71
 218 00f6 2946     		mov	r1, r5
 219 00f8 1848     		ldr	r0, .L3+20
 220 00fa FFF7FEFF 		bl	HAL_GPIO_Init
 221              	.LVL6:
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****   /*Configure GPIO pins : PC10 PC11 PC12 (ALM PINLERI) */
 482:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 222              		.loc 1 482 3 view .LVU72
 223              		.loc 1 482 23 is_stmt 0 view .LVU73
 224 00fe 4FF4E053 		mov	r3, #7168
 225 0102 0693     		str	r3, [sp, #24]
 483:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // Active-Low, dusen kenarda kesme
 226              		.loc 1 483 3 is_stmt 1 view .LVU74
 227              		.loc 1 483 24 is_stmt 0 view .LVU75
 228 0104 164B     		ldr	r3, .L3+24
 229 0106 0793     		str	r3, [sp, #28]
 484:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP; // Pull-up'li giris
 230              		.loc 1 484 3 is_stmt 1 view .LVU76
 231              		.loc 1 484 24 is_stmt 0 view .LVU77
 232 0108 0896     		str	r6, [sp, #32]
 485:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 233              		.loc 1 485 3 is_stmt 1 view .LVU78
 234 010a 2946     		mov	r1, r5
 235 010c 4046     		mov	r0, r8
 236 010e FFF7FEFF 		bl	HAL_GPIO_Init
 237              	.LVL7:
 486:Core/Src/main.c **** 
 487:Core/Src/main.c ****   /*Configure GPIO pins : PD2 PD3 PD4 (HALL SENSOR PINLERI) */
 488:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 238              		.loc 1 488 3 view .LVU79
 239              		.loc 1 488 23 is_stmt 0 view .LVU80
 240 0112 1C23     		movs	r3, #28
 241 0114 0693     		str	r3, [sp, #24]
 489:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 242              		.loc 1 489 3 is_stmt 1 view .LVU81
 243              		.loc 1 489 24 is_stmt 0 view .LVU82
 244 0116 0794     		str	r4, [sp, #28]
 490:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL; // Harici pull-up varsa
 245              		.loc 1 490 3 is_stmt 1 view .LVU83
 246              		.loc 1 490 24 is_stmt 0 view .LVU84
 247 0118 0894     		str	r4, [sp, #32]
 491:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 248              		.loc 1 491 3 is_stmt 1 view .LVU85
 249 011a 2946     		mov	r1, r5
 250 011c 3846     		mov	r0, r7
 251 011e FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccpm2Mw3.s 			page 14


 252              	.LVL8:
 492:Core/Src/main.c **** 
 493:Core/Src/main.c ****   /*Configure peripheral I/O remapping */
 494:Core/Src/main.c ****   __HAL_AFIO_REMAP_TIM1_ENABLE(); // TIM1 pinlerini PE'ye yonlendir
 253              		.loc 1 494 3 view .LVU86
 254              	.LBB9:
 255              		.loc 1 494 3 view .LVU87
 256 0122 104A     		ldr	r2, .L3+28
 257 0124 5368     		ldr	r3, [r2, #4]
 258              	.LVL9:
 259              		.loc 1 494 3 view .LVU88
 260              		.loc 1 494 3 view .LVU89
 261              		.loc 1 494 3 view .LVU90
 262 0126 43F0E063 		orr	r3, r3, #117440512
 263              	.LVL10:
 264              		.loc 1 494 3 is_stmt 0 view .LVU91
 265 012a 43F0C003 		orr	r3, r3, #192
 266              	.LVL11:
 267              		.loc 1 494 3 is_stmt 1 view .LVU92
 268 012e 5360     		str	r3, [r2, #4]
 269              	.LBE9:
 270              		.loc 1 494 3 view .LVU93
 495:Core/Src/main.c **** 
 496:Core/Src/main.c ****   /* EXTI interrupt init*/
 497:Core/Src/main.c ****   // ALM pinleri (PC10-12) icin EXTI15_10 hattini etkinlestir
 498:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 271              		.loc 1 498 3 view .LVU94
 272 0130 2246     		mov	r2, r4
 273 0132 2146     		mov	r1, r4
 274 0134 2820     		movs	r0, #40
 275 0136 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 276              	.LVL12:
 499:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 277              		.loc 1 499 3 view .LVU95
 278 013a 2820     		movs	r0, #40
 279 013c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 280              	.LVL13:
 500:Core/Src/main.c **** 
 501:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 502:Core/Src/main.c **** 
 503:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 504:Core/Src/main.c **** }
 281              		.loc 1 504 1 is_stmt 0 view .LVU96
 282 0140 0AB0     		add	sp, sp, #40
 283              		.cfi_def_cfa_offset 32
 284              		@ sp needed
 285 0142 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 286              	.L4:
 287 0146 00BF     		.align	2
 288              	.L3:
 289 0148 00100240 		.word	1073876992
 290 014c 000C0140 		.word	1073810432
 291 0150 00140140 		.word	1073812480
 292 0154 00180140 		.word	1073813504
 293 0158 00100140 		.word	1073811456
 294 015c 00080140 		.word	1073809408
 295 0160 00002110 		.word	270598144
ARM GAS  /tmp/ccpm2Mw3.s 			page 15


 296 0164 00000140 		.word	1073807360
 297              		.cfi_endproc
 298              	.LFE71:
 300              		.section	.text.update_sector_for_open_loop,"ax",%progbits
 301              		.align	1
 302              		.global	update_sector_for_open_loop
 303              		.syntax unified
 304              		.thumb
 305              		.thumb_func
 307              	update_sector_for_open_loop:
 308              	.LFB72:
 505:Core/Src/main.c **** 
 506:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 507:Core/Src/main.c **** 
 508:Core/Src/main.c **** /**
 509:Core/Src/main.c ****   * @brief  IPM icin 6-adim Komutasyon fonksiyonu (Tamamlayici PWM)
 510:Core/Src/main.c ****   * @note   Bu fonksiyon eski koddaki GPIO'lu fonksiyonun yerini alir.
 511:Core/Src/main.c ****   * Logic: Bir faz PWM (duty cycle), bir faz 0V (GND), bir faz Hi-Z.
 512:Core/Src/main.c ****   * PWM = CCRx, GND = 0% duty, Hi-Z = Iki cikis da kapali (CCER=0)
 513:Core/Src/main.c ****   */
 514:Core/Src/main.c **** void update_sector_for_open_loop(void) {
 309              		.loc 1 514 40 is_stmt 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 515:Core/Src/main.c **** 
 516:Core/Src/main.c ****   switch (sector) {
 314              		.loc 1 516 3 view .LVU98
 315 0000 234B     		ldr	r3, .L15
 316 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 317 0004 013B     		subs	r3, r3, #1
 318 0006 052B     		cmp	r3, #5
 319 0008 3ED8     		bhi	.L6
 320 000a DFE803F0 		tbb	[pc, r3]
 321              	.L8:
 322 000e 03       		.byte	(.L13-.L8)/2
 323 000f 0C       		.byte	(.L12-.L8)/2
 324 0010 16       		.byte	(.L11-.L8)/2
 325 0011 20       		.byte	(.L10-.L8)/2
 326 0012 29       		.byte	(.L9-.L8)/2
 327 0013 33       		.byte	(.L7-.L8)/2
 328              		.p2align 1
 329              	.L13:
 517:Core/Src/main.c **** 
 518:Core/Src/main.c ****     case 1: // U -> V (U=PWM, V=GND, W=Hi-Z)
 519:Core/Src/main.c ****       // U fazi: PWM
 520:Core/Src/main.c ****       TIM1->CCR1 = initial_open_loop_ccr;
 330              		.loc 1 520 7 view .LVU99
 331              		.loc 1 520 18 is_stmt 0 view .LVU100
 332 0014 1F4B     		ldr	r3, .L15+4
 333 0016 1A68     		ldr	r2, [r3]
 334 0018 1F4B     		ldr	r3, .L15+8
 335 001a 5A63     		str	r2, [r3, #52]
 521:Core/Src/main.c ****       // V fazi: 0% Duty (%100 Low-side)
 522:Core/Src/main.c ****       TIM1->CCR2 = 0;
 336              		.loc 1 522 7 is_stmt 1 view .LVU101
ARM GAS  /tmp/ccpm2Mw3.s 			page 16


 337              		.loc 1 522 18 is_stmt 0 view .LVU102
 338 001c 0022     		movs	r2, #0
 339 001e 9A63     		str	r2, [r3, #56]
 523:Core/Src/main.c ****       // W fazi: Cikislar kapali (Hi-Z)
 524:Core/Src/main.c ****       TIM1->CCER = TIM_CCER_CC1E | TIM_CCER_CC1NE | // CH1 ve CH1N aktif
 340              		.loc 1 524 7 is_stmt 1 view .LVU103
 341              		.loc 1 524 18 is_stmt 0 view .LVU104
 342 0020 5522     		movs	r2, #85
 343 0022 1A62     		str	r2, [r3, #32]
 525:Core/Src/main.c ****                    TIM_CCER_CC2E | TIM_CCER_CC2NE;  // CH2 ve CH2N aktif
 526:Core/Src/main.c ****       break;
 344              		.loc 1 526 7 is_stmt 1 view .LVU105
 345 0024 7047     		bx	lr
 346              	.L12:
 527:Core/Src/main.c ****       
 528:Core/Src/main.c ****     case 2: // U -> W (U=PWM, W=GND, V=Hi-Z)
 529:Core/Src/main.c ****       TIM1->CCR1 = initial_open_loop_ccr;
 347              		.loc 1 529 7 view .LVU106
 348              		.loc 1 529 18 is_stmt 0 view .LVU107
 349 0026 1B4B     		ldr	r3, .L15+4
 350 0028 1A68     		ldr	r2, [r3]
 351 002a 1B4B     		ldr	r3, .L15+8
 352 002c 5A63     		str	r2, [r3, #52]
 530:Core/Src/main.c ****       TIM1->CCR3 = 0;
 353              		.loc 1 530 7 is_stmt 1 view .LVU108
 354              		.loc 1 530 18 is_stmt 0 view .LVU109
 355 002e 0022     		movs	r2, #0
 356 0030 DA63     		str	r2, [r3, #60]
 531:Core/Src/main.c ****       TIM1->CCER = TIM_CCER_CC1E | TIM_CCER_CC1NE | // CH1 ve CH1N aktif
 357              		.loc 1 531 7 is_stmt 1 view .LVU110
 358              		.loc 1 531 18 is_stmt 0 view .LVU111
 359 0032 40F20552 		movw	r2, #1285
 360 0036 1A62     		str	r2, [r3, #32]
 532:Core/Src/main.c ****                    TIM_CCER_CC3E | TIM_CCER_CC3NE;  // CH3 ve CH3N aktif
 533:Core/Src/main.c ****       break;
 361              		.loc 1 533 7 is_stmt 1 view .LVU112
 362 0038 7047     		bx	lr
 363              	.L11:
 534:Core/Src/main.c **** 
 535:Core/Src/main.c ****     case 3: // V -> W (V=PWM, W=GND, U=Hi-Z)
 536:Core/Src/main.c ****       TIM1->CCR2 = initial_open_loop_ccr;
 364              		.loc 1 536 7 view .LVU113
 365              		.loc 1 536 18 is_stmt 0 view .LVU114
 366 003a 164B     		ldr	r3, .L15+4
 367 003c 1A68     		ldr	r2, [r3]
 368 003e 164B     		ldr	r3, .L15+8
 369 0040 9A63     		str	r2, [r3, #56]
 537:Core/Src/main.c ****       TIM1->CCR3 = 0;
 370              		.loc 1 537 7 is_stmt 1 view .LVU115
 371              		.loc 1 537 18 is_stmt 0 view .LVU116
 372 0042 0022     		movs	r2, #0
 373 0044 DA63     		str	r2, [r3, #60]
 538:Core/Src/main.c ****       TIM1->CCER = TIM_CCER_CC2E | TIM_CCER_CC2NE | // CH2 ve CH2N aktif
 374              		.loc 1 538 7 is_stmt 1 view .LVU117
 375              		.loc 1 538 18 is_stmt 0 view .LVU118
 376 0046 4FF4AA62 		mov	r2, #1360
 377 004a 1A62     		str	r2, [r3, #32]
ARM GAS  /tmp/ccpm2Mw3.s 			page 17


 539:Core/Src/main.c ****                    TIM_CCER_CC3E | TIM_CCER_CC3NE;  // CH3 ve CH3N aktif
 540:Core/Src/main.c ****       break;
 378              		.loc 1 540 7 is_stmt 1 view .LVU119
 379 004c 7047     		bx	lr
 380              	.L10:
 541:Core/Src/main.c **** 
 542:Core/Src/main.c ****     case 4: // V -> U (V=PWM, U=GND, W=Hi-Z)
 543:Core/Src/main.c ****       TIM1->CCR2 = initial_open_loop_ccr;
 381              		.loc 1 543 7 view .LVU120
 382              		.loc 1 543 18 is_stmt 0 view .LVU121
 383 004e 114B     		ldr	r3, .L15+4
 384 0050 1A68     		ldr	r2, [r3]
 385 0052 114B     		ldr	r3, .L15+8
 386 0054 9A63     		str	r2, [r3, #56]
 544:Core/Src/main.c ****       TIM1->CCR1 = 0;
 387              		.loc 1 544 7 is_stmt 1 view .LVU122
 388              		.loc 1 544 18 is_stmt 0 view .LVU123
 389 0056 0022     		movs	r2, #0
 390 0058 5A63     		str	r2, [r3, #52]
 545:Core/Src/main.c ****       TIM1->CCER = TIM_CCER_CC1E | TIM_CCER_CC1NE | // CH1 ve CH1N aktif
 391              		.loc 1 545 7 is_stmt 1 view .LVU124
 392              		.loc 1 545 18 is_stmt 0 view .LVU125
 393 005a 5522     		movs	r2, #85
 394 005c 1A62     		str	r2, [r3, #32]
 546:Core/Src/main.c ****                    TIM_CCER_CC2E | TIM_CCER_CC2NE;  // CH2 ve CH2N aktif
 547:Core/Src/main.c ****       break;
 395              		.loc 1 547 7 is_stmt 1 view .LVU126
 396 005e 7047     		bx	lr
 397              	.L9:
 548:Core/Src/main.c **** 
 549:Core/Src/main.c ****     case 5: // W -> U (W=PWM, U=GND, V=Hi-Z)
 550:Core/Src/main.c ****       // Bu sektor alignment icin kullaniliyor.
 551:Core/Src/main.c ****       TIM1->CCR3 = initial_open_loop_ccr;
 398              		.loc 1 551 7 view .LVU127
 399              		.loc 1 551 18 is_stmt 0 view .LVU128
 400 0060 0C4B     		ldr	r3, .L15+4
 401 0062 1A68     		ldr	r2, [r3]
 402 0064 0C4B     		ldr	r3, .L15+8
 403 0066 DA63     		str	r2, [r3, #60]
 552:Core/Src/main.c ****       TIM1->CCR1 = 0;
 404              		.loc 1 552 7 is_stmt 1 view .LVU129
 405              		.loc 1 552 18 is_stmt 0 view .LVU130
 406 0068 0022     		movs	r2, #0
 407 006a 5A63     		str	r2, [r3, #52]
 553:Core/Src/main.c ****       TIM1->CCER = TIM_CCER_CC1E | TIM_CCER_CC1NE | // CH1 ve CH1N aktif
 408              		.loc 1 553 7 is_stmt 1 view .LVU131
 409              		.loc 1 553 18 is_stmt 0 view .LVU132
 410 006c 40F20552 		movw	r2, #1285
 411 0070 1A62     		str	r2, [r3, #32]
 554:Core/Src/main.c ****                    TIM_CCER_CC3E | TIM_CCER_CC3NE;  // CH3 ve CH3N aktif
 555:Core/Src/main.c ****       break;
 412              		.loc 1 555 7 is_stmt 1 view .LVU133
 413 0072 7047     		bx	lr
 414              	.L7:
 556:Core/Src/main.c **** 
 557:Core/Src/main.c ****     case 6: // W -> V (W=PWM, V=GND, U=Hi-Z)
 558:Core/Src/main.c ****       TIM1->CCR3 = initial_open_loop_ccr;
ARM GAS  /tmp/ccpm2Mw3.s 			page 18


 415              		.loc 1 558 7 view .LVU134
 416              		.loc 1 558 18 is_stmt 0 view .LVU135
 417 0074 074B     		ldr	r3, .L15+4
 418 0076 1A68     		ldr	r2, [r3]
 419 0078 074B     		ldr	r3, .L15+8
 420 007a DA63     		str	r2, [r3, #60]
 559:Core/Src/main.c ****       TIM1->CCR2 = 0;
 421              		.loc 1 559 7 is_stmt 1 view .LVU136
 422              		.loc 1 559 18 is_stmt 0 view .LVU137
 423 007c 0022     		movs	r2, #0
 424 007e 9A63     		str	r2, [r3, #56]
 560:Core/Src/main.c ****       TIM1->CCER = TIM_CCER_CC2E | TIM_CCER_CC2NE | // CH2 ve CH2N aktif
 425              		.loc 1 560 7 is_stmt 1 view .LVU138
 426              		.loc 1 560 18 is_stmt 0 view .LVU139
 427 0080 4FF4AA62 		mov	r2, #1360
 428 0084 1A62     		str	r2, [r3, #32]
 561:Core/Src/main.c ****                    TIM_CCER_CC3E | TIM_CCER_CC3NE;  // CH3 ve CH3N aktif
 562:Core/Src/main.c ****       break;
 429              		.loc 1 562 7 is_stmt 1 view .LVU140
 430 0086 7047     		bx	lr
 431              	.L6:
 563:Core/Src/main.c **** 
 564:Core/Src/main.c ****     default: // Tum cikislari kapat (Hi-Z)
 565:Core/Src/main.c ****       TIM1->CCER = 0;
 432              		.loc 1 565 7 view .LVU141
 433              		.loc 1 565 18 is_stmt 0 view .LVU142
 434 0088 034B     		ldr	r3, .L15+8
 435 008a 0022     		movs	r2, #0
 436 008c 1A62     		str	r2, [r3, #32]
 566:Core/Src/main.c ****       break;
 437              		.loc 1 566 7 is_stmt 1 view .LVU143
 567:Core/Src/main.c ****   }
 568:Core/Src/main.c **** }
 438              		.loc 1 568 1 is_stmt 0 view .LVU144
 439 008e 7047     		bx	lr
 440              	.L16:
 441              		.align	2
 442              	.L15:
 443 0090 00000000 		.word	sector
 444 0094 00000000 		.word	initial_open_loop_ccr
 445 0098 002C0140 		.word	1073818624
 446              		.cfi_endproc
 447              	.LFE72:
 449              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 450              		.align	1
 451              		.global	HAL_TIM_PeriodElapsedCallback
 452              		.syntax unified
 453              		.thumb
 454              		.thumb_func
 456              	HAL_TIM_PeriodElapsedCallback:
 457              	.LVL14:
 458              	.LFB73:
 569:Core/Src/main.c **** 
 570:Core/Src/main.c **** /**
 571:Core/Src/main.c ****   * @brief  TIM2 Periyot Gecis Callback'i (Her 0.1ms'de bir tetiklenir)
 572:Core/Src/main.c ****   * @note   Eski koddaki ile BIREBIR AYNI ramp-up logigini kullanir.
 573:Core/Src/main.c ****   */
ARM GAS  /tmp/ccpm2Mw3.s 			page 19


 574:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 459              		.loc 1 574 61 is_stmt 1 view -0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463              		.loc 1 574 61 is_stmt 0 view .LVU146
 464 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 465              		.cfi_def_cfa_offset 24
 466              		.cfi_offset 3, -24
 467              		.cfi_offset 4, -20
 468              		.cfi_offset 5, -16
 469              		.cfi_offset 6, -12
 470              		.cfi_offset 7, -8
 471              		.cfi_offset 14, -4
 575:Core/Src/main.c ****   if (htim->Instance == TIM2) {
 472              		.loc 1 575 3 is_stmt 1 view .LVU147
 473              		.loc 1 575 11 is_stmt 0 view .LVU148
 474 0002 0368     		ldr	r3, [r0]
 475              		.loc 1 575 6 view .LVU149
 476 0004 B3F1804F 		cmp	r3, #1073741824
 477 0008 00D0     		beq	.L34
 478              	.LVL15:
 479              	.L17:
 576:Core/Src/main.c **** 
 577:Core/Src/main.c ****     ms_counter += 0.1;
 578:Core/Src/main.c **** 
 579:Core/Src/main.c ****     sector_change_interval_counter = sector_change_interval_counter + 0.1;
 580:Core/Src/main.c ****     if (motor_align_time_counter <= align_duration) {// motor align duration
 581:Core/Src/main.c ****       sector_change_interval_counter = 0;
 582:Core/Src/main.c ****       sector = 5; // Alignment sektoru (W -> U)
 583:Core/Src/main.c ****       
 584:Core/Src/main.c ****       // Alignment icin CCR'yi ayarla (Eski kodda bu yoktu, eklendi)
 585:Core/Src/main.c ****       initial_open_loop_ccr = motor_align_ccr_value; 
 586:Core/Src/main.c ****       
 587:Core/Src/main.c ****       motor_align_time_counter++;
 588:Core/Src/main.c ****       if (sector > 6) {
 589:Core/Src/main.c ****         sector = 1;
 590:Core/Src/main.c ****       }
 591:Core/Src/main.c ****       update_sector_for_open_loop();
 592:Core/Src/main.c **** 
 593:Core/Src/main.c **** 
 594:Core/Src/main.c ****       } else {
 595:Core/Src/main.c **** 
 596:Core/Src/main.c ****     // Alignment sonrasi baslangic CCR'sini tekrar ayarla
 597:Core/Src/main.c ****     if (ol_sector_counter == 0) { // Sadece ilk seferde
 598:Core/Src/main.c ****          initial_open_loop_ccr = 50; // soft start opening value
 599:Core/Src/main.c ****     }
 600:Core/Src/main.c **** 
 601:Core/Src/main.c **** 
 602:Core/Src/main.c ****     if ((sector_change_interval_counter)>= (initial_sector_change_interval) && (ol_sector_counter)<
 603:Core/Src/main.c **** 
 604:Core/Src/main.c ****         {
 605:Core/Src/main.c ****       sector_change_interval_counter = 0;
 606:Core/Src/main.c **** 
 607:Core/Src/main.c ****       sector++;
 608:Core/Src/main.c ****       if (sector > 6) {
 609:Core/Src/main.c ****         sector = 1;
ARM GAS  /tmp/ccpm2Mw3.s 			page 20


 610:Core/Src/main.c ****       }
 611:Core/Src/main.c ****       ol_sector_counter++;
 612:Core/Src/main.c ****       update_sector_for_open_loop();
 613:Core/Src/main.c **** 
 614:Core/Src/main.c ****       if (initial_open_loop_ccr <= desired_open_loop_ccr) { // duty cycle ramp
 615:Core/Src/main.c ****         initial_open_loop_ccr += ccr_ramp_slope;
 616:Core/Src/main.c **** 
 617:Core/Src/main.c ****       } else {
 618:Core/Src/main.c ****         initial_open_loop_ccr = desired_open_loop_ccr; // maks duty cycle
 619:Core/Src/main.c ****       }
 620:Core/Src/main.c ****       if (initial_sector_change_interval > desired_sector_change_interval) { // open_loop_velocity_
 621:Core/Src/main.c ****         initial_sector_change_interval -= rpm_ramp_slope;
 622:Core/Src/main.c **** 
 623:Core/Src/main.c ****       } else {
 624:Core/Src/main.c ****         initial_sector_change_interval = desired_sector_change_interval; //maks open_loop_velocity_
 625:Core/Src/main.c ****       }
 626:Core/Src/main.c **** 
 627:Core/Src/main.c ****     }
 628:Core/Src/main.c **** 
 629:Core/Src/main.c ****   }
 630:Core/Src/main.c **** 
 631:Core/Src/main.c **** 
 632:Core/Src/main.c **** }
 633:Core/Src/main.c **** }
 480              		.loc 1 633 1 view .LVU150
 481 000a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 482              	.LVL16:
 483              	.L34:
 577:Core/Src/main.c **** 
 484              		.loc 1 577 5 is_stmt 1 view .LVU151
 577:Core/Src/main.c **** 
 485              		.loc 1 577 16 is_stmt 0 view .LVU152
 486 000c 4A4C     		ldr	r4, .L36+8
 487 000e 2068     		ldr	r0, [r4]	@ float
 488              	.LVL17:
 577:Core/Src/main.c **** 
 489              		.loc 1 577 16 view .LVU153
 490 0010 FFF7FEFF 		bl	__aeabi_f2d
 491              	.LVL18:
 492 0014 46A3     		adr	r3, .L36
 493 0016 D3E90023 		ldrd	r2, [r3]
 494 001a FFF7FEFF 		bl	__aeabi_dadd
 495              	.LVL19:
 496 001e FFF7FEFF 		bl	__aeabi_d2f
 497              	.LVL20:
 498 0022 2060     		str	r0, [r4]	@ float
 579:Core/Src/main.c ****     if (motor_align_time_counter <= align_duration) {// motor align duration
 499              		.loc 1 579 5 is_stmt 1 view .LVU154
 579:Core/Src/main.c ****     if (motor_align_time_counter <= align_duration) {// motor align duration
 500              		.loc 1 579 69 is_stmt 0 view .LVU155
 501 0024 454E     		ldr	r6, .L36+12
 502 0026 42A3     		adr	r3, .L36
 503 0028 D3E90023 		ldrd	r2, [r3]
 504 002c D6E90001 		ldrd	r0, [r6]
 505 0030 FFF7FEFF 		bl	__aeabi_dadd
 506              	.LVL21:
 507 0034 0446     		mov	r4, r0
ARM GAS  /tmp/ccpm2Mw3.s 			page 21


 508 0036 0D46     		mov	r5, r1
 579:Core/Src/main.c ****     if (motor_align_time_counter <= align_duration) {// motor align duration
 509              		.loc 1 579 36 view .LVU156
 510 0038 C6E90045 		strd	r4, [r6]
 580:Core/Src/main.c ****       sector_change_interval_counter = 0;
 511              		.loc 1 580 5 is_stmt 1 view .LVU157
 580:Core/Src/main.c ****       sector_change_interval_counter = 0;
 512              		.loc 1 580 34 is_stmt 0 view .LVU158
 513 003c 404B     		ldr	r3, .L36+16
 514 003e 1868     		ldr	r0, [r3]
 515 0040 FFF7FEFF 		bl	__aeabi_ui2d
 516              	.LVL22:
 517 0044 3F4B     		ldr	r3, .L36+20
 518 0046 D3E90067 		ldrd	r6, [r3]
 580:Core/Src/main.c ****       sector_change_interval_counter = 0;
 519              		.loc 1 580 8 view .LVU159
 520 004a 3246     		mov	r2, r6
 521 004c 3B46     		mov	r3, r7
 522 004e FFF7FEFF 		bl	__aeabi_dcmpge
 523              	.LVL23:
 524 0052 0028     		cmp	r0, #0
 525 0054 4CD1     		bne	.L35
 597:Core/Src/main.c ****          initial_open_loop_ccr = 50; // soft start opening value
 526              		.loc 1 597 5 is_stmt 1 view .LVU160
 597:Core/Src/main.c ****          initial_open_loop_ccr = 50; // soft start opening value
 527              		.loc 1 597 27 is_stmt 0 view .LVU161
 528 0056 3C4B     		ldr	r3, .L36+24
 529 0058 1E68     		ldr	r6, [r3]
 597:Core/Src/main.c ****          initial_open_loop_ccr = 50; // soft start opening value
 530              		.loc 1 597 8 view .LVU162
 531 005a 16B9     		cbnz	r6, .L21
 598:Core/Src/main.c ****     }
 532              		.loc 1 598 10 is_stmt 1 view .LVU163
 598:Core/Src/main.c ****     }
 533              		.loc 1 598 32 is_stmt 0 view .LVU164
 534 005c 3B4B     		ldr	r3, .L36+28
 535 005e 3222     		movs	r2, #50
 536 0060 1A60     		str	r2, [r3]
 537              	.L21:
 602:Core/Src/main.c **** 
 538              		.loc 1 602 5 is_stmt 1 view .LVU165
 602:Core/Src/main.c **** 
 539              		.loc 1 602 8 is_stmt 0 view .LVU166
 540 0062 3B4B     		ldr	r3, .L36+32
 541 0064 D3E90023 		ldrd	r2, [r3]
 542 0068 2046     		mov	r0, r4
 543 006a 2946     		mov	r1, r5
 544 006c FFF7FEFF 		bl	__aeabi_dcmpge
 545              	.LVL24:
 546 0070 0028     		cmp	r0, #0
 547 0072 CAD0     		beq	.L17
 602:Core/Src/main.c **** 
 548              		.loc 1 602 99 discriminator 1 view .LVU167
 549 0074 374B     		ldr	r3, .L36+36
 550 0076 1B68     		ldr	r3, [r3]
 602:Core/Src/main.c **** 
 551              		.loc 1 602 77 discriminator 1 view .LVU168
ARM GAS  /tmp/ccpm2Mw3.s 			page 22


 552 0078 9E42     		cmp	r6, r3
 553 007a C6D8     		bhi	.L17
 605:Core/Src/main.c **** 
 554              		.loc 1 605 7 is_stmt 1 view .LVU169
 605:Core/Src/main.c **** 
 555              		.loc 1 605 38 is_stmt 0 view .LVU170
 556 007c 2F4B     		ldr	r3, .L36+12
 557 007e 0020     		movs	r0, #0
 558 0080 0021     		movs	r1, #0
 559 0082 C3E90001 		strd	r0, [r3]
 607:Core/Src/main.c ****       if (sector > 6) {
 560              		.loc 1 607 7 is_stmt 1 view .LVU171
 607:Core/Src/main.c ****       if (sector > 6) {
 561              		.loc 1 607 13 is_stmt 0 view .LVU172
 562 0086 344A     		ldr	r2, .L36+40
 563 0088 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 564 008a 0133     		adds	r3, r3, #1
 565 008c DBB2     		uxtb	r3, r3
 566 008e 1370     		strb	r3, [r2]
 608:Core/Src/main.c ****         sector = 1;
 567              		.loc 1 608 7 is_stmt 1 view .LVU173
 608:Core/Src/main.c ****         sector = 1;
 568              		.loc 1 608 10 is_stmt 0 view .LVU174
 569 0090 062B     		cmp	r3, #6
 570 0092 02D9     		bls	.L23
 609:Core/Src/main.c ****       }
 571              		.loc 1 609 9 is_stmt 1 view .LVU175
 609:Core/Src/main.c ****       }
 572              		.loc 1 609 16 is_stmt 0 view .LVU176
 573 0094 1346     		mov	r3, r2
 574 0096 0122     		movs	r2, #1
 575 0098 1A70     		strb	r2, [r3]
 576              	.L23:
 611:Core/Src/main.c ****       update_sector_for_open_loop();
 577              		.loc 1 611 7 is_stmt 1 view .LVU177
 611:Core/Src/main.c ****       update_sector_for_open_loop();
 578              		.loc 1 611 24 is_stmt 0 view .LVU178
 579 009a 0136     		adds	r6, r6, #1
 580 009c 2A4B     		ldr	r3, .L36+24
 581 009e 1E60     		str	r6, [r3]
 612:Core/Src/main.c **** 
 582              		.loc 1 612 7 is_stmt 1 view .LVU179
 583 00a0 FFF7FEFF 		bl	update_sector_for_open_loop
 584              	.LVL25:
 614:Core/Src/main.c ****         initial_open_loop_ccr += ccr_ramp_slope;
 585              		.loc 1 614 7 view .LVU180
 614:Core/Src/main.c ****         initial_open_loop_ccr += ccr_ramp_slope;
 586              		.loc 1 614 33 is_stmt 0 view .LVU181
 587 00a4 294B     		ldr	r3, .L36+28
 588 00a6 1A68     		ldr	r2, [r3]
 589 00a8 2C4B     		ldr	r3, .L36+44
 590 00aa 1B68     		ldr	r3, [r3]
 614:Core/Src/main.c ****         initial_open_loop_ccr += ccr_ramp_slope;
 591              		.loc 1 614 10 view .LVU182
 592 00ac 9A42     		cmp	r2, r3
 593 00ae 37D8     		bhi	.L24
 615:Core/Src/main.c **** 
ARM GAS  /tmp/ccpm2Mw3.s 			page 23


 594              		.loc 1 615 9 is_stmt 1 view .LVU183
 615:Core/Src/main.c **** 
 595              		.loc 1 615 31 is_stmt 0 view .LVU184
 596 00b0 2B4B     		ldr	r3, .L36+48
 597 00b2 1B68     		ldr	r3, [r3]
 598 00b4 1344     		add	r3, r3, r2
 599 00b6 254A     		ldr	r2, .L36+28
 600 00b8 1360     		str	r3, [r2]
 601              	.L25:
 620:Core/Src/main.c ****         initial_sector_change_interval -= rpm_ramp_slope;
 602              		.loc 1 620 7 is_stmt 1 view .LVU185
 620:Core/Src/main.c ****         initial_sector_change_interval -= rpm_ramp_slope;
 603              		.loc 1 620 42 is_stmt 0 view .LVU186
 604 00ba 254B     		ldr	r3, .L36+32
 605 00bc D3E90067 		ldrd	r6, [r3]
 606 00c0 284B     		ldr	r3, .L36+52
 607 00c2 D3E90045 		ldrd	r4, [r3]
 620:Core/Src/main.c ****         initial_sector_change_interval -= rpm_ramp_slope;
 608              		.loc 1 620 10 view .LVU187
 609 00c6 2246     		mov	r2, r4
 610 00c8 2B46     		mov	r3, r5
 611 00ca 3046     		mov	r0, r6
 612 00cc 3946     		mov	r1, r7
 613 00ce FFF7FEFF 		bl	__aeabi_dcmpgt
 614              	.LVL26:
 615 00d2 40B3     		cbz	r0, .L32
 621:Core/Src/main.c **** 
 616              		.loc 1 621 9 is_stmt 1 view .LVU188
 621:Core/Src/main.c **** 
 617              		.loc 1 621 40 is_stmt 0 view .LVU189
 618 00d4 244B     		ldr	r3, .L36+56
 619 00d6 1868     		ldr	r0, [r3]	@ float
 620 00d8 FFF7FEFF 		bl	__aeabi_f2d
 621              	.LVL27:
 622 00dc 0246     		mov	r2, r0
 623 00de 0B46     		mov	r3, r1
 624 00e0 3046     		mov	r0, r6
 625 00e2 3946     		mov	r1, r7
 626 00e4 FFF7FEFF 		bl	__aeabi_dsub
 627              	.LVL28:
 628 00e8 194B     		ldr	r3, .L36+32
 629 00ea C3E90001 		strd	r0, [r3]
 630 00ee 8CE7     		b	.L17
 631              	.L35:
 581:Core/Src/main.c ****       sector = 5; // Alignment sektoru (W -> U)
 632              		.loc 1 581 7 is_stmt 1 view .LVU190
 581:Core/Src/main.c ****       sector = 5; // Alignment sektoru (W -> U)
 633              		.loc 1 581 38 is_stmt 0 view .LVU191
 634 00f0 124B     		ldr	r3, .L36+12
 635 00f2 0020     		movs	r0, #0
 636 00f4 0021     		movs	r1, #0
 637 00f6 C3E90001 		strd	r0, [r3]
 582:Core/Src/main.c ****       
 638              		.loc 1 582 7 is_stmt 1 view .LVU192
 582:Core/Src/main.c ****       
 639              		.loc 1 582 14 is_stmt 0 view .LVU193
 640 00fa 174B     		ldr	r3, .L36+40
ARM GAS  /tmp/ccpm2Mw3.s 			page 24


 641 00fc 0522     		movs	r2, #5
 642 00fe 1A70     		strb	r2, [r3]
 585:Core/Src/main.c ****       
 643              		.loc 1 585 7 is_stmt 1 view .LVU194
 585:Core/Src/main.c ****       
 644              		.loc 1 585 29 is_stmt 0 view .LVU195
 645 0100 1A4B     		ldr	r3, .L36+60
 646 0102 1A88     		ldrh	r2, [r3]
 647 0104 114B     		ldr	r3, .L36+28
 648 0106 1A60     		str	r2, [r3]
 587:Core/Src/main.c ****       if (sector > 6) {
 649              		.loc 1 587 7 is_stmt 1 view .LVU196
 587:Core/Src/main.c ****       if (sector > 6) {
 650              		.loc 1 587 31 is_stmt 0 view .LVU197
 651 0108 0022     		movs	r2, #0
 652 010a 194B     		ldr	r3, .L36+64
 653 010c 3046     		mov	r0, r6
 654 010e 3946     		mov	r1, r7
 655 0110 FFF7FEFF 		bl	__aeabi_dadd
 656              	.LVL29:
 657 0114 0B4B     		ldr	r3, .L36+20
 658 0116 C3E90001 		strd	r0, [r3]
 588:Core/Src/main.c ****         sector = 1;
 659              		.loc 1 588 7 is_stmt 1 view .LVU198
 591:Core/Src/main.c **** 
 660              		.loc 1 591 7 view .LVU199
 661 011a FFF7FEFF 		bl	update_sector_for_open_loop
 662              	.LVL30:
 663 011e 74E7     		b	.L17
 664              	.L24:
 618:Core/Src/main.c ****       }
 665              		.loc 1 618 9 view .LVU200
 618:Core/Src/main.c ****       }
 666              		.loc 1 618 31 is_stmt 0 view .LVU201
 667 0120 0A4A     		ldr	r2, .L36+28
 668 0122 1360     		str	r3, [r2]
 669 0124 C9E7     		b	.L25
 670              	.L32:
 624:Core/Src/main.c ****       }
 671              		.loc 1 624 9 is_stmt 1 view .LVU202
 624:Core/Src/main.c ****       }
 672              		.loc 1 624 40 is_stmt 0 view .LVU203
 673 0126 0A4B     		ldr	r3, .L36+32
 674 0128 C3E90045 		strd	r4, [r3]
 675              		.loc 1 633 1 view .LVU204
 676 012c 6DE7     		b	.L17
 677              	.L37:
 678 012e 00BF     		.align	3
 679              	.L36:
 680 0130 9A999999 		.word	-1717986918
 681 0134 9999B93F 		.word	1069128089
 682 0138 00000000 		.word	ms_counter
 683 013c 00000000 		.word	sector_change_interval_counter
 684 0140 00000000 		.word	align_duration
 685 0144 00000000 		.word	motor_align_time_counter
 686 0148 00000000 		.word	ol_sector_counter
 687 014c 00000000 		.word	initial_open_loop_ccr
ARM GAS  /tmp/ccpm2Mw3.s 			page 25


 688 0150 00000000 		.word	initial_sector_change_interval
 689 0154 00000000 		.word	ol_revolution_limit
 690 0158 00000000 		.word	sector
 691 015c 00000000 		.word	desired_open_loop_ccr
 692 0160 00000000 		.word	ccr_ramp_slope
 693 0164 00000000 		.word	desired_sector_change_interval
 694 0168 00000000 		.word	rpm_ramp_slope
 695 016c 00000000 		.word	motor_align_ccr_value
 696 0170 0000F03F 		.word	1072693248
 697              		.cfi_endproc
 698              	.LFE73:
 700              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 701              		.align	1
 702              		.global	HAL_GPIO_EXTI_Callback
 703              		.syntax unified
 704              		.thumb
 705              		.thumb_func
 707              	HAL_GPIO_EXTI_Callback:
 708              	.LVL31:
 709              	.LFB74:
 634:Core/Src/main.c **** 
 635:Core/Src/main.c **** /**
 636:Core/Src/main.c ****   * @brief  Harici Interrupt Callback (ALM pinleri icin)
 637:Core/Src/main.c ****   * @param  GPIO_Pin: Tetikleyen pin
 638:Core/Src/main.c ****   */
 639:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 640:Core/Src/main.c **** {
 710              		.loc 1 640 1 is_stmt 1 view -0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 641:Core/Src/main.c ****   if (GPIO_Pin == GPIO_PIN_10 || GPIO_Pin == GPIO_PIN_11 || GPIO_Pin == GPIO_PIN_12)
 714              		.loc 1 641 3 view .LVU206
 715              		.loc 1 641 6 is_stmt 0 view .LVU207
 716 0000 B0F5806F 		cmp	r0, #1024
 717 0004 06D0     		beq	.L39
 718              		.loc 1 641 31 discriminator 1 view .LVU208
 719 0006 B0F5006F 		cmp	r0, #2048
 720 000a 03D0     		beq	.L39
 721              		.loc 1 641 58 discriminator 2 view .LVU209
 722 000c B0F5805F 		cmp	r0, #4096
 723 0010 00D0     		beq	.L39
 724 0012 7047     		bx	lr
 725              	.L39:
 640:Core/Src/main.c ****   if (GPIO_Pin == GPIO_PIN_10 || GPIO_Pin == GPIO_PIN_11 || GPIO_Pin == GPIO_PIN_12)
 726              		.loc 1 640 1 view .LVU210
 727 0014 08B5     		push	{r3, lr}
 728              		.cfi_def_cfa_offset 8
 729              		.cfi_offset 3, -8
 730              		.cfi_offset 14, -4
 642:Core/Src/main.c ****   {
 643:Core/Src/main.c ****     // HATA DURUMU (ALM pinlerinden biri LOW'a cekildi)
 644:Core/Src/main.c ****     
 645:Core/Src/main.c ****     // 1. PWM Cikislarini Kapat
 646:Core/Src/main.c ****     // TIM1 Break (BDTR) register'i MOE bitini (Main Output Enable) 
 647:Core/Src/main.c ****     // donanimsal olarak 0'a ceker. Bu, yazilimdan daha hizlidir.
 648:Core/Src/main.c ****     // Eger TIM1_BKIN pini (PB12 veya PE15) bu ALM'lere bagliysa
ARM GAS  /tmp/ccpm2Mw3.s 			page 26


 649:Core/Src/main.c ****     // bu islem otomatiktir.
 650:Core/Src/main.c ****     // Eger degilse, yazilimsal olarak kapat:
 651:Core/Src/main.c ****      __HAL_TIM_MOE_DISABLE(&htim1); // TUM 6 CIKISI KES
 731              		.loc 1 651 6 is_stmt 1 view .LVU211
 732              		.loc 1 651 6 view .LVU212
 733 0016 0E4B     		ldr	r3, .L45
 734 0018 1B68     		ldr	r3, [r3]
 735 001a 196A     		ldr	r1, [r3, #32]
 736 001c 41F21112 		movw	r2, #4369
 737 0020 1142     		tst	r1, r2
 738 0022 08D1     		bne	.L41
 739              		.loc 1 651 6 discriminator 1 view .LVU213
 740 0024 196A     		ldr	r1, [r3, #32]
 741 0026 40F24442 		movw	r2, #1092
 742 002a 1142     		tst	r1, r2
 743 002c 03D1     		bne	.L41
 744              		.loc 1 651 6 discriminator 3 view .LVU214
 745 002e 5A6C     		ldr	r2, [r3, #68]
 746 0030 22F40042 		bic	r2, r2, #32768
 747 0034 5A64     		str	r2, [r3, #68]
 748              	.L41:
 749              		.loc 1 651 6 discriminator 5 view .LVU215
 652:Core/Src/main.c ****      
 653:Core/Src/main.c ****      // veya CCR'leri 0'la
 654:Core/Src/main.c ****      TIM1->CCR1 = 0;
 750              		.loc 1 654 6 view .LVU216
 751              		.loc 1 654 17 is_stmt 0 view .LVU217
 752 0036 074B     		ldr	r3, .L45+4
 753 0038 0022     		movs	r2, #0
 754 003a 5A63     		str	r2, [r3, #52]
 655:Core/Src/main.c ****      TIM1->CCR2 = 0;
 755              		.loc 1 655 6 is_stmt 1 view .LVU218
 756              		.loc 1 655 17 is_stmt 0 view .LVU219
 757 003c 9A63     		str	r2, [r3, #56]
 656:Core/Src/main.c ****      TIM1->CCR3 = 0;
 758              		.loc 1 656 6 is_stmt 1 view .LVU220
 759              		.loc 1 656 17 is_stmt 0 view .LVU221
 760 003e DA63     		str	r2, [r3, #60]
 657:Core/Src/main.c ****      TIM1->CCER = 0; // Tum cikislari Hi-Z yap
 761              		.loc 1 657 6 is_stmt 1 view .LVU222
 762              		.loc 1 657 17 is_stmt 0 view .LVU223
 763 0040 1A62     		str	r2, [r3, #32]
 658:Core/Src/main.c **** 
 659:Core/Src/main.c ****     // 2. Hata LED'ini Yak
 660:Core/Src/main.c ****     // Sizin semada PD12-PD15 LED'lerdi:
 661:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // Ornek: PD15'i yak
 764              		.loc 1 661 5 is_stmt 1 view .LVU224
 765 0042 0122     		movs	r2, #1
 766 0044 4FF40041 		mov	r1, #32768
 767 0048 0348     		ldr	r0, .L45+8
 768              	.LVL32:
 769              		.loc 1 661 5 is_stmt 0 view .LVU225
 770 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
 771              	.LVL33:
 662:Core/Src/main.c ****     
 663:Core/Src/main.c ****     // 3. (Opsiyonel) Sonsuz donguye gir (Guvenli durus)
 664:Core/Src/main.c ****     // Error_Handler();
ARM GAS  /tmp/ccpm2Mw3.s 			page 27


 665:Core/Src/main.c ****   }
 666:Core/Src/main.c **** }
 772              		.loc 1 666 1 view .LVU226
 773 004e 08BD     		pop	{r3, pc}
 774              	.L46:
 775              		.align	2
 776              	.L45:
 777 0050 00000000 		.word	htim1
 778 0054 002C0140 		.word	1073818624
 779 0058 00140140 		.word	1073812480
 780              		.cfi_endproc
 781              	.LFE74:
 783              		.section	.text.Error_Handler,"ax",%progbits
 784              		.align	1
 785              		.global	Error_Handler
 786              		.syntax unified
 787              		.thumb
 788              		.thumb_func
 790              	Error_Handler:
 791              	.LFB75:
 667:Core/Src/main.c **** 
 668:Core/Src/main.c **** /* USER CODE END 4 */
 669:Core/Src/main.c **** 
 670:Core/Src/main.c **** /**
 671:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 672:Core/Src/main.c ****   * @retval None
 673:Core/Src/main.c ****   */
 674:Core/Src/main.c **** void Error_Handler(void)
 675:Core/Src/main.c **** {
 792              		.loc 1 675 1 is_stmt 1 view -0
 793              		.cfi_startproc
 794              		@ Volatile: function does not return.
 795              		@ args = 0, pretend = 0, frame = 0
 796              		@ frame_needed = 0, uses_anonymous_args = 0
 797              		@ link register save eliminated.
 676:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 677:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 678:Core/Src/main.c ****   __disable_irq();
 798              		.loc 1 678 3 view .LVU228
 799              	.LBB10:
 800              	.LBI10:
 801              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/ccpm2Mw3.s 			page 28


  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccpm2Mw3.s 			page 29


  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
ARM GAS  /tmp/ccpm2Mw3.s 			page 30


 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 802              		.loc 2 140 27 view .LVU229
 803              	.LBB11:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 804              		.loc 2 142 3 view .LVU230
 805              		.syntax unified
 806              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 807 0000 72B6     		cpsid i
 808              	@ 0 "" 2
 809              		.thumb
 810              		.syntax unified
 811              	.L48:
 812              	.LBE11:
 813              	.LBE10:
 679:Core/Src/main.c ****   while (1)
 814              		.loc 1 679 3 view .LVU231
 680:Core/Src/main.c ****   {
 681:Core/Src/main.c ****   }
 815              		.loc 1 681 3 view .LVU232
 679:Core/Src/main.c ****   while (1)
 816              		.loc 1 679 9 view .LVU233
 817 0002 FEE7     		b	.L48
 818              		.cfi_endproc
 819              	.LFE75:
 821              		.section	.text.MX_ADC1_Init,"ax",%progbits
 822              		.align	1
 823              		.syntax unified
 824              		.thumb
 825              		.thumb_func
 827              	MX_ADC1_Init:
 828              	.LFB67:
 210:Core/Src/main.c **** 
 829              		.loc 1 210 1 view -0
 830              		.cfi_startproc
 831              		@ args = 0, pretend = 0, frame = 16
 832              		@ frame_needed = 0, uses_anonymous_args = 0
 833 0000 00B5     		push	{lr}
 834              		.cfi_def_cfa_offset 4
 835              		.cfi_offset 14, -4
 836 0002 85B0     		sub	sp, sp, #20
 837              		.cfi_def_cfa_offset 24
 216:Core/Src/main.c **** 
 838              		.loc 1 216 3 view .LVU235
 216:Core/Src/main.c **** 
 839              		.loc 1 216 26 is_stmt 0 view .LVU236
 840 0004 0023     		movs	r3, #0
ARM GAS  /tmp/ccpm2Mw3.s 			page 31


 841 0006 0193     		str	r3, [sp, #4]
 842 0008 0293     		str	r3, [sp, #8]
 843 000a 0393     		str	r3, [sp, #12]
 224:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 844              		.loc 1 224 3 is_stmt 1 view .LVU237
 224:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 845              		.loc 1 224 18 is_stmt 0 view .LVU238
 846 000c 1048     		ldr	r0, .L55
 847 000e 114A     		ldr	r2, .L55+4
 848 0010 0260     		str	r2, [r0]
 225:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 849              		.loc 1 225 3 is_stmt 1 view .LVU239
 225:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 850              		.loc 1 225 27 is_stmt 0 view .LVU240
 851 0012 8360     		str	r3, [r0, #8]
 226:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 852              		.loc 1 226 3 is_stmt 1 view .LVU241
 226:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 853              		.loc 1 226 33 is_stmt 0 view .LVU242
 854 0014 0373     		strb	r3, [r0, #12]
 227:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 855              		.loc 1 227 3 is_stmt 1 view .LVU243
 227:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 856              		.loc 1 227 36 is_stmt 0 view .LVU244
 857 0016 0375     		strb	r3, [r0, #20]
 228:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 858              		.loc 1 228 3 is_stmt 1 view .LVU245
 228:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 859              		.loc 1 228 31 is_stmt 0 view .LVU246
 860 0018 4FF46022 		mov	r2, #917504
 861 001c C261     		str	r2, [r0, #28]
 229:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 862              		.loc 1 229 3 is_stmt 1 view .LVU247
 229:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 863              		.loc 1 229 24 is_stmt 0 view .LVU248
 864 001e 4360     		str	r3, [r0, #4]
 230:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 865              		.loc 1 230 3 is_stmt 1 view .LVU249
 230:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 866              		.loc 1 230 30 is_stmt 0 view .LVU250
 867 0020 0123     		movs	r3, #1
 868 0022 0361     		str	r3, [r0, #16]
 231:Core/Src/main.c ****   {
 869              		.loc 1 231 3 is_stmt 1 view .LVU251
 231:Core/Src/main.c ****   {
 870              		.loc 1 231 7 is_stmt 0 view .LVU252
 871 0024 FFF7FEFF 		bl	HAL_ADC_Init
 872              	.LVL34:
 231:Core/Src/main.c ****   {
 873              		.loc 1 231 6 discriminator 1 view .LVU253
 874 0028 68B9     		cbnz	r0, .L53
 238:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 875              		.loc 1 238 3 is_stmt 1 view .LVU254
 238:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 876              		.loc 1 238 19 is_stmt 0 view .LVU255
 877 002a 0223     		movs	r3, #2
 878 002c 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccpm2Mw3.s 			page 32


 239:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 879              		.loc 1 239 3 is_stmt 1 view .LVU256
 239:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 880              		.loc 1 239 16 is_stmt 0 view .LVU257
 881 002e 0123     		movs	r3, #1
 882 0030 0293     		str	r3, [sp, #8]
 240:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 883              		.loc 1 240 3 is_stmt 1 view .LVU258
 240:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 884              		.loc 1 240 24 is_stmt 0 view .LVU259
 885 0032 0023     		movs	r3, #0
 886 0034 0393     		str	r3, [sp, #12]
 241:Core/Src/main.c ****   {
 887              		.loc 1 241 3 is_stmt 1 view .LVU260
 241:Core/Src/main.c ****   {
 888              		.loc 1 241 7 is_stmt 0 view .LVU261
 889 0036 01A9     		add	r1, sp, #4
 890 0038 0548     		ldr	r0, .L55
 891 003a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 892              	.LVL35:
 241:Core/Src/main.c ****   {
 893              		.loc 1 241 6 discriminator 1 view .LVU262
 894 003e 20B9     		cbnz	r0, .L54
 249:Core/Src/main.c **** 
 895              		.loc 1 249 1 view .LVU263
 896 0040 05B0     		add	sp, sp, #20
 897              		.cfi_remember_state
 898              		.cfi_def_cfa_offset 4
 899              		@ sp needed
 900 0042 5DF804FB 		ldr	pc, [sp], #4
 901              	.L53:
 902              		.cfi_restore_state
 233:Core/Src/main.c ****   }
 903              		.loc 1 233 5 is_stmt 1 view .LVU264
 904 0046 FFF7FEFF 		bl	Error_Handler
 905              	.LVL36:
 906              	.L54:
 243:Core/Src/main.c ****   }
 907              		.loc 1 243 5 view .LVU265
 908 004a FFF7FEFF 		bl	Error_Handler
 909              	.LVL37:
 910              	.L56:
 911 004e 00BF     		.align	2
 912              	.L55:
 913 0050 00000000 		.word	hadc1
 914 0054 00240140 		.word	1073816576
 915              		.cfi_endproc
 916              	.LFE67:
 918              		.section	.text.MX_CAN_Init,"ax",%progbits
 919              		.align	1
 920              		.syntax unified
 921              		.thumb
 922              		.thumb_func
 924              	MX_CAN_Init:
 925              	.LFB68:
 257:Core/Src/main.c **** 
 926              		.loc 1 257 1 view -0
ARM GAS  /tmp/ccpm2Mw3.s 			page 33


 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 0
 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930 0000 08B5     		push	{r3, lr}
 931              		.cfi_def_cfa_offset 8
 932              		.cfi_offset 3, -8
 933              		.cfi_offset 14, -4
 266:Core/Src/main.c ****   hcan.Init.Prescaler = 16;
 934              		.loc 1 266 3 view .LVU267
 266:Core/Src/main.c ****   hcan.Init.Prescaler = 16;
 935              		.loc 1 266 17 is_stmt 0 view .LVU268
 936 0002 0B48     		ldr	r0, .L61
 937 0004 0B4B     		ldr	r3, .L61+4
 938 0006 0360     		str	r3, [r0]
 267:Core/Src/main.c ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 939              		.loc 1 267 3 is_stmt 1 view .LVU269
 267:Core/Src/main.c ****   hcan.Init.Mode = CAN_MODE_NORMAL;
 940              		.loc 1 267 23 is_stmt 0 view .LVU270
 941 0008 1023     		movs	r3, #16
 942 000a 4360     		str	r3, [r0, #4]
 268:Core/Src/main.c ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 943              		.loc 1 268 3 is_stmt 1 view .LVU271
 268:Core/Src/main.c ****   hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 944              		.loc 1 268 18 is_stmt 0 view .LVU272
 945 000c 0023     		movs	r3, #0
 946 000e 8360     		str	r3, [r0, #8]
 269:Core/Src/main.c ****   hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 947              		.loc 1 269 3 is_stmt 1 view .LVU273
 269:Core/Src/main.c ****   hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 948              		.loc 1 269 27 is_stmt 0 view .LVU274
 949 0010 C360     		str	r3, [r0, #12]
 270:Core/Src/main.c ****   hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 950              		.loc 1 270 3 is_stmt 1 view .LVU275
 270:Core/Src/main.c ****   hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 951              		.loc 1 270 22 is_stmt 0 view .LVU276
 952 0012 0361     		str	r3, [r0, #16]
 271:Core/Src/main.c ****   hcan.Init.TimeTriggeredMode = DISABLE;
 953              		.loc 1 271 3 is_stmt 1 view .LVU277
 271:Core/Src/main.c ****   hcan.Init.TimeTriggeredMode = DISABLE;
 954              		.loc 1 271 22 is_stmt 0 view .LVU278
 955 0014 4361     		str	r3, [r0, #20]
 272:Core/Src/main.c ****   hcan.Init.AutoBusOff = DISABLE;
 956              		.loc 1 272 3 is_stmt 1 view .LVU279
 272:Core/Src/main.c ****   hcan.Init.AutoBusOff = DISABLE;
 957              		.loc 1 272 31 is_stmt 0 view .LVU280
 958 0016 0376     		strb	r3, [r0, #24]
 273:Core/Src/main.c ****   hcan.Init.AutoWakeUp = DISABLE;
 959              		.loc 1 273 3 is_stmt 1 view .LVU281
 273:Core/Src/main.c ****   hcan.Init.AutoWakeUp = DISABLE;
 960              		.loc 1 273 24 is_stmt 0 view .LVU282
 961 0018 4376     		strb	r3, [r0, #25]
 274:Core/Src/main.c ****   hcan.Init.AutoRetransmission = DISABLE;
 962              		.loc 1 274 3 is_stmt 1 view .LVU283
 274:Core/Src/main.c ****   hcan.Init.AutoRetransmission = DISABLE;
 963              		.loc 1 274 24 is_stmt 0 view .LVU284
 964 001a 8376     		strb	r3, [r0, #26]
 275:Core/Src/main.c ****   hcan.Init.ReceiveFifoLocked = DISABLE;
ARM GAS  /tmp/ccpm2Mw3.s 			page 34


 965              		.loc 1 275 3 is_stmt 1 view .LVU285
 275:Core/Src/main.c ****   hcan.Init.ReceiveFifoLocked = DISABLE;
 966              		.loc 1 275 32 is_stmt 0 view .LVU286
 967 001c C376     		strb	r3, [r0, #27]
 276:Core/Src/main.c ****   hcan.Init.TransmitFifoPriority = DISABLE;
 968              		.loc 1 276 3 is_stmt 1 view .LVU287
 276:Core/Src/main.c ****   hcan.Init.TransmitFifoPriority = DISABLE;
 969              		.loc 1 276 31 is_stmt 0 view .LVU288
 970 001e 0377     		strb	r3, [r0, #28]
 277:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 971              		.loc 1 277 3 is_stmt 1 view .LVU289
 277:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan) != HAL_OK)
 972              		.loc 1 277 34 is_stmt 0 view .LVU290
 973 0020 4377     		strb	r3, [r0, #29]
 278:Core/Src/main.c ****   {
 974              		.loc 1 278 3 is_stmt 1 view .LVU291
 278:Core/Src/main.c ****   {
 975              		.loc 1 278 7 is_stmt 0 view .LVU292
 976 0022 FFF7FEFF 		bl	HAL_CAN_Init
 977              	.LVL38:
 278:Core/Src/main.c ****   {
 978              		.loc 1 278 6 discriminator 1 view .LVU293
 979 0026 00B9     		cbnz	r0, .L60
 286:Core/Src/main.c **** 
 980              		.loc 1 286 1 view .LVU294
 981 0028 08BD     		pop	{r3, pc}
 982              	.L60:
 280:Core/Src/main.c ****   }
 983              		.loc 1 280 5 is_stmt 1 view .LVU295
 984 002a FFF7FEFF 		bl	Error_Handler
 985              	.LVL39:
 986              	.L62:
 987 002e 00BF     		.align	2
 988              	.L61:
 989 0030 00000000 		.word	hcan
 990 0034 00640040 		.word	1073767424
 991              		.cfi_endproc
 992              	.LFE68:
 994              		.section	.text.MX_TIM1_Init,"ax",%progbits
 995              		.align	1
 996              		.syntax unified
 997              		.thumb
 998              		.thumb_func
 1000              	MX_TIM1_Init:
 1001              	.LFB69:
 294:Core/Src/main.c **** 
 1002              		.loc 1 294 1 view -0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 88
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 1006 0000 10B5     		push	{r4, lr}
 1007              		.cfi_def_cfa_offset 8
 1008              		.cfi_offset 4, -8
 1009              		.cfi_offset 14, -4
 1010 0002 96B0     		sub	sp, sp, #88
 1011              		.cfi_def_cfa_offset 96
 300:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
ARM GAS  /tmp/ccpm2Mw3.s 			page 35


 1012              		.loc 1 300 3 view .LVU297
 300:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1013              		.loc 1 300 26 is_stmt 0 view .LVU298
 1014 0004 0024     		movs	r4, #0
 1015 0006 1294     		str	r4, [sp, #72]
 1016 0008 1394     		str	r4, [sp, #76]
 1017 000a 1494     		str	r4, [sp, #80]
 1018 000c 1594     		str	r4, [sp, #84]
 301:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1019              		.loc 1 301 3 is_stmt 1 view .LVU299
 301:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1020              		.loc 1 301 27 is_stmt 0 view .LVU300
 1021 000e 1094     		str	r4, [sp, #64]
 1022 0010 1194     		str	r4, [sp, #68]
 302:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1023              		.loc 1 302 3 is_stmt 1 view .LVU301
 302:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1024              		.loc 1 302 22 is_stmt 0 view .LVU302
 1025 0012 0994     		str	r4, [sp, #36]
 1026 0014 0A94     		str	r4, [sp, #40]
 1027 0016 0B94     		str	r4, [sp, #44]
 1028 0018 0C94     		str	r4, [sp, #48]
 1029 001a 0D94     		str	r4, [sp, #52]
 1030 001c 0E94     		str	r4, [sp, #56]
 1031 001e 0F94     		str	r4, [sp, #60]
 303:Core/Src/main.c **** 
 1032              		.loc 1 303 3 is_stmt 1 view .LVU303
 303:Core/Src/main.c **** 
 1033              		.loc 1 303 34 is_stmt 0 view .LVU304
 1034 0020 2022     		movs	r2, #32
 1035 0022 2146     		mov	r1, r4
 1036 0024 01A8     		add	r0, sp, #4
 1037 0026 FFF7FEFF 		bl	memset
 1038              	.LVL40:
 308:Core/Src/main.c ****   // 72MHz / (44 + 1) / (99 + 1) = 16 kHz PWM
 1039              		.loc 1 308 3 is_stmt 1 view .LVU305
 308:Core/Src/main.c ****   // 72MHz / (44 + 1) / (99 + 1) = 16 kHz PWM
 1040              		.loc 1 308 18 is_stmt 0 view .LVU306
 1041 002a 3248     		ldr	r0, .L81
 1042 002c 324B     		ldr	r3, .L81+4
 1043 002e 0360     		str	r3, [r0]
 310:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1044              		.loc 1 310 3 is_stmt 1 view .LVU307
 310:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1045              		.loc 1 310 24 is_stmt 0 view .LVU308
 1046 0030 2C23     		movs	r3, #44
 1047 0032 4360     		str	r3, [r0, #4]
 311:Core/Src/main.c ****   htim1.Init.Period = 99;
 1048              		.loc 1 311 3 is_stmt 1 view .LVU309
 311:Core/Src/main.c ****   htim1.Init.Period = 99;
 1049              		.loc 1 311 26 is_stmt 0 view .LVU310
 1050 0034 8460     		str	r4, [r0, #8]
 312:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1051              		.loc 1 312 3 is_stmt 1 view .LVU311
 312:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1052              		.loc 1 312 21 is_stmt 0 view .LVU312
 1053 0036 6323     		movs	r3, #99
ARM GAS  /tmp/ccpm2Mw3.s 			page 36


 1054 0038 C360     		str	r3, [r0, #12]
 313:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0; // Her periyotta update event
 1055              		.loc 1 313 3 is_stmt 1 view .LVU313
 313:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0; // Her periyotta update event
 1056              		.loc 1 313 28 is_stmt 0 view .LVU314
 1057 003a 0461     		str	r4, [r0, #16]
 314:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1058              		.loc 1 314 3 is_stmt 1 view .LVU315
 314:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1059              		.loc 1 314 32 is_stmt 0 view .LVU316
 1060 003c 4461     		str	r4, [r0, #20]
 315:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1061              		.loc 1 315 3 is_stmt 1 view .LVU317
 315:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1062              		.loc 1 315 32 is_stmt 0 view .LVU318
 1063 003e 8461     		str	r4, [r0, #24]
 316:Core/Src/main.c ****   {
 1064              		.loc 1 316 3 is_stmt 1 view .LVU319
 316:Core/Src/main.c ****   {
 1065              		.loc 1 316 7 is_stmt 0 view .LVU320
 1066 0040 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1067              	.LVL41:
 316:Core/Src/main.c ****   {
 1068              		.loc 1 316 6 discriminator 1 view .LVU321
 1069 0044 0028     		cmp	r0, #0
 1070 0046 44D1     		bne	.L73
 320:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1071              		.loc 1 320 3 is_stmt 1 view .LVU322
 320:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1072              		.loc 1 320 34 is_stmt 0 view .LVU323
 1073 0048 4FF48053 		mov	r3, #4096
 1074 004c 1293     		str	r3, [sp, #72]
 321:Core/Src/main.c ****   {
 1075              		.loc 1 321 3 is_stmt 1 view .LVU324
 321:Core/Src/main.c ****   {
 1076              		.loc 1 321 7 is_stmt 0 view .LVU325
 1077 004e 12A9     		add	r1, sp, #72
 1078 0050 2848     		ldr	r0, .L81
 1079 0052 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1080              	.LVL42:
 321:Core/Src/main.c ****   {
 1081              		.loc 1 321 6 discriminator 1 view .LVU326
 1082 0056 0028     		cmp	r0, #0
 1083 0058 3DD1     		bne	.L74
 325:Core/Src/main.c ****   {
 1084              		.loc 1 325 3 is_stmt 1 view .LVU327
 325:Core/Src/main.c ****   {
 1085              		.loc 1 325 7 is_stmt 0 view .LVU328
 1086 005a 2648     		ldr	r0, .L81
 1087 005c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1088              	.LVL43:
 325:Core/Src/main.c ****   {
 1089              		.loc 1 325 6 discriminator 1 view .LVU329
 1090 0060 0028     		cmp	r0, #0
 1091 0062 3AD1     		bne	.L75
 329:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1092              		.loc 1 329 3 is_stmt 1 view .LVU330
ARM GAS  /tmp/ccpm2Mw3.s 			page 37


 329:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1093              		.loc 1 329 37 is_stmt 0 view .LVU331
 1094 0064 0023     		movs	r3, #0
 1095 0066 1093     		str	r3, [sp, #64]
 330:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1096              		.loc 1 330 3 is_stmt 1 view .LVU332
 330:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1097              		.loc 1 330 33 is_stmt 0 view .LVU333
 1098 0068 1193     		str	r3, [sp, #68]
 331:Core/Src/main.c ****   {
 1099              		.loc 1 331 3 is_stmt 1 view .LVU334
 331:Core/Src/main.c ****   {
 1100              		.loc 1 331 7 is_stmt 0 view .LVU335
 1101 006a 10A9     		add	r1, sp, #64
 1102 006c 2148     		ldr	r0, .L81
 1103 006e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1104              	.LVL44:
 331:Core/Src/main.c ****   {
 1105              		.loc 1 331 6 discriminator 1 view .LVU336
 1106 0072 0028     		cmp	r0, #0
 1107 0074 33D1     		bne	.L76
 335:Core/Src/main.c ****   sConfigOC.Pulse = 0; // Baslangicta %0 duty
 1108              		.loc 1 335 3 is_stmt 1 view .LVU337
 335:Core/Src/main.c ****   sConfigOC.Pulse = 0; // Baslangicta %0 duty
 1109              		.loc 1 335 20 is_stmt 0 view .LVU338
 1110 0076 6023     		movs	r3, #96
 1111 0078 0993     		str	r3, [sp, #36]
 336:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1112              		.loc 1 336 3 is_stmt 1 view .LVU339
 336:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1113              		.loc 1 336 19 is_stmt 0 view .LVU340
 1114 007a 0022     		movs	r2, #0
 1115 007c 0A92     		str	r2, [sp, #40]
 337:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH; // Complementary pin de HIGH
 1116              		.loc 1 337 3 is_stmt 1 view .LVU341
 337:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH; // Complementary pin de HIGH
 1117              		.loc 1 337 24 is_stmt 0 view .LVU342
 1118 007e 0B92     		str	r2, [sp, #44]
 338:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1119              		.loc 1 338 3 is_stmt 1 view .LVU343
 338:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1120              		.loc 1 338 25 is_stmt 0 view .LVU344
 1121 0080 0C92     		str	r2, [sp, #48]
 339:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1122              		.loc 1 339 3 is_stmt 1 view .LVU345
 339:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1123              		.loc 1 339 24 is_stmt 0 view .LVU346
 1124 0082 0D92     		str	r2, [sp, #52]
 340:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1125              		.loc 1 340 3 is_stmt 1 view .LVU347
 340:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1126              		.loc 1 340 25 is_stmt 0 view .LVU348
 1127 0084 0E92     		str	r2, [sp, #56]
 341:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1128              		.loc 1 341 3 is_stmt 1 view .LVU349
 341:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1129              		.loc 1 341 26 is_stmt 0 view .LVU350
ARM GAS  /tmp/ccpm2Mw3.s 			page 38


 1130 0086 0F92     		str	r2, [sp, #60]
 342:Core/Src/main.c ****   {
 1131              		.loc 1 342 3 is_stmt 1 view .LVU351
 342:Core/Src/main.c ****   {
 1132              		.loc 1 342 7 is_stmt 0 view .LVU352
 1133 0088 09A9     		add	r1, sp, #36
 1134 008a 1A48     		ldr	r0, .L81
 1135 008c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1136              	.LVL45:
 342:Core/Src/main.c ****   {
 1137              		.loc 1 342 6 discriminator 1 view .LVU353
 1138 0090 38BB     		cbnz	r0, .L77
 346:Core/Src/main.c ****   {
 1139              		.loc 1 346 3 is_stmt 1 view .LVU354
 346:Core/Src/main.c ****   {
 1140              		.loc 1 346 7 is_stmt 0 view .LVU355
 1141 0092 0422     		movs	r2, #4
 1142 0094 09A9     		add	r1, sp, #36
 1143 0096 1748     		ldr	r0, .L81
 1144 0098 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1145              	.LVL46:
 346:Core/Src/main.c ****   {
 1146              		.loc 1 346 6 discriminator 1 view .LVU356
 1147 009c 18BB     		cbnz	r0, .L78
 350:Core/Src/main.c ****   {
 1148              		.loc 1 350 3 is_stmt 1 view .LVU357
 350:Core/Src/main.c ****   {
 1149              		.loc 1 350 7 is_stmt 0 view .LVU358
 1150 009e 0822     		movs	r2, #8
 1151 00a0 09A9     		add	r1, sp, #36
 1152 00a2 1448     		ldr	r0, .L81
 1153 00a4 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1154              	.LVL47:
 350:Core/Src/main.c ****   {
 1155              		.loc 1 350 6 discriminator 1 view .LVU359
 1156 00a8 F8B9     		cbnz	r0, .L79
 354:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1157              		.loc 1 354 3 is_stmt 1 view .LVU360
 354:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1158              		.loc 1 354 40 is_stmt 0 view .LVU361
 1159 00aa 0023     		movs	r3, #0
 1160 00ac 0193     		str	r3, [sp, #4]
 355:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1161              		.loc 1 355 3 is_stmt 1 view .LVU362
 355:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1162              		.loc 1 355 41 is_stmt 0 view .LVU363
 1163 00ae 0293     		str	r3, [sp, #8]
 356:Core/Src/main.c ****   // Deadtime Ayari: 72MHz clock -> 13.88ns per tick.
 1164              		.loc 1 356 3 is_stmt 1 view .LVU364
 356:Core/Src/main.c ****   // Deadtime Ayari: 72MHz clock -> 13.88ns per tick.
 1165              		.loc 1 356 34 is_stmt 0 view .LVU365
 1166 00b0 0393     		str	r3, [sp, #12]
 360:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE; // ALM pinleri icin Break aktif
 1167              		.loc 1 360 3 is_stmt 1 view .LVU366
 360:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE; // ALM pinleri icin Break aktif
 1168              		.loc 1 360 33 is_stmt 0 view .LVU367
 1169 00b2 B522     		movs	r2, #181
ARM GAS  /tmp/ccpm2Mw3.s 			page 39


 1170 00b4 0492     		str	r2, [sp, #16]
 361:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW; // ALM pinleri active-low
 1171              		.loc 1 361 3 is_stmt 1 view .LVU368
 361:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW; // ALM pinleri active-low
 1172              		.loc 1 361 35 is_stmt 0 view .LVU369
 1173 00b6 4FF48052 		mov	r2, #4096
 1174 00ba 0592     		str	r2, [sp, #20]
 362:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE; // Break'ten sonra otomatik ku
 1175              		.loc 1 362 3 is_stmt 1 view .LVU370
 362:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE; // Break'ten sonra otomatik ku
 1176              		.loc 1 362 38 is_stmt 0 view .LVU371
 1177 00bc 0693     		str	r3, [sp, #24]
 363:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1178              		.loc 1 363 3 is_stmt 1 view .LVU372
 363:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1179              		.loc 1 363 40 is_stmt 0 view .LVU373
 1180 00be 4FF48043 		mov	r3, #16384
 1181 00c2 0893     		str	r3, [sp, #32]
 364:Core/Src/main.c ****   {
 1182              		.loc 1 364 3 is_stmt 1 view .LVU374
 364:Core/Src/main.c ****   {
 1183              		.loc 1 364 7 is_stmt 0 view .LVU375
 1184 00c4 01A9     		add	r1, sp, #4
 1185 00c6 0B48     		ldr	r0, .L81
 1186 00c8 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1187              	.LVL48:
 364:Core/Src/main.c ****   {
 1188              		.loc 1 364 6 discriminator 1 view .LVU376
 1189 00cc 78B9     		cbnz	r0, .L80
 373:Core/Src/main.c **** 
 1190              		.loc 1 373 1 view .LVU377
 1191 00ce 16B0     		add	sp, sp, #88
 1192              		.cfi_remember_state
 1193              		.cfi_def_cfa_offset 8
 1194              		@ sp needed
 1195 00d0 10BD     		pop	{r4, pc}
 1196              	.L73:
 1197              		.cfi_restore_state
 318:Core/Src/main.c ****   }
 1198              		.loc 1 318 5 is_stmt 1 view .LVU378
 1199 00d2 FFF7FEFF 		bl	Error_Handler
 1200              	.LVL49:
 1201              	.L74:
 323:Core/Src/main.c ****   }
 1202              		.loc 1 323 5 view .LVU379
 1203 00d6 FFF7FEFF 		bl	Error_Handler
 1204              	.LVL50:
 1205              	.L75:
 327:Core/Src/main.c ****   }
 1206              		.loc 1 327 5 view .LVU380
 1207 00da FFF7FEFF 		bl	Error_Handler
 1208              	.LVL51:
 1209              	.L76:
 333:Core/Src/main.c ****   }
 1210              		.loc 1 333 5 view .LVU381
 1211 00de FFF7FEFF 		bl	Error_Handler
 1212              	.LVL52:
ARM GAS  /tmp/ccpm2Mw3.s 			page 40


 1213              	.L77:
 344:Core/Src/main.c ****   }
 1214              		.loc 1 344 5 view .LVU382
 1215 00e2 FFF7FEFF 		bl	Error_Handler
 1216              	.LVL53:
 1217              	.L78:
 348:Core/Src/main.c ****   }
 1218              		.loc 1 348 5 view .LVU383
 1219 00e6 FFF7FEFF 		bl	Error_Handler
 1220              	.LVL54:
 1221              	.L79:
 352:Core/Src/main.c ****   }
 1222              		.loc 1 352 5 view .LVU384
 1223 00ea FFF7FEFF 		bl	Error_Handler
 1224              	.LVL55:
 1225              	.L80:
 366:Core/Src/main.c ****   }
 1226              		.loc 1 366 5 view .LVU385
 1227 00ee FFF7FEFF 		bl	Error_Handler
 1228              	.LVL56:
 1229              	.L82:
 1230 00f2 00BF     		.align	2
 1231              	.L81:
 1232 00f4 00000000 		.word	htim1
 1233 00f8 002C0140 		.word	1073818624
 1234              		.cfi_endproc
 1235              	.LFE69:
 1237              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1238              		.align	1
 1239              		.syntax unified
 1240              		.thumb
 1241              		.thumb_func
 1243              	MX_TIM2_Init:
 1244              	.LFB70:
 381:Core/Src/main.c **** 
 1245              		.loc 1 381 1 view -0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 24
 1248              		@ frame_needed = 0, uses_anonymous_args = 0
 1249 0000 00B5     		push	{lr}
 1250              		.cfi_def_cfa_offset 4
 1251              		.cfi_offset 14, -4
 1252 0002 87B0     		sub	sp, sp, #28
 1253              		.cfi_def_cfa_offset 32
 387:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1254              		.loc 1 387 3 view .LVU387
 387:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1255              		.loc 1 387 26 is_stmt 0 view .LVU388
 1256 0004 0023     		movs	r3, #0
 1257 0006 0293     		str	r3, [sp, #8]
 1258 0008 0393     		str	r3, [sp, #12]
 1259 000a 0493     		str	r3, [sp, #16]
 1260 000c 0593     		str	r3, [sp, #20]
 388:Core/Src/main.c **** 
 1261              		.loc 1 388 3 is_stmt 1 view .LVU389
 388:Core/Src/main.c **** 
 1262              		.loc 1 388 27 is_stmt 0 view .LVU390
ARM GAS  /tmp/ccpm2Mw3.s 			page 41


 1263 000e 0093     		str	r3, [sp]
 1264 0010 0193     		str	r3, [sp, #4]
 393:Core/Src/main.c ****   // 72MHz Timer Clock (APB1=36M, Timer x2 = 72M)
 1265              		.loc 1 393 3 is_stmt 1 view .LVU391
 393:Core/Src/main.c ****   // 72MHz Timer Clock (APB1=36M, Timer x2 = 72M)
 1266              		.loc 1 393 18 is_stmt 0 view .LVU392
 1267 0012 1448     		ldr	r0, .L91
 1268 0014 4FF08042 		mov	r2, #1073741824
 1269 0018 0260     		str	r2, [r0]
 397:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1270              		.loc 1 397 3 is_stmt 1 view .LVU393
 397:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1271              		.loc 1 397 24 is_stmt 0 view .LVU394
 1272 001a 40F2CF22 		movw	r2, #719
 1273 001e 4260     		str	r2, [r0, #4]
 398:Core/Src/main.c ****   htim2.Init.Period = 9;
 1274              		.loc 1 398 3 is_stmt 1 view .LVU395
 398:Core/Src/main.c ****   htim2.Init.Period = 9;
 1275              		.loc 1 398 26 is_stmt 0 view .LVU396
 1276 0020 8360     		str	r3, [r0, #8]
 399:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1277              		.loc 1 399 3 is_stmt 1 view .LVU397
 399:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1278              		.loc 1 399 21 is_stmt 0 view .LVU398
 1279 0022 0922     		movs	r2, #9
 1280 0024 C260     		str	r2, [r0, #12]
 400:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1281              		.loc 1 400 3 is_stmt 1 view .LVU399
 400:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1282              		.loc 1 400 28 is_stmt 0 view .LVU400
 1283 0026 0361     		str	r3, [r0, #16]
 401:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1284              		.loc 1 401 3 is_stmt 1 view .LVU401
 401:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1285              		.loc 1 401 32 is_stmt 0 view .LVU402
 1286 0028 8361     		str	r3, [r0, #24]
 402:Core/Src/main.c ****   {
 1287              		.loc 1 402 3 is_stmt 1 view .LVU403
 402:Core/Src/main.c ****   {
 1288              		.loc 1 402 7 is_stmt 0 view .LVU404
 1289 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 1290              	.LVL57:
 402:Core/Src/main.c ****   {
 1291              		.loc 1 402 6 discriminator 1 view .LVU405
 1292 002e 90B9     		cbnz	r0, .L88
 406:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1293              		.loc 1 406 3 is_stmt 1 view .LVU406
 406:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1294              		.loc 1 406 34 is_stmt 0 view .LVU407
 1295 0030 4FF48053 		mov	r3, #4096
 1296 0034 0293     		str	r3, [sp, #8]
 407:Core/Src/main.c ****   {
 1297              		.loc 1 407 3 is_stmt 1 view .LVU408
 407:Core/Src/main.c ****   {
 1298              		.loc 1 407 7 is_stmt 0 view .LVU409
 1299 0036 02A9     		add	r1, sp, #8
 1300 0038 0A48     		ldr	r0, .L91
ARM GAS  /tmp/ccpm2Mw3.s 			page 42


 1301 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1302              	.LVL58:
 407:Core/Src/main.c ****   {
 1303              		.loc 1 407 6 discriminator 1 view .LVU410
 1304 003e 60B9     		cbnz	r0, .L89
 411:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1305              		.loc 1 411 3 is_stmt 1 view .LVU411
 411:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1306              		.loc 1 411 37 is_stmt 0 view .LVU412
 1307 0040 0023     		movs	r3, #0
 1308 0042 0093     		str	r3, [sp]
 412:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1309              		.loc 1 412 3 is_stmt 1 view .LVU413
 412:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1310              		.loc 1 412 33 is_stmt 0 view .LVU414
 1311 0044 0193     		str	r3, [sp, #4]
 413:Core/Src/main.c ****   {
 1312              		.loc 1 413 3 is_stmt 1 view .LVU415
 413:Core/Src/main.c ****   {
 1313              		.loc 1 413 7 is_stmt 0 view .LVU416
 1314 0046 6946     		mov	r1, sp
 1315 0048 0648     		ldr	r0, .L91
 1316 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1317              	.LVL59:
 413:Core/Src/main.c ****   {
 1318              		.loc 1 413 6 discriminator 1 view .LVU417
 1319 004e 30B9     		cbnz	r0, .L90
 421:Core/Src/main.c **** 
 1320              		.loc 1 421 1 view .LVU418
 1321 0050 07B0     		add	sp, sp, #28
 1322              		.cfi_remember_state
 1323              		.cfi_def_cfa_offset 4
 1324              		@ sp needed
 1325 0052 5DF804FB 		ldr	pc, [sp], #4
 1326              	.L88:
 1327              		.cfi_restore_state
 404:Core/Src/main.c ****   }
 1328              		.loc 1 404 5 is_stmt 1 view .LVU419
 1329 0056 FFF7FEFF 		bl	Error_Handler
 1330              	.LVL60:
 1331              	.L89:
 409:Core/Src/main.c ****   }
 1332              		.loc 1 409 5 view .LVU420
 1333 005a FFF7FEFF 		bl	Error_Handler
 1334              	.LVL61:
 1335              	.L90:
 415:Core/Src/main.c ****   }
 1336              		.loc 1 415 5 view .LVU421
 1337 005e FFF7FEFF 		bl	Error_Handler
 1338              	.LVL62:
 1339              	.L92:
 1340 0062 00BF     		.align	2
 1341              	.L91:
 1342 0064 00000000 		.word	htim2
 1343              		.cfi_endproc
 1344              	.LFE70:
 1346              		.section	.text.SystemClock_Config,"ax",%progbits
ARM GAS  /tmp/ccpm2Mw3.s 			page 43


 1347              		.align	1
 1348              		.global	SystemClock_Config
 1349              		.syntax unified
 1350              		.thumb
 1351              		.thumb_func
 1353              	SystemClock_Config:
 1354              	.LFB66:
 163:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1355              		.loc 1 163 1 view -0
 1356              		.cfi_startproc
 1357              		@ args = 0, pretend = 0, frame = 88
 1358              		@ frame_needed = 0, uses_anonymous_args = 0
 1359 0000 10B5     		push	{r4, lr}
 1360              		.cfi_def_cfa_offset 8
 1361              		.cfi_offset 4, -8
 1362              		.cfi_offset 14, -4
 1363 0002 96B0     		sub	sp, sp, #88
 1364              		.cfi_def_cfa_offset 96
 164:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1365              		.loc 1 164 3 view .LVU423
 164:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1366              		.loc 1 164 22 is_stmt 0 view .LVU424
 1367 0004 0CAC     		add	r4, sp, #48
 1368 0006 2822     		movs	r2, #40
 1369 0008 0021     		movs	r1, #0
 1370 000a 2046     		mov	r0, r4
 1371 000c FFF7FEFF 		bl	memset
 1372              	.LVL63:
 165:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1373              		.loc 1 165 3 is_stmt 1 view .LVU425
 165:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1374              		.loc 1 165 22 is_stmt 0 view .LVU426
 1375 0010 0023     		movs	r3, #0
 1376 0012 0793     		str	r3, [sp, #28]
 1377 0014 0893     		str	r3, [sp, #32]
 1378 0016 0993     		str	r3, [sp, #36]
 1379 0018 0A93     		str	r3, [sp, #40]
 1380 001a 0B93     		str	r3, [sp, #44]
 166:Core/Src/main.c **** 
 1381              		.loc 1 166 3 is_stmt 1 view .LVU427
 166:Core/Src/main.c **** 
 1382              		.loc 1 166 28 is_stmt 0 view .LVU428
 1383 001c 0193     		str	r3, [sp, #4]
 1384 001e 0293     		str	r3, [sp, #8]
 1385 0020 0393     		str	r3, [sp, #12]
 1386 0022 0493     		str	r3, [sp, #16]
 1387 0024 0593     		str	r3, [sp, #20]
 1388 0026 0693     		str	r3, [sp, #24]
 171:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1389              		.loc 1 171 3 is_stmt 1 view .LVU429
 171:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1390              		.loc 1 171 36 is_stmt 0 view .LVU430
 1391 0028 0122     		movs	r2, #1
 1392 002a 0C92     		str	r2, [sp, #48]
 172:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 1393              		.loc 1 172 3 is_stmt 1 view .LVU431
 172:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
ARM GAS  /tmp/ccpm2Mw3.s 			page 44


 1394              		.loc 1 172 30 is_stmt 0 view .LVU432
 1395 002c 4FF48033 		mov	r3, #65536
 1396 0030 0D93     		str	r3, [sp, #52]
 173:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1397              		.loc 1 173 3 is_stmt 1 view .LVU433
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1398              		.loc 1 174 3 view .LVU434
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1399              		.loc 1 174 30 is_stmt 0 view .LVU435
 1400 0032 1092     		str	r2, [sp, #64]
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1401              		.loc 1 175 3 is_stmt 1 view .LVU436
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1402              		.loc 1 175 34 is_stmt 0 view .LVU437
 1403 0034 0222     		movs	r2, #2
 1404 0036 1392     		str	r2, [sp, #76]
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1405              		.loc 1 176 3 is_stmt 1 view .LVU438
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 1406              		.loc 1 176 35 is_stmt 0 view .LVU439
 1407 0038 1493     		str	r3, [sp, #80]
 177:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1408              		.loc 1 177 3 is_stmt 1 view .LVU440
 177:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1409              		.loc 1 177 32 is_stmt 0 view .LVU441
 1410 003a 4FF4E013 		mov	r3, #1835008
 1411 003e 1593     		str	r3, [sp, #84]
 178:Core/Src/main.c ****   {
 1412              		.loc 1 178 3 is_stmt 1 view .LVU442
 178:Core/Src/main.c ****   {
 1413              		.loc 1 178 7 is_stmt 0 view .LVU443
 1414 0040 2046     		mov	r0, r4
 1415 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1416              	.LVL64:
 178:Core/Src/main.c ****   {
 1417              		.loc 1 178 6 discriminator 1 view .LVU444
 1418 0046 C0B9     		cbnz	r0, .L98
 185:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1419              		.loc 1 185 3 is_stmt 1 view .LVU445
 185:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1420              		.loc 1 185 31 is_stmt 0 view .LVU446
 1421 0048 0F23     		movs	r3, #15
 1422 004a 0793     		str	r3, [sp, #28]
 187:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1423              		.loc 1 187 3 is_stmt 1 view .LVU447
 187:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1424              		.loc 1 187 34 is_stmt 0 view .LVU448
 1425 004c 0221     		movs	r1, #2
 1426 004e 0891     		str	r1, [sp, #32]
 188:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1427              		.loc 1 188 3 is_stmt 1 view .LVU449
 188:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1428              		.loc 1 188 35 is_stmt 0 view .LVU450
 1429 0050 0023     		movs	r3, #0
 1430 0052 0993     		str	r3, [sp, #36]
 189:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1431              		.loc 1 189 3 is_stmt 1 view .LVU451
ARM GAS  /tmp/ccpm2Mw3.s 			page 45


 189:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1432              		.loc 1 189 36 is_stmt 0 view .LVU452
 1433 0054 4FF48062 		mov	r2, #1024
 1434 0058 0A92     		str	r2, [sp, #40]
 190:Core/Src/main.c **** 
 1435              		.loc 1 190 3 is_stmt 1 view .LVU453
 190:Core/Src/main.c **** 
 1436              		.loc 1 190 36 is_stmt 0 view .LVU454
 1437 005a 0B93     		str	r3, [sp, #44]
 192:Core/Src/main.c ****   {
 1438              		.loc 1 192 3 is_stmt 1 view .LVU455
 192:Core/Src/main.c ****   {
 1439              		.loc 1 192 7 is_stmt 0 view .LVU456
 1440 005c 07A8     		add	r0, sp, #28
 1441 005e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1442              	.LVL65:
 192:Core/Src/main.c ****   {
 1443              		.loc 1 192 6 discriminator 1 view .LVU457
 1444 0062 60B9     		cbnz	r0, .L99
 196:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 1445              		.loc 1 196 3 is_stmt 1 view .LVU458
 196:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 1446              		.loc 1 196 38 is_stmt 0 view .LVU459
 1447 0064 0223     		movs	r3, #2
 1448 0066 0193     		str	r3, [sp, #4]
 197:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1449              		.loc 1 197 3 is_stmt 1 view .LVU460
 197:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1450              		.loc 1 197 35 is_stmt 0 view .LVU461
 1451 0068 4FF40043 		mov	r3, #32768
 1452 006c 0393     		str	r3, [sp, #12]
 198:Core/Src/main.c ****   {
 1453              		.loc 1 198 3 is_stmt 1 view .LVU462
 198:Core/Src/main.c ****   {
 1454              		.loc 1 198 7 is_stmt 0 view .LVU463
 1455 006e 01A8     		add	r0, sp, #4
 1456 0070 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1457              	.LVL66:
 198:Core/Src/main.c ****   {
 1458              		.loc 1 198 6 discriminator 1 view .LVU464
 1459 0074 28B9     		cbnz	r0, .L100
 202:Core/Src/main.c **** 
 1460              		.loc 1 202 1 view .LVU465
 1461 0076 16B0     		add	sp, sp, #88
 1462              		.cfi_remember_state
 1463              		.cfi_def_cfa_offset 8
 1464              		@ sp needed
 1465 0078 10BD     		pop	{r4, pc}
 1466              	.L98:
 1467              		.cfi_restore_state
 180:Core/Src/main.c ****   }
 1468              		.loc 1 180 5 is_stmt 1 view .LVU466
 1469 007a FFF7FEFF 		bl	Error_Handler
 1470              	.LVL67:
 1471              	.L99:
 194:Core/Src/main.c ****   }
 1472              		.loc 1 194 5 view .LVU467
ARM GAS  /tmp/ccpm2Mw3.s 			page 46


 1473 007e FFF7FEFF 		bl	Error_Handler
 1474              	.LVL68:
 1475              	.L100:
 200:Core/Src/main.c ****   }
 1476              		.loc 1 200 5 view .LVU468
 1477 0082 FFF7FEFF 		bl	Error_Handler
 1478              	.LVL69:
 1479              		.cfi_endproc
 1480              	.LFE66:
 1482              		.section	.text.main,"ax",%progbits
 1483              		.align	1
 1484              		.global	main
 1485              		.syntax unified
 1486              		.thumb
 1487              		.thumb_func
 1489              	main:
 1490              	.LFB65:
  96:Core/Src/main.c **** 
 1491              		.loc 1 96 1 view -0
 1492              		.cfi_startproc
 1493              		@ Volatile: function does not return.
 1494              		@ args = 0, pretend = 0, frame = 0
 1495              		@ frame_needed = 0, uses_anonymous_args = 0
 1496 0000 08B5     		push	{r3, lr}
 1497              		.cfi_def_cfa_offset 8
 1498              		.cfi_offset 3, -8
 1499              		.cfi_offset 14, -4
 105:Core/Src/main.c **** 
 1500              		.loc 1 105 3 view .LVU470
 1501 0002 FFF7FEFF 		bl	HAL_Init
 1502              	.LVL70:
 112:Core/Src/main.c **** 
 1503              		.loc 1 112 3 view .LVU471
 1504 0006 FFF7FEFF 		bl	SystemClock_Config
 1505              	.LVL71:
 119:Core/Src/main.c ****   MX_ADC1_Init();
 1506              		.loc 1 119 3 view .LVU472
 1507 000a FFF7FEFF 		bl	MX_GPIO_Init
 1508              	.LVL72:
 120:Core/Src/main.c ****   MX_CAN_Init();
 1509              		.loc 1 120 3 view .LVU473
 1510 000e FFF7FEFF 		bl	MX_ADC1_Init
 1511              	.LVL73:
 121:Core/Src/main.c ****   MX_TIM1_Init(); // YENI
 1512              		.loc 1 121 3 view .LVU474
 1513 0012 FFF7FEFF 		bl	MX_CAN_Init
 1514              	.LVL74:
 122:Core/Src/main.c ****   MX_TIM2_Init(); // YENI
 1515              		.loc 1 122 3 view .LVU475
 1516 0016 FFF7FEFF 		bl	MX_TIM1_Init
 1517              	.LVL75:
 123:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1518              		.loc 1 123 3 view .LVU476
 1519 001a FFF7FEFF 		bl	MX_TIM2_Init
 1520              	.LVL76:
 127:Core/Src/main.c ****   TIM1->CCR2 = 0;
 1521              		.loc 1 127 3 view .LVU477
ARM GAS  /tmp/ccpm2Mw3.s 			page 47


 127:Core/Src/main.c ****   TIM1->CCR2 = 0;
 1522              		.loc 1 127 14 is_stmt 0 view .LVU478
 1523 001e 134B     		ldr	r3, .L104
 1524 0020 0025     		movs	r5, #0
 1525 0022 5D63     		str	r5, [r3, #52]
 128:Core/Src/main.c ****   TIM1->CCR3 = 0;
 1526              		.loc 1 128 3 is_stmt 1 view .LVU479
 128:Core/Src/main.c ****   TIM1->CCR3 = 0;
 1527              		.loc 1 128 14 is_stmt 0 view .LVU480
 1528 0024 9D63     		str	r5, [r3, #56]
 129:Core/Src/main.c ****   
 1529              		.loc 1 129 3 is_stmt 1 view .LVU481
 129:Core/Src/main.c ****   
 1530              		.loc 1 129 14 is_stmt 0 view .LVU482
 1531 0026 DD63     		str	r5, [r3, #60]
 132:Core/Src/main.c ****   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 1532              		.loc 1 132 3 is_stmt 1 view .LVU483
 1533 0028 114C     		ldr	r4, .L104+4
 1534 002a 2946     		mov	r1, r5
 1535 002c 2046     		mov	r0, r4
 1536 002e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1537              	.LVL77:
 133:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 1538              		.loc 1 133 3 view .LVU484
 1539 0032 2946     		mov	r1, r5
 1540 0034 2046     		mov	r0, r4
 1541 0036 FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start
 1542              	.LVL78:
 134:Core/Src/main.c ****   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 1543              		.loc 1 134 3 view .LVU485
 1544 003a 0421     		movs	r1, #4
 1545 003c 2046     		mov	r0, r4
 1546 003e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1547              	.LVL79:
 135:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 1548              		.loc 1 135 3 view .LVU486
 1549 0042 0421     		movs	r1, #4
 1550 0044 2046     		mov	r0, r4
 1551 0046 FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start
 1552              	.LVL80:
 136:Core/Src/main.c ****   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 1553              		.loc 1 136 3 view .LVU487
 1554 004a 0821     		movs	r1, #8
 1555 004c 2046     		mov	r0, r4
 1556 004e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1557              	.LVL81:
 137:Core/Src/main.c **** 
 1558              		.loc 1 137 3 view .LVU488
 1559 0052 0821     		movs	r1, #8
 1560 0054 2046     		mov	r0, r4
 1561 0056 FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start
 1562              	.LVL82:
 140:Core/Src/main.c **** 
 1563              		.loc 1 140 3 view .LVU489
 1564 005a 2268     		ldr	r2, [r4]
 1565 005c 536C     		ldr	r3, [r2, #68]
 1566 005e 43F40043 		orr	r3, r3, #32768
ARM GAS  /tmp/ccpm2Mw3.s 			page 48


 1567 0062 5364     		str	r3, [r2, #68]
 143:Core/Src/main.c **** 
 1568              		.loc 1 143 3 view .LVU490
 1569 0064 0348     		ldr	r0, .L104+8
 1570 0066 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1571              	.LVL83:
 1572              	.L102:
 149:Core/Src/main.c ****   {
 1573              		.loc 1 149 3 view .LVU491
 154:Core/Src/main.c ****   /* USER CODE END 3 */
 1574              		.loc 1 154 3 view .LVU492
 149:Core/Src/main.c ****   {
 1575              		.loc 1 149 9 view .LVU493
 1576 006a FEE7     		b	.L102
 1577              	.L105:
 1578              		.align	2
 1579              	.L104:
 1580 006c 002C0140 		.word	1073818624
 1581 0070 00000000 		.word	htim1
 1582 0074 00000000 		.word	htim2
 1583              		.cfi_endproc
 1584              	.LFE65:
 1586              		.global	ms_counter
 1587              		.section	.bss.ms_counter,"aw",%nobits
 1588              		.align	2
 1591              	ms_counter:
 1592 0000 00000000 		.space	4
 1593              		.global	ccr_ramp_slope
 1594              		.section	.data.ccr_ramp_slope,"aw"
 1595              		.align	2
 1598              	ccr_ramp_slope:
 1599 0000 20000000 		.word	32
 1600              		.global	desired_open_loop_ccr
 1601              		.section	.data.desired_open_loop_ccr,"aw"
 1602              		.align	2
 1605              	desired_open_loop_ccr:
 1606 0000 32000000 		.word	50
 1607              		.global	initial_open_loop_ccr
 1608              		.section	.data.initial_open_loop_ccr,"aw"
 1609              		.align	2
 1612              	initial_open_loop_ccr:
 1613 0000 32000000 		.word	50
 1614              		.global	initial_sector_change_interval
 1615              		.section	.data.initial_sector_change_interval,"aw"
 1616              		.align	3
 1619              	initial_sector_change_interval:
 1620 0000 ABAAAAAA 		.word	-1431655765
 1621 0004 AAAA1A40 		.word	1075489450
 1622              		.global	desired_sector_change_interval
 1623              		.section	.data.desired_sector_change_interval,"aw"
 1624              		.align	3
 1627              	desired_sector_change_interval:
 1628 0000 ABAAAAAA 		.word	-1431655765
 1629 0004 AAAAFA3F 		.word	1073392298
 1630              		.global	open_loop_start_speed_rpm
 1631              		.section	.rodata.open_loop_start_speed_rpm,"a"
 1632              		.align	3
ARM GAS  /tmp/ccpm2Mw3.s 			page 49


 1635              	open_loop_start_speed_rpm:
 1636 0000 00000000 		.word	0
 1637 0004 00C07240 		.word	1081262080
 1638              		.global	open_loop_velocity_rpm
 1639              		.section	.rodata.open_loop_velocity_rpm,"a"
 1640              		.align	3
 1643              	open_loop_velocity_rpm:
 1644 0000 00000000 		.word	0
 1645 0004 00C09240 		.word	1083359232
 1646              		.global	ol_revolution_limit
 1647              		.section	.data.ol_revolution_limit,"aw"
 1648              		.align	2
 1651              	ol_revolution_limit:
 1652 0000 60823B00 		.word	3900000
 1653              		.global	ol_sector_counter
 1654              		.section	.bss.ol_sector_counter,"aw",%nobits
 1655              		.align	2
 1658              	ol_sector_counter:
 1659 0000 00000000 		.space	4
 1660              		.global	rpm_ramp_slope
 1661              		.section	.data.rpm_ramp_slope,"aw"
 1662              		.align	2
 1665              	rpm_ramp_slope:
 1666 0000 CDCCCC3D 		.word	1036831949
 1667              		.global	motor_align_ccr_value
 1668              		.section	.data.motor_align_ccr_value,"aw"
 1669              		.align	1
 1672              	motor_align_ccr_value:
 1673 0000 DC05     		.short	1500
 1674              		.global	align_duration
 1675              		.section	.data.align_duration,"aw"
 1676              		.align	2
 1679              	align_duration:
 1680 0000 03000000 		.word	3
 1681              		.global	motor_align_time_counter
 1682              		.section	.data.motor_align_time_counter,"aw"
 1683              		.align	3
 1686              	motor_align_time_counter:
 1687 0000 00000000 		.word	0
 1688 0004 0000F03F 		.word	1072693248
 1689              		.global	sector_change_interval_counter
 1690              		.section	.bss.sector_change_interval_counter,"aw",%nobits
 1691              		.align	3
 1694              	sector_change_interval_counter:
 1695 0000 00000000 		.space	8
 1695      00000000 
 1696              		.global	sector
 1697              		.section	.bss.sector,"aw",%nobits
 1700              	sector:
 1701 0000 00       		.space	1
 1702              		.global	htim2
 1703              		.section	.bss.htim2,"aw",%nobits
 1704              		.align	2
 1707              	htim2:
 1708 0000 00000000 		.space	72
 1708      00000000 
 1708      00000000 
ARM GAS  /tmp/ccpm2Mw3.s 			page 50


 1708      00000000 
 1708      00000000 
 1709              		.global	htim1
 1710              		.section	.bss.htim1,"aw",%nobits
 1711              		.align	2
 1714              	htim1:
 1715 0000 00000000 		.space	72
 1715      00000000 
 1715      00000000 
 1715      00000000 
 1715      00000000 
 1716              		.global	hcan
 1717              		.section	.bss.hcan,"aw",%nobits
 1718              		.align	2
 1721              	hcan:
 1722 0000 00000000 		.space	40
 1722      00000000 
 1722      00000000 
 1722      00000000 
 1722      00000000 
 1723              		.global	hadc1
 1724              		.section	.bss.hadc1,"aw",%nobits
 1725              		.align	2
 1728              	hadc1:
 1729 0000 00000000 		.space	48
 1729      00000000 
 1729      00000000 
 1729      00000000 
 1729      00000000 
 1730              		.text
 1731              	.Letext0:
 1732              		.file 3 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1733              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1734              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1735              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1736              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1737              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1738              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1739              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1740              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1741              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_can.h"
 1742              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1743              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1744              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 1745              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 1746              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1747              		.file 18 "<built-in>"
ARM GAS  /tmp/ccpm2Mw3.s 			page 51


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccpm2Mw3.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccpm2Mw3.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccpm2Mw3.s:289    .text.MX_GPIO_Init:00000148 $d
     /tmp/ccpm2Mw3.s:301    .text.update_sector_for_open_loop:00000000 $t
     /tmp/ccpm2Mw3.s:307    .text.update_sector_for_open_loop:00000000 update_sector_for_open_loop
     /tmp/ccpm2Mw3.s:322    .text.update_sector_for_open_loop:0000000e $d
     /tmp/ccpm2Mw3.s:328    .text.update_sector_for_open_loop:00000014 $t
     /tmp/ccpm2Mw3.s:443    .text.update_sector_for_open_loop:00000090 $d
     /tmp/ccpm2Mw3.s:1700   .bss.sector:00000000 sector
     /tmp/ccpm2Mw3.s:1612   .data.initial_open_loop_ccr:00000000 initial_open_loop_ccr
     /tmp/ccpm2Mw3.s:450    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/ccpm2Mw3.s:456    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccpm2Mw3.s:680    .text.HAL_TIM_PeriodElapsedCallback:00000130 $d
     /tmp/ccpm2Mw3.s:1591   .bss.ms_counter:00000000 ms_counter
     /tmp/ccpm2Mw3.s:1694   .bss.sector_change_interval_counter:00000000 sector_change_interval_counter
     /tmp/ccpm2Mw3.s:1679   .data.align_duration:00000000 align_duration
     /tmp/ccpm2Mw3.s:1686   .data.motor_align_time_counter:00000000 motor_align_time_counter
     /tmp/ccpm2Mw3.s:1658   .bss.ol_sector_counter:00000000 ol_sector_counter
     /tmp/ccpm2Mw3.s:1619   .data.initial_sector_change_interval:00000000 initial_sector_change_interval
     /tmp/ccpm2Mw3.s:1651   .data.ol_revolution_limit:00000000 ol_revolution_limit
     /tmp/ccpm2Mw3.s:1605   .data.desired_open_loop_ccr:00000000 desired_open_loop_ccr
     /tmp/ccpm2Mw3.s:1598   .data.ccr_ramp_slope:00000000 ccr_ramp_slope
     /tmp/ccpm2Mw3.s:1627   .data.desired_sector_change_interval:00000000 desired_sector_change_interval
     /tmp/ccpm2Mw3.s:1665   .data.rpm_ramp_slope:00000000 rpm_ramp_slope
     /tmp/ccpm2Mw3.s:1672   .data.motor_align_ccr_value:00000000 motor_align_ccr_value
     /tmp/ccpm2Mw3.s:701    .text.HAL_GPIO_EXTI_Callback:00000000 $t
     /tmp/ccpm2Mw3.s:707    .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
     /tmp/ccpm2Mw3.s:777    .text.HAL_GPIO_EXTI_Callback:00000050 $d
     /tmp/ccpm2Mw3.s:1714   .bss.htim1:00000000 htim1
     /tmp/ccpm2Mw3.s:784    .text.Error_Handler:00000000 $t
     /tmp/ccpm2Mw3.s:790    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccpm2Mw3.s:822    .text.MX_ADC1_Init:00000000 $t
     /tmp/ccpm2Mw3.s:827    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/ccpm2Mw3.s:913    .text.MX_ADC1_Init:00000050 $d
     /tmp/ccpm2Mw3.s:1728   .bss.hadc1:00000000 hadc1
     /tmp/ccpm2Mw3.s:919    .text.MX_CAN_Init:00000000 $t
     /tmp/ccpm2Mw3.s:924    .text.MX_CAN_Init:00000000 MX_CAN_Init
     /tmp/ccpm2Mw3.s:989    .text.MX_CAN_Init:00000030 $d
     /tmp/ccpm2Mw3.s:1721   .bss.hcan:00000000 hcan
     /tmp/ccpm2Mw3.s:995    .text.MX_TIM1_Init:00000000 $t
     /tmp/ccpm2Mw3.s:1000   .text.MX_TIM1_Init:00000000 MX_TIM1_Init
     /tmp/ccpm2Mw3.s:1232   .text.MX_TIM1_Init:000000f4 $d
     /tmp/ccpm2Mw3.s:1238   .text.MX_TIM2_Init:00000000 $t
     /tmp/ccpm2Mw3.s:1243   .text.MX_TIM2_Init:00000000 MX_TIM2_Init
     /tmp/ccpm2Mw3.s:1342   .text.MX_TIM2_Init:00000064 $d
     /tmp/ccpm2Mw3.s:1707   .bss.htim2:00000000 htim2
     /tmp/ccpm2Mw3.s:1347   .text.SystemClock_Config:00000000 $t
     /tmp/ccpm2Mw3.s:1353   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccpm2Mw3.s:1483   .text.main:00000000 $t
     /tmp/ccpm2Mw3.s:1489   .text.main:00000000 main
     /tmp/ccpm2Mw3.s:1580   .text.main:0000006c $d
     /tmp/ccpm2Mw3.s:1588   .bss.ms_counter:00000000 $d
     /tmp/ccpm2Mw3.s:1595   .data.ccr_ramp_slope:00000000 $d
     /tmp/ccpm2Mw3.s:1602   .data.desired_open_loop_ccr:00000000 $d
     /tmp/ccpm2Mw3.s:1609   .data.initial_open_loop_ccr:00000000 $d
ARM GAS  /tmp/ccpm2Mw3.s 			page 52


     /tmp/ccpm2Mw3.s:1616   .data.initial_sector_change_interval:00000000 $d
     /tmp/ccpm2Mw3.s:1624   .data.desired_sector_change_interval:00000000 $d
     /tmp/ccpm2Mw3.s:1635   .rodata.open_loop_start_speed_rpm:00000000 open_loop_start_speed_rpm
     /tmp/ccpm2Mw3.s:1632   .rodata.open_loop_start_speed_rpm:00000000 $d
     /tmp/ccpm2Mw3.s:1643   .rodata.open_loop_velocity_rpm:00000000 open_loop_velocity_rpm
     /tmp/ccpm2Mw3.s:1640   .rodata.open_loop_velocity_rpm:00000000 $d
     /tmp/ccpm2Mw3.s:1648   .data.ol_revolution_limit:00000000 $d
     /tmp/ccpm2Mw3.s:1655   .bss.ol_sector_counter:00000000 $d
     /tmp/ccpm2Mw3.s:1662   .data.rpm_ramp_slope:00000000 $d
     /tmp/ccpm2Mw3.s:1669   .data.motor_align_ccr_value:00000000 $d
     /tmp/ccpm2Mw3.s:1676   .data.align_duration:00000000 $d
     /tmp/ccpm2Mw3.s:1683   .data.motor_align_time_counter:00000000 $d
     /tmp/ccpm2Mw3.s:1691   .bss.sector_change_interval_counter:00000000 $d
     /tmp/ccpm2Mw3.s:1701   .bss.sector:00000000 $d
     /tmp/ccpm2Mw3.s:1704   .bss.htim2:00000000 $d
     /tmp/ccpm2Mw3.s:1711   .bss.htim1:00000000 $d
     /tmp/ccpm2Mw3.s:1718   .bss.hcan:00000000 $d
     /tmp/ccpm2Mw3.s:1725   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
__aeabi_f2d
__aeabi_dadd
__aeabi_d2f
__aeabi_ui2d
__aeabi_dcmpge
__aeabi_dcmpgt
__aeabi_dsub
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_CAN_Init
memset
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_TIM_PWM_Start
HAL_TIMEx_PWMN_Start
HAL_TIM_Base_Start_IT
