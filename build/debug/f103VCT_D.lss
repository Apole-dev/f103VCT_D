
build/debug/f103VCT_D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e10  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001ff4  08001ff4  00002ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002018  08002018  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002018  08002018  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002018  08002018  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002018  08002018  00003018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800201c  0800201c  0000301c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002020  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  0800202c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800202c  00004114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .comment      0000001e  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d119  00000000  00000000  00004053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e4a  00000000  00000000  0001116c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00006ffa  00000000  00000000  00012fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bb8  00000000  00000000  00019fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008f2  00000000  00000000  0001ab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b1c2  00000000  00000000  0001b45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003d7f  00000000  00000000  0002661c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001df4  00000000  00000000  0002a39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0002c190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001fdc 	.word	0x08001fdc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001fdc 	.word	0x08001fdc

08000224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	ad06      	add	r5, sp, #24
 800022c:	2400      	movs	r4, #0
 800022e:	9406      	str	r4, [sp, #24]
 8000230:	9407      	str	r4, [sp, #28]
 8000232:	9408      	str	r4, [sp, #32]
 8000234:	9409      	str	r4, [sp, #36]	@ 0x24
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	4b4d      	ldr	r3, [pc, #308]	@ (800036c <MX_GPIO_Init+0x148>)
 8000238:	699a      	ldr	r2, [r3, #24]
 800023a:	f042 0204 	orr.w	r2, r2, #4
 800023e:	619a      	str	r2, [r3, #24]
 8000240:	699a      	ldr	r2, [r3, #24]
 8000242:	f002 0204 	and.w	r2, r2, #4
 8000246:	9201      	str	r2, [sp, #4]
 8000248:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800024a:	699a      	ldr	r2, [r3, #24]
 800024c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000250:	619a      	str	r2, [r3, #24]
 8000252:	699a      	ldr	r2, [r3, #24]
 8000254:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000258:	9202      	str	r2, [sp, #8]
 800025a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025c:	699a      	ldr	r2, [r3, #24]
 800025e:	f042 0208 	orr.w	r2, r2, #8
 8000262:	619a      	str	r2, [r3, #24]
 8000264:	699a      	ldr	r2, [r3, #24]
 8000266:	f002 0208 	and.w	r2, r2, #8
 800026a:	9203      	str	r2, [sp, #12]
 800026c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800026e:	699a      	ldr	r2, [r3, #24]
 8000270:	f042 0220 	orr.w	r2, r2, #32
 8000274:	619a      	str	r2, [r3, #24]
 8000276:	699a      	ldr	r2, [r3, #24]
 8000278:	f002 0220 	and.w	r2, r2, #32
 800027c:	9204      	str	r2, [sp, #16]
 800027e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000280:	699a      	ldr	r2, [r3, #24]
 8000282:	f042 0210 	orr.w	r2, r2, #16
 8000286:	619a      	str	r2, [r3, #24]
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	f003 0310 	and.w	r3, r3, #16
 800028e:	9305      	str	r3, [sp, #20]
 8000290:	9b05      	ldr	r3, [sp, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000292:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8000370 <MX_GPIO_Init+0x14c>
 8000296:	4622      	mov	r2, r4
 8000298:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800029c:	4650      	mov	r0, sl
 800029e:	f000 fdd1 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80002a2:	4f34      	ldr	r7, [pc, #208]	@ (8000374 <MX_GPIO_Init+0x150>)
 80002a4:	4622      	mov	r2, r4
 80002a6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80002aa:	4638      	mov	r0, r7
 80002ac:	f000 fdca 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80002b0:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 80002b4:	9306      	str	r3, [sp, #24]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // TIM1 pinleri (Full remap)
 80002b6:	f04f 0802 	mov.w	r8, #2
 80002ba:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; // HIZLI PWM
 80002be:	f04f 0903 	mov.w	r9, #3
 80002c2:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002c6:	4629      	mov	r1, r5
 80002c8:	482b      	ldr	r0, [pc, #172]	@ (8000378 <MX_GPIO_Init+0x154>)
 80002ca:	f000 fca3 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80002ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80002d2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d4:	2601      	movs	r6, #1
 80002d6:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002da:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002de:	4629      	mov	r1, r5
 80002e0:	4650      	mov	r0, sl
 80002e2:	f000 fc97 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80002e6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80002ea:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ec:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f0:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80002f4:	4629      	mov	r1, r5
 80002f6:	4638      	mov	r0, r7
 80002f8:	f000 fc8c 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80002fc:	2340      	movs	r3, #64	@ 0x40
 80002fe:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000300:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000304:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 800037c <MX_GPIO_Init+0x158>
 8000308:	4629      	mov	r1, r5
 800030a:	4640      	mov	r0, r8
 800030c:	f000 fc82 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000310:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000314:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000316:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000318:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031a:	4629      	mov	r1, r5
 800031c:	4818      	ldr	r0, [pc, #96]	@ (8000380 <MX_GPIO_Init+0x15c>)
 800031e:	f000 fc79 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 (ALM PINLERI) */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000322:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000326:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; // Active-Low, dusen kenarda kesme
 8000328:	4b16      	ldr	r3, [pc, #88]	@ (8000384 <MX_GPIO_Init+0x160>)
 800032a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP; // Pull-up'li giris
 800032c:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800032e:	4629      	mov	r1, r5
 8000330:	4640      	mov	r0, r8
 8000332:	f000 fc6f 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD3 PD4 (HALL SENSOR PINLERI) */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000336:	231c      	movs	r3, #28
 8000338:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800033a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // Harici pull-up varsa
 800033c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800033e:	4629      	mov	r1, r5
 8000340:	4638      	mov	r0, r7
 8000342:	f000 fc67 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_TIM1_ENABLE(); // TIM1 pinlerini PE'ye yonlendir
 8000346:	4a10      	ldr	r2, [pc, #64]	@ (8000388 <MX_GPIO_Init+0x164>)
 8000348:	6853      	ldr	r3, [r2, #4]
 800034a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800034e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000352:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  // ALM pinleri (PC10-12) icin EXTI15_10 hattini etkinlestir
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000354:	4622      	mov	r2, r4
 8000356:	4621      	mov	r1, r4
 8000358:	2028      	movs	r0, #40	@ 0x28
 800035a:	f000 fc29 	bl	8000bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800035e:	2028      	movs	r0, #40	@ 0x28
 8000360:	f000 fc36 	bl	8000bd0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000364:	b00a      	add	sp, #40	@ 0x28
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000
 8000370:	40010c00 	.word	0x40010c00
 8000374:	40011400 	.word	0x40011400
 8000378:	40011800 	.word	0x40011800
 800037c:	40011000 	.word	0x40011000
 8000380:	40010800 	.word	0x40010800
 8000384:	10210000 	.word	0x10210000
 8000388:	40010000 	.word	0x40010000

0800038c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800038e:	e7fe      	b.n	800038e <Error_Handler+0x2>

08000390 <MX_ADC1_Init>:
{
 8000390:	b500      	push	{lr}
 8000392:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000394:	2300      	movs	r3, #0
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	9302      	str	r3, [sp, #8]
 800039a:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800039c:	4810      	ldr	r0, [pc, #64]	@ (80003e0 <MX_ADC1_Init+0x50>)
 800039e:	4a11      	ldr	r2, [pc, #68]	@ (80003e4 <MX_ADC1_Init+0x54>)
 80003a0:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003a2:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003a4:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a6:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003ac:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ae:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b4:	f000 fa7c 	bl	80008b0 <HAL_ADC_Init>
 80003b8:	b968      	cbnz	r0, 80003d6 <MX_ADC1_Init+0x46>
  sConfig.Channel = ADC_CHANNEL_2;
 80003ba:	2302      	movs	r3, #2
 80003bc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003be:	2301      	movs	r3, #1
 80003c0:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003c2:	2300      	movs	r3, #0
 80003c4:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c6:	a901      	add	r1, sp, #4
 80003c8:	4805      	ldr	r0, [pc, #20]	@ (80003e0 <MX_ADC1_Init+0x50>)
 80003ca:	f000 f9a5 	bl	8000718 <HAL_ADC_ConfigChannel>
 80003ce:	b920      	cbnz	r0, 80003da <MX_ADC1_Init+0x4a>
}
 80003d0:	b005      	add	sp, #20
 80003d2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80003d6:	f7ff ffd9 	bl	800038c <Error_Handler>
    Error_Handler();
 80003da:	f7ff ffd7 	bl	800038c <Error_Handler>
 80003de:	bf00      	nop
 80003e0:	200000e0 	.word	0x200000e0
 80003e4:	40012400 	.word	0x40012400

080003e8 <MX_CAN_Init>:
{
 80003e8:	b508      	push	{r3, lr}
  hcan.Instance = CAN1;
 80003ea:	480b      	ldr	r0, [pc, #44]	@ (8000418 <MX_CAN_Init+0x30>)
 80003ec:	4b0b      	ldr	r3, [pc, #44]	@ (800041c <MX_CAN_Init+0x34>)
 80003ee:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 16;
 80003f0:	2310      	movs	r3, #16
 80003f2:	6043      	str	r3, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003f4:	2300      	movs	r3, #0
 80003f6:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003f8:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80003fa:	6103      	str	r3, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003fc:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003fe:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000400:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000402:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000404:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000406:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000408:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800040a:	f000 fae5 	bl	80009d8 <HAL_CAN_Init>
 800040e:	b900      	cbnz	r0, 8000412 <MX_CAN_Init+0x2a>
}
 8000410:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000412:	f7ff ffbb 	bl	800038c <Error_Handler>
 8000416:	bf00      	nop
 8000418:	200000b8 	.word	0x200000b8
 800041c:	40006400 	.word	0x40006400

08000420 <MX_TIM1_Init>:
{
 8000420:	b510      	push	{r4, lr}
 8000422:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000424:	2400      	movs	r4, #0
 8000426:	9412      	str	r4, [sp, #72]	@ 0x48
 8000428:	9413      	str	r4, [sp, #76]	@ 0x4c
 800042a:	9414      	str	r4, [sp, #80]	@ 0x50
 800042c:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042e:	9410      	str	r4, [sp, #64]	@ 0x40
 8000430:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000432:	9409      	str	r4, [sp, #36]	@ 0x24
 8000434:	940a      	str	r4, [sp, #40]	@ 0x28
 8000436:	940b      	str	r4, [sp, #44]	@ 0x2c
 8000438:	940c      	str	r4, [sp, #48]	@ 0x30
 800043a:	940d      	str	r4, [sp, #52]	@ 0x34
 800043c:	940e      	str	r4, [sp, #56]	@ 0x38
 800043e:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000440:	2220      	movs	r2, #32
 8000442:	4621      	mov	r1, r4
 8000444:	a801      	add	r0, sp, #4
 8000446:	f001 fd9c 	bl	8001f82 <memset>
  htim1.Instance = TIM1;
 800044a:	4832      	ldr	r0, [pc, #200]	@ (8000514 <MX_TIM1_Init+0xf4>)
 800044c:	4b32      	ldr	r3, [pc, #200]	@ (8000518 <MX_TIM1_Init+0xf8>)
 800044e:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 44;
 8000450:	232c      	movs	r3, #44	@ 0x2c
 8000452:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000454:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 99;
 8000456:	2363      	movs	r3, #99	@ 0x63
 8000458:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0; // Her periyotta update event
 800045c:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045e:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000460:	f001 fa68 	bl	8001934 <HAL_TIM_Base_Init>
 8000464:	2800      	cmp	r0, #0
 8000466:	d144      	bne.n	80004f2 <MX_TIM1_Init+0xd2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800046c:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800046e:	a912      	add	r1, sp, #72	@ 0x48
 8000470:	4828      	ldr	r0, [pc, #160]	@ (8000514 <MX_TIM1_Init+0xf4>)
 8000472:	f001 fb69 	bl	8001b48 <HAL_TIM_ConfigClockSource>
 8000476:	2800      	cmp	r0, #0
 8000478:	d13d      	bne.n	80004f6 <MX_TIM1_Init+0xd6>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800047a:	4826      	ldr	r0, [pc, #152]	@ (8000514 <MX_TIM1_Init+0xf4>)
 800047c:	f001 fa86 	bl	800198c <HAL_TIM_PWM_Init>
 8000480:	2800      	cmp	r0, #0
 8000482:	d13a      	bne.n	80004fa <MX_TIM1_Init+0xda>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000488:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800048a:	a910      	add	r1, sp, #64	@ 0x40
 800048c:	4821      	ldr	r0, [pc, #132]	@ (8000514 <MX_TIM1_Init+0xf4>)
 800048e:	f001 fcdf 	bl	8001e50 <HAL_TIMEx_MasterConfigSynchronization>
 8000492:	2800      	cmp	r0, #0
 8000494:	d133      	bne.n	80004fe <MX_TIM1_Init+0xde>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000496:	2360      	movs	r3, #96	@ 0x60
 8000498:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0; // Baslangicta %0 duty
 800049a:	2200      	movs	r2, #0
 800049c:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800049e:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH; // Complementary pin de HIGH
 80004a0:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004a2:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004a4:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004a6:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004a8:	a909      	add	r1, sp, #36	@ 0x24
 80004aa:	481a      	ldr	r0, [pc, #104]	@ (8000514 <MX_TIM1_Init+0xf4>)
 80004ac:	f001 fad2 	bl	8001a54 <HAL_TIM_PWM_ConfigChannel>
 80004b0:	bb38      	cbnz	r0, 8000502 <MX_TIM1_Init+0xe2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004b2:	2204      	movs	r2, #4
 80004b4:	a909      	add	r1, sp, #36	@ 0x24
 80004b6:	4817      	ldr	r0, [pc, #92]	@ (8000514 <MX_TIM1_Init+0xf4>)
 80004b8:	f001 facc 	bl	8001a54 <HAL_TIM_PWM_ConfigChannel>
 80004bc:	bb18      	cbnz	r0, 8000506 <MX_TIM1_Init+0xe6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004be:	2208      	movs	r2, #8
 80004c0:	a909      	add	r1, sp, #36	@ 0x24
 80004c2:	4814      	ldr	r0, [pc, #80]	@ (8000514 <MX_TIM1_Init+0xf4>)
 80004c4:	f001 fac6 	bl	8001a54 <HAL_TIM_PWM_ConfigChannel>
 80004c8:	b9f8      	cbnz	r0, 800050a <MX_TIM1_Init+0xea>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004ce:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004d0:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 181; 
 80004d2:	22b5      	movs	r2, #181	@ 0xb5
 80004d4:	9204      	str	r2, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE; // ALM pinleri icin Break aktif
 80004d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80004da:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW; // ALM pinleri active-low
 80004dc:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE; // Break'ten sonra otomatik kurtarma
 80004de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80004e2:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004e4:	a901      	add	r1, sp, #4
 80004e6:	480b      	ldr	r0, [pc, #44]	@ (8000514 <MX_TIM1_Init+0xf4>)
 80004e8:	f001 fcf0 	bl	8001ecc <HAL_TIMEx_ConfigBreakDeadTime>
 80004ec:	b978      	cbnz	r0, 800050e <MX_TIM1_Init+0xee>
}
 80004ee:	b016      	add	sp, #88	@ 0x58
 80004f0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80004f2:	f7ff ff4b 	bl	800038c <Error_Handler>
    Error_Handler();
 80004f6:	f7ff ff49 	bl	800038c <Error_Handler>
    Error_Handler();
 80004fa:	f7ff ff47 	bl	800038c <Error_Handler>
    Error_Handler();
 80004fe:	f7ff ff45 	bl	800038c <Error_Handler>
    Error_Handler();
 8000502:	f7ff ff43 	bl	800038c <Error_Handler>
    Error_Handler();
 8000506:	f7ff ff41 	bl	800038c <Error_Handler>
    Error_Handler();
 800050a:	f7ff ff3f 	bl	800038c <Error_Handler>
    Error_Handler();
 800050e:	f7ff ff3d 	bl	800038c <Error_Handler>
 8000512:	bf00      	nop
 8000514:	20000070 	.word	0x20000070
 8000518:	40012c00 	.word	0x40012c00

0800051c <MX_TIM2_Init>:
{
 800051c:	b500      	push	{lr}
 800051e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000520:	2300      	movs	r3, #0
 8000522:	9302      	str	r3, [sp, #8]
 8000524:	9303      	str	r3, [sp, #12]
 8000526:	9304      	str	r3, [sp, #16]
 8000528:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 800052e:	4814      	ldr	r0, [pc, #80]	@ (8000580 <MX_TIM2_Init+0x64>)
 8000530:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000534:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 719;
 8000536:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800053a:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 9;
 800053e:	2209      	movs	r2, #9
 8000540:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000542:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000544:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000546:	f001 f9f5 	bl	8001934 <HAL_TIM_Base_Init>
 800054a:	b990      	cbnz	r0, 8000572 <MX_TIM2_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800054c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000550:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000552:	a902      	add	r1, sp, #8
 8000554:	480a      	ldr	r0, [pc, #40]	@ (8000580 <MX_TIM2_Init+0x64>)
 8000556:	f001 faf7 	bl	8001b48 <HAL_TIM_ConfigClockSource>
 800055a:	b960      	cbnz	r0, 8000576 <MX_TIM2_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055c:	2300      	movs	r3, #0
 800055e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000560:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000562:	4669      	mov	r1, sp
 8000564:	4806      	ldr	r0, [pc, #24]	@ (8000580 <MX_TIM2_Init+0x64>)
 8000566:	f001 fc73 	bl	8001e50 <HAL_TIMEx_MasterConfigSynchronization>
 800056a:	b930      	cbnz	r0, 800057a <MX_TIM2_Init+0x5e>
}
 800056c:	b007      	add	sp, #28
 800056e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000572:	f7ff ff0b 	bl	800038c <Error_Handler>
    Error_Handler();
 8000576:	f7ff ff09 	bl	800038c <Error_Handler>
    Error_Handler();
 800057a:	f7ff ff07 	bl	800038c <Error_Handler>
 800057e:	bf00      	nop
 8000580:	20000028 	.word	0x20000028

08000584 <SystemClock_Config>:
{
 8000584:	b510      	push	{r4, lr}
 8000586:	b096      	sub	sp, #88	@ 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000588:	ac0c      	add	r4, sp, #48	@ 0x30
 800058a:	2228      	movs	r2, #40	@ 0x28
 800058c:	2100      	movs	r1, #0
 800058e:	4620      	mov	r0, r4
 8000590:	f001 fcf7 	bl	8001f82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	2300      	movs	r3, #0
 8000596:	9307      	str	r3, [sp, #28]
 8000598:	9308      	str	r3, [sp, #32]
 800059a:	9309      	str	r3, [sp, #36]	@ 0x24
 800059c:	930a      	str	r3, [sp, #40]	@ 0x28
 800059e:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	9302      	str	r3, [sp, #8]
 80005a4:	9303      	str	r3, [sp, #12]
 80005a6:	9304      	str	r3, [sp, #16]
 80005a8:	9305      	str	r3, [sp, #20]
 80005aa:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2201      	movs	r2, #1
 80005ae:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b4:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b6:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b8:	2202      	movs	r2, #2
 80005ba:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005bc:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005be:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005c2:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	4620      	mov	r0, r4
 80005c6:	f000 fceb 	bl	8000fa0 <HAL_RCC_OscConfig>
 80005ca:	b9c0      	cbnz	r0, 80005fe <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2102      	movs	r1, #2
 80005d2:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005dc:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e0:	a807      	add	r0, sp, #28
 80005e2:	f000 ff0f 	bl	8001404 <HAL_RCC_ClockConfig>
 80005e6:	b960      	cbnz	r0, 8000602 <SystemClock_Config+0x7e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005e8:	2302      	movs	r3, #2
 80005ea:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005f0:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f2:	a801      	add	r0, sp, #4
 80005f4:	f000 ffbc 	bl	8001570 <HAL_RCCEx_PeriphCLKConfig>
 80005f8:	b928      	cbnz	r0, 8000606 <SystemClock_Config+0x82>
}
 80005fa:	b016      	add	sp, #88	@ 0x58
 80005fc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80005fe:	f7ff fec5 	bl	800038c <Error_Handler>
    Error_Handler();
 8000602:	f7ff fec3 	bl	800038c <Error_Handler>
    Error_Handler();
 8000606:	f7ff fec1 	bl	800038c <Error_Handler>
	...

0800060c <main>:
{
 800060c:	b508      	push	{r3, lr}
  HAL_Init();
 800060e:	f000 f85f 	bl	80006d0 <HAL_Init>
  SystemClock_Config();
 8000612:	f7ff ffb7 	bl	8000584 <SystemClock_Config>
  MX_GPIO_Init();
 8000616:	f7ff fe05 	bl	8000224 <MX_GPIO_Init>
  MX_ADC1_Init();
 800061a:	f7ff feb9 	bl	8000390 <MX_ADC1_Init>
  MX_CAN_Init();
 800061e:	f7ff fee3 	bl	80003e8 <MX_CAN_Init>
  MX_TIM1_Init(); // YENI
 8000622:	f7ff fefd 	bl	8000420 <MX_TIM1_Init>
  MX_TIM2_Init(); // YENI
 8000626:	f7ff ff79 	bl	800051c <MX_TIM2_Init>
  TIM1->CCR1 = 0;
 800062a:	4b13      	ldr	r3, [pc, #76]	@ (8000678 <main+0x6c>)
 800062c:	2500      	movs	r5, #0
 800062e:	635d      	str	r5, [r3, #52]	@ 0x34
  TIM1->CCR2 = 0;
 8000630:	639d      	str	r5, [r3, #56]	@ 0x38
  TIM1->CCR3 = 0;
 8000632:	63dd      	str	r5, [r3, #60]	@ 0x3c
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000634:	4c11      	ldr	r4, [pc, #68]	@ (800067c <main+0x70>)
 8000636:	4629      	mov	r1, r5
 8000638:	4620      	mov	r0, r4
 800063a:	f001 fb13 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800063e:	4629      	mov	r1, r5
 8000640:	4620      	mov	r0, r4
 8000642:	f001 fb95 	bl	8001d70 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000646:	2104      	movs	r1, #4
 8000648:	4620      	mov	r0, r4
 800064a:	f001 fb0b 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800064e:	2104      	movs	r1, #4
 8000650:	4620      	mov	r0, r4
 8000652:	f001 fb8d 	bl	8001d70 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000656:	2108      	movs	r1, #8
 8000658:	4620      	mov	r0, r4
 800065a:	f001 fb03 	bl	8001c64 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800065e:	2108      	movs	r1, #8
 8000660:	4620      	mov	r0, r4
 8000662:	f001 fb85 	bl	8001d70 <HAL_TIMEx_PWMN_Start>
  __HAL_TIM_MOE_ENABLE(&htim1);
 8000666:	6822      	ldr	r2, [r4, #0]
 8000668:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 800066a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800066e:	6453      	str	r3, [r2, #68]	@ 0x44
  HAL_TIM_Base_Start_IT(&htim2);
 8000670:	4803      	ldr	r0, [pc, #12]	@ (8000680 <main+0x74>)
 8000672:	f001 f8cf 	bl	8001814 <HAL_TIM_Base_Start_IT>
  while (1)
 8000676:	e7fe      	b.n	8000676 <main+0x6a>
 8000678:	40012c00 	.word	0x40012c00
 800067c:	20000070 	.word	0x20000070
 8000680:	20000028 	.word	0x20000028

08000684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b510      	push	{r4, lr}
 8000686:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <HAL_InitTick+0x40>)
 800068a:	781a      	ldrb	r2, [r3, #0]
 800068c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000690:	fbb3 f3f2 	udiv	r3, r3, r2
 8000694:	4a0c      	ldr	r2, [pc, #48]	@ (80006c8 <HAL_InitTick+0x44>)
 8000696:	6810      	ldr	r0, [r2, #0]
 8000698:	fbb0 f0f3 	udiv	r0, r0, r3
 800069c:	f000 faa6 	bl	8000bec <HAL_SYSTICK_Config>
 80006a0:	b968      	cbnz	r0, 80006be <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a2:	2c0f      	cmp	r4, #15
 80006a4:	d901      	bls.n	80006aa <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80006a6:	2001      	movs	r0, #1
 80006a8:	e00a      	b.n	80006c0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006aa:	2200      	movs	r2, #0
 80006ac:	4621      	mov	r1, r4
 80006ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006b2:	f000 fa7d 	bl	8000bb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b6:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <HAL_InitTick+0x48>)
 80006b8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80006ba:	2000      	movs	r0, #0
 80006bc:	e000      	b.n	80006c0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80006be:	2001      	movs	r0, #1
}
 80006c0:	bd10      	pop	{r4, pc}
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000008 	.word	0x20000008
 80006cc:	20000004 	.word	0x20000004

080006d0 <HAL_Init>:
{
 80006d0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d2:	4a07      	ldr	r2, [pc, #28]	@ (80006f0 <HAL_Init+0x20>)
 80006d4:	6813      	ldr	r3, [r2, #0]
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006dc:	2003      	movs	r0, #3
 80006de:	f000 fa55 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e2:	200f      	movs	r0, #15
 80006e4:	f7ff ffce 	bl	8000684 <HAL_InitTick>
  HAL_MspInit();
 80006e8:	f000 fbb2 	bl	8000e50 <HAL_MspInit>
}
 80006ec:	2000      	movs	r0, #0
 80006ee:	bd08      	pop	{r3, pc}
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006f4:	4a03      	ldr	r2, [pc, #12]	@ (8000704 <HAL_IncTick+0x10>)
 80006f6:	6811      	ldr	r1, [r2, #0]
 80006f8:	4b03      	ldr	r3, [pc, #12]	@ (8000708 <HAL_IncTick+0x14>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	440b      	add	r3, r1
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000110 	.word	0x20000110
 8000708:	20000000 	.word	0x20000000

0800070c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800070c:	4b01      	ldr	r3, [pc, #4]	@ (8000714 <HAL_GetTick+0x8>)
 800070e:	6818      	ldr	r0, [r3, #0]
}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000110 	.word	0x20000110

08000718 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000718:	b430      	push	{r4, r5}
 800071a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800071c:	2200      	movs	r2, #0
 800071e:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000720:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8000724:	2a01      	cmp	r2, #1
 8000726:	f000 808f 	beq.w	8000848 <HAL_ADC_ConfigChannel+0x130>
 800072a:	4603      	mov	r3, r0
 800072c:	2201      	movs	r2, #1
 800072e:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000732:	684a      	ldr	r2, [r1, #4]
 8000734:	2a06      	cmp	r2, #6
 8000736:	d82d      	bhi.n	8000794 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000738:	6804      	ldr	r4, [r0, #0]
 800073a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800073c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000740:	3a05      	subs	r2, #5
 8000742:	f04f 0c1f 	mov.w	ip, #31
 8000746:	fa0c fc02 	lsl.w	ip, ip, r2
 800074a:	ea20 000c 	bic.w	r0, r0, ip
 800074e:	680d      	ldr	r5, [r1, #0]
 8000750:	fa05 f202 	lsl.w	r2, r5, r2
 8000754:	4302      	orrs	r2, r0
 8000756:	6362      	str	r2, [r4, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000758:	680a      	ldr	r2, [r1, #0]
 800075a:	2a09      	cmp	r2, #9
 800075c:	d938      	bls.n	80007d0 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800075e:	681c      	ldr	r4, [r3, #0]
 8000760:	68e0      	ldr	r0, [r4, #12]
 8000762:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000766:	3a1e      	subs	r2, #30
 8000768:	f04f 0c07 	mov.w	ip, #7
 800076c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000770:	ea20 000c 	bic.w	r0, r0, ip
 8000774:	688d      	ldr	r5, [r1, #8]
 8000776:	fa05 f202 	lsl.w	r2, r5, r2
 800077a:	4302      	orrs	r2, r0
 800077c:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800077e:	680a      	ldr	r2, [r1, #0]
 8000780:	3a10      	subs	r2, #16
 8000782:	2a01      	cmp	r2, #1
 8000784:	d934      	bls.n	80007f0 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000786:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800078e:	b002      	add	sp, #8
 8000790:	bc30      	pop	{r4, r5}
 8000792:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8000794:	2a0c      	cmp	r2, #12
 8000796:	d80d      	bhi.n	80007b4 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000798:	6805      	ldr	r5, [r0, #0]
 800079a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800079c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80007a0:	3a23      	subs	r2, #35	@ 0x23
 80007a2:	241f      	movs	r4, #31
 80007a4:	4094      	lsls	r4, r2
 80007a6:	ea20 0004 	bic.w	r0, r0, r4
 80007aa:	680c      	ldr	r4, [r1, #0]
 80007ac:	4094      	lsls	r4, r2
 80007ae:	4320      	orrs	r0, r4
 80007b0:	6328      	str	r0, [r5, #48]	@ 0x30
 80007b2:	e7d1      	b.n	8000758 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80007b4:	6805      	ldr	r5, [r0, #0]
 80007b6:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80007b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80007bc:	3a41      	subs	r2, #65	@ 0x41
 80007be:	241f      	movs	r4, #31
 80007c0:	4094      	lsls	r4, r2
 80007c2:	ea20 0004 	bic.w	r0, r0, r4
 80007c6:	680c      	ldr	r4, [r1, #0]
 80007c8:	4094      	lsls	r4, r2
 80007ca:	4320      	orrs	r0, r4
 80007cc:	62e8      	str	r0, [r5, #44]	@ 0x2c
 80007ce:	e7c3      	b.n	8000758 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80007d0:	681c      	ldr	r4, [r3, #0]
 80007d2:	6920      	ldr	r0, [r4, #16]
 80007d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80007d8:	f04f 0c07 	mov.w	ip, #7
 80007dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007e0:	ea20 000c 	bic.w	r0, r0, ip
 80007e4:	688d      	ldr	r5, [r1, #8]
 80007e6:	fa05 f202 	lsl.w	r2, r5, r2
 80007ea:	4302      	orrs	r2, r0
 80007ec:	6122      	str	r2, [r4, #16]
 80007ee:	e7c6      	b.n	800077e <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4816      	ldr	r0, [pc, #88]	@ (800084c <HAL_ADC_ConfigChannel+0x134>)
 80007f4:	4282      	cmp	r2, r0
 80007f6:	d005      	beq.n	8000804 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80007fa:	f042 0220 	orr.w	r2, r2, #32
 80007fe:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8000800:	2001      	movs	r0, #1
 8000802:	e7c1      	b.n	8000788 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000804:	6890      	ldr	r0, [r2, #8]
 8000806:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 800080a:	d11b      	bne.n	8000844 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800080c:	6890      	ldr	r0, [r2, #8]
 800080e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000812:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000814:	680a      	ldr	r2, [r1, #0]
 8000816:	2a10      	cmp	r2, #16
 8000818:	d001      	beq.n	800081e <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800081a:	2000      	movs	r0, #0
 800081c:	e7b4      	b.n	8000788 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800081e:	4a0c      	ldr	r2, [pc, #48]	@ (8000850 <HAL_ADC_ConfigChannel+0x138>)
 8000820:	6812      	ldr	r2, [r2, #0]
 8000822:	490c      	ldr	r1, [pc, #48]	@ (8000854 <HAL_ADC_ConfigChannel+0x13c>)
 8000824:	fba1 1202 	umull	r1, r2, r1, r2
 8000828:	0c92      	lsrs	r2, r2, #18
 800082a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8000832:	e002      	b.n	800083a <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8000834:	9a01      	ldr	r2, [sp, #4]
 8000836:	3a01      	subs	r2, #1
 8000838:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800083a:	9a01      	ldr	r2, [sp, #4]
 800083c:	2a00      	cmp	r2, #0
 800083e:	d1f9      	bne.n	8000834 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000840:	2000      	movs	r0, #0
 8000842:	e7a1      	b.n	8000788 <HAL_ADC_ConfigChannel+0x70>
 8000844:	2000      	movs	r0, #0
 8000846:	e79f      	b.n	8000788 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8000848:	2002      	movs	r0, #2
 800084a:	e7a0      	b.n	800078e <HAL_ADC_ConfigChannel+0x76>
 800084c:	40012400 	.word	0x40012400
 8000850:	20000008 	.word	0x20000008
 8000854:	431bde83 	.word	0x431bde83

08000858 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000858:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800085a:	6803      	ldr	r3, [r0, #0]
 800085c:	689a      	ldr	r2, [r3, #8]
 800085e:	f012 0f01 	tst.w	r2, #1
 8000862:	d101      	bne.n	8000868 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000864:	2000      	movs	r0, #0
}
 8000866:	bd38      	pop	{r3, r4, r5, pc}
 8000868:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800086a:	689a      	ldr	r2, [r3, #8]
 800086c:	f022 0201 	bic.w	r2, r2, #1
 8000870:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000872:	f7ff ff4b 	bl	800070c <HAL_GetTick>
 8000876:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000878:	6823      	ldr	r3, [r4, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f013 0f01 	tst.w	r3, #1
 8000880:	d013      	beq.n	80008aa <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000882:	f7ff ff43 	bl	800070c <HAL_GetTick>
 8000886:	1b43      	subs	r3, r0, r5
 8000888:	2b02      	cmp	r3, #2
 800088a:	d9f5      	bls.n	8000878 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f013 0f01 	tst.w	r3, #1
 8000894:	d0f0      	beq.n	8000878 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000896:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800089e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80008a6:	2001      	movs	r0, #1
 80008a8:	e7dd      	b.n	8000866 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80008aa:	2000      	movs	r0, #0
 80008ac:	e7db      	b.n	8000866 <ADC_ConversionStop_Disable+0xe>
	...

080008b0 <HAL_ADC_Init>:
  if(hadc == NULL)
 80008b0:	2800      	cmp	r0, #0
 80008b2:	f000 8088 	beq.w	80009c6 <HAL_ADC_Init+0x116>
{
 80008b6:	b570      	push	{r4, r5, r6, lr}
 80008b8:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008ba:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d052      	beq.n	8000966 <HAL_ADC_Init+0xb6>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008c0:	4620      	mov	r0, r4
 80008c2:	f7ff ffc9 	bl	8000858 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80008c8:	f013 0310 	ands.w	r3, r3, #16
 80008cc:	d175      	bne.n	80009ba <HAL_ADC_Init+0x10a>
 80008ce:	2800      	cmp	r0, #0
 80008d0:	d173      	bne.n	80009ba <HAL_ADC_Init+0x10a>
    ADC_STATE_CLR_SET(hadc->State,
 80008d2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80008d4:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80008d8:	f022 0202 	bic.w	r2, r2, #2
 80008dc:	f042 0202 	orr.w	r2, r2, #2
 80008e0:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008e2:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008e4:	6826      	ldr	r6, [r4, #0]
 80008e6:	4939      	ldr	r1, [pc, #228]	@ (80009cc <HAL_ADC_Init+0x11c>)
 80008e8:	428e      	cmp	r6, r1
 80008ea:	d042      	beq.n	8000972 <HAL_ADC_Init+0xc2>
 80008ec:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008ee:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008f0:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008f2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008f6:	68a5      	ldr	r5, [r4, #8]
 80008f8:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80008fc:	d002      	beq.n	8000904 <HAL_ADC_Init+0x54>
 80008fe:	2d01      	cmp	r5, #1
 8000900:	d03e      	beq.n	8000980 <HAL_ADC_Init+0xd0>
 8000902:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000904:	f894 c014 	ldrb.w	ip, [r4, #20]
 8000908:	f1bc 0f01 	cmp.w	ip, #1
 800090c:	d03b      	beq.n	8000986 <HAL_ADC_Init+0xd6>
      MODIFY_REG(hadc->Instance->CR1,
 800090e:	6871      	ldr	r1, [r6, #4]
 8000910:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8000914:	4329      	orrs	r1, r5
 8000916:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000918:	6825      	ldr	r5, [r4, #0]
 800091a:	68ae      	ldr	r6, [r5, #8]
 800091c:	492c      	ldr	r1, [pc, #176]	@ (80009d0 <HAL_ADC_Init+0x120>)
 800091e:	4031      	ands	r1, r6
 8000920:	4311      	orrs	r1, r2
 8000922:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000924:	68a1      	ldr	r1, [r4, #8]
 8000926:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800092a:	d001      	beq.n	8000930 <HAL_ADC_Init+0x80>
 800092c:	2901      	cmp	r1, #1
 800092e:	d102      	bne.n	8000936 <HAL_ADC_Init+0x86>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000930:	6923      	ldr	r3, [r4, #16]
 8000932:	3b01      	subs	r3, #1
 8000934:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000936:	6825      	ldr	r5, [r4, #0]
 8000938:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800093a:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 800093e:	430b      	orrs	r3, r1
 8000940:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000942:	6823      	ldr	r3, [r4, #0]
 8000944:	6899      	ldr	r1, [r3, #8]
 8000946:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <HAL_ADC_Init+0x124>)
 8000948:	400b      	ands	r3, r1
 800094a:	429a      	cmp	r2, r3
 800094c:	d02c      	beq.n	80009a8 <HAL_ADC_Init+0xf8>
      ADC_STATE_CLR_SET(hadc->State,
 800094e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000950:	f023 0312 	bic.w	r3, r3, #18
 8000954:	f043 0310 	orr.w	r3, r3, #16
 8000958:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800095a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8000962:	2001      	movs	r0, #1
 8000964:	e02e      	b.n	80009c4 <HAL_ADC_Init+0x114>
    ADC_CLEAR_ERRORCODE(hadc);
 8000966:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000968:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 800096c:	f000 fa92 	bl	8000e94 <HAL_ADC_MspInit>
 8000970:	e7a6      	b.n	80008c0 <HAL_ADC_Init+0x10>
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000972:	69e1      	ldr	r1, [r4, #28]
 8000974:	f5b1 2f40 	cmp.w	r1, #786432	@ 0xc0000
 8000978:	d1b9      	bne.n	80008ee <HAL_ADC_Init+0x3e>
 800097a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800097e:	e7b6      	b.n	80008ee <HAL_ADC_Init+0x3e>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000980:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8000984:	e7be      	b.n	8000904 <HAL_ADC_Init+0x54>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000986:	b931      	cbnz	r1, 8000996 <HAL_ADC_Init+0xe6>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000988:	69a1      	ldr	r1, [r4, #24]
 800098a:	3901      	subs	r1, #1
 800098c:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8000990:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8000994:	e7bb      	b.n	800090e <HAL_ADC_Init+0x5e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000996:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000998:	f041 0120 	orr.w	r1, r1, #32
 800099c:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800099e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80009a0:	f041 0101 	orr.w	r1, r1, #1
 80009a4:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80009a6:	e7b2      	b.n	800090e <HAL_ADC_Init+0x5e>
      ADC_CLEAR_ERRORCODE(hadc);
 80009a8:	2300      	movs	r3, #0
 80009aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80009ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80009ae:	f023 0303 	bic.w	r3, r3, #3
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80009b8:	e004      	b.n	80009c4 <HAL_ADC_Init+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
}
 80009c4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80009c6:	2001      	movs	r0, #1
}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40013c00 	.word	0x40013c00
 80009d0:	ffe1f7fd 	.word	0xffe1f7fd
 80009d4:	ff1f0efe 	.word	0xff1f0efe

080009d8 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009d8:	2800      	cmp	r0, #0
 80009da:	f000 80a1 	beq.w	8000b20 <HAL_CAN_Init+0x148>
{
 80009de:	b538      	push	{r3, r4, r5, lr}
 80009e0:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009e2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80009e6:	b1d3      	cbz	r3, 8000a1e <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009e8:	6822      	ldr	r2, [r4, #0]
 80009ea:	6813      	ldr	r3, [r2, #0]
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009f2:	f7ff fe8b 	bl	800070c <HAL_GetTick>
 80009f6:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009f8:	6823      	ldr	r3, [r4, #0]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	f012 0f01 	tst.w	r2, #1
 8000a00:	d110      	bne.n	8000a24 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a02:	f7ff fe83 	bl	800070c <HAL_GetTick>
 8000a06:	1b40      	subs	r0, r0, r5
 8000a08:	280a      	cmp	r0, #10
 8000a0a:	d9f5      	bls.n	80009f8 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a12:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a14:	2305      	movs	r3, #5
 8000a16:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000a1a:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000a1c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8000a1e:	f000 fa69 	bl	8000ef4 <HAL_CAN_MspInit>
 8000a22:	e7e1      	b.n	80009e8 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	f022 0202 	bic.w	r2, r2, #2
 8000a2a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000a2c:	f7ff fe6e 	bl	800070c <HAL_GetTick>
 8000a30:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a32:	6823      	ldr	r3, [r4, #0]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	f012 0f02 	tst.w	r2, #2
 8000a3a:	d00d      	beq.n	8000a58 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a3c:	f7ff fe66 	bl	800070c <HAL_GetTick>
 8000a40:	1b40      	subs	r0, r0, r5
 8000a42:	280a      	cmp	r0, #10
 8000a44:	d9f5      	bls.n	8000a32 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4c:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a4e:	2305      	movs	r3, #5
 8000a50:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000a54:	2001      	movs	r0, #1
 8000a56:	e7e1      	b.n	8000a1c <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a58:	7e22      	ldrb	r2, [r4, #24]
 8000a5a:	2a01      	cmp	r2, #1
 8000a5c:	d03d      	beq.n	8000ada <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000a64:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a66:	7e63      	ldrb	r3, [r4, #25]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d03b      	beq.n	8000ae4 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a6c:	6822      	ldr	r2, [r4, #0]
 8000a6e:	6813      	ldr	r3, [r2, #0]
 8000a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a74:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a76:	7ea3      	ldrb	r3, [r4, #26]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d039      	beq.n	8000af0 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a7c:	6822      	ldr	r2, [r4, #0]
 8000a7e:	6813      	ldr	r3, [r2, #0]
 8000a80:	f023 0320 	bic.w	r3, r3, #32
 8000a84:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a86:	7ee3      	ldrb	r3, [r4, #27]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d037      	beq.n	8000afc <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a8c:	6822      	ldr	r2, [r4, #0]
 8000a8e:	6813      	ldr	r3, [r2, #0]
 8000a90:	f043 0310 	orr.w	r3, r3, #16
 8000a94:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a96:	7f23      	ldrb	r3, [r4, #28]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d035      	beq.n	8000b08 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a9c:	6822      	ldr	r2, [r4, #0]
 8000a9e:	6813      	ldr	r3, [r2, #0]
 8000aa0:	f023 0308 	bic.w	r3, r3, #8
 8000aa4:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000aa6:	7f63      	ldrb	r3, [r4, #29]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d033      	beq.n	8000b14 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000aac:	6822      	ldr	r2, [r4, #0]
 8000aae:	6813      	ldr	r3, [r2, #0]
 8000ab0:	f023 0304 	bic.w	r3, r3, #4
 8000ab4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ab6:	68a3      	ldr	r3, [r4, #8]
 8000ab8:	68e2      	ldr	r2, [r4, #12]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	6922      	ldr	r2, [r4, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	6962      	ldr	r2, [r4, #20]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	6862      	ldr	r2, [r4, #4]
 8000ac6:	3a01      	subs	r2, #1
 8000ac8:	6821      	ldr	r1, [r4, #0]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ace:	2000      	movs	r0, #0
 8000ad0:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000ad8:	e7a0      	b.n	8000a1c <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	e7c0      	b.n	8000a66 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ae4:	6822      	ldr	r2, [r4, #0]
 8000ae6:	6813      	ldr	r3, [r2, #0]
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e7c2      	b.n	8000a76 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000af0:	6822      	ldr	r2, [r4, #0]
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	e7c4      	b.n	8000a86 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000afc:	6822      	ldr	r2, [r4, #0]
 8000afe:	6813      	ldr	r3, [r2, #0]
 8000b00:	f023 0310 	bic.w	r3, r3, #16
 8000b04:	6013      	str	r3, [r2, #0]
 8000b06:	e7c6      	b.n	8000a96 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b08:	6822      	ldr	r2, [r4, #0]
 8000b0a:	6813      	ldr	r3, [r2, #0]
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	6013      	str	r3, [r2, #0]
 8000b12:	e7c8      	b.n	8000aa6 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b14:	6822      	ldr	r2, [r4, #0]
 8000b16:	6813      	ldr	r3, [r2, #0]
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	e7ca      	b.n	8000ab6 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 8000b20:	2001      	movs	r0, #1
}
 8000b22:	4770      	bx	lr

08000b24 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000b24:	2800      	cmp	r0, #0
 8000b26:	db08      	blt.n	8000b3a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	0109      	lsls	r1, r1, #4
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000b30:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000b34:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000b38:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	f000 000f 	and.w	r0, r0, #15
 8000b3e:	0109      	lsls	r1, r1, #4
 8000b40:	b2c9      	uxtb	r1, r1
 8000b42:	4b01      	ldr	r3, [pc, #4]	@ (8000b48 <__NVIC_SetPriority+0x24>)
 8000b44:	5419      	strb	r1, [r3, r0]
  }
}
 8000b46:	4770      	bx	lr
 8000b48:	e000ed14 	.word	0xe000ed14

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b52:	f1c0 0c07 	rsb	ip, r0, #7
 8000b56:	f1bc 0f04 	cmp.w	ip, #4
 8000b5a:	bf28      	it	cs
 8000b5c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b60:	1d03      	adds	r3, r0, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d90f      	bls.n	8000b86 <NVIC_EncodePriority+0x3a>
 8000b66:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000b6c:	fa0e f00c 	lsl.w	r0, lr, ip
 8000b70:	ea21 0100 	bic.w	r1, r1, r0
 8000b74:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b76:	fa0e fe03 	lsl.w	lr, lr, r3
 8000b7a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000b7e:	ea41 0002 	orr.w	r0, r1, r2
 8000b82:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	2300      	movs	r3, #0
 8000b88:	e7ee      	b.n	8000b68 <NVIC_EncodePriority+0x1c>
	...

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4a07      	ldr	r2, [pc, #28]	@ (8000bac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b90:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b94:	041b      	lsls	r3, r3, #16
 8000b96:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b98:	0200      	lsls	r0, r0, #8
 8000b9a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000ba8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <HAL_NVIC_SetPriority+0x1c>)
 8000bb6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000bbc:	f7ff ffc6 	bl	8000b4c <NVIC_EncodePriority>
 8000bc0:	4601      	mov	r1, r0
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	f7ff ffae 	bl	8000b24 <__NVIC_SetPriority>
}
 8000bc8:	bd10      	pop	{r4, pc}
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	db07      	blt.n	8000be4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd4:	f000 021f 	and.w	r2, r0, #31
 8000bd8:	0940      	lsrs	r0, r0, #5
 8000bda:	2301      	movs	r3, #1
 8000bdc:	4093      	lsls	r3, r2
 8000bde:	4a02      	ldr	r2, [pc, #8]	@ (8000be8 <HAL_NVIC_EnableIRQ+0x18>)
 8000be0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100

08000bec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	3801      	subs	r0, #1
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf2:	d20b      	bcs.n	8000c0c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000bf8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <HAL_SYSTICK_Config+0x24>)
 8000bfc:	21f0      	movs	r1, #240	@ 0xf0
 8000bfe:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c02:	2000      	movs	r0, #0
 8000c04:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	2207      	movs	r2, #7
 8000c08:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c0c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c18:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000c1a:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1c:	e0a8      	b.n	8000d70 <HAL_GPIO_Init+0x15c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c1e:	4d83      	ldr	r5, [pc, #524]	@ (8000e2c <HAL_GPIO_Init+0x218>)
 8000c20:	42ab      	cmp	r3, r5
 8000c22:	d014      	beq.n	8000c4e <HAL_GPIO_Init+0x3a>
 8000c24:	d80c      	bhi.n	8000c40 <HAL_GPIO_Init+0x2c>
 8000c26:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8000c2a:	42ab      	cmp	r3, r5
 8000c2c:	d00f      	beq.n	8000c4e <HAL_GPIO_Init+0x3a>
 8000c2e:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d00b      	beq.n	8000c4e <HAL_GPIO_Init+0x3a>
 8000c36:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8000c3a:	42ab      	cmp	r3, r5
 8000c3c:	d11f      	bne.n	8000c7e <HAL_GPIO_Init+0x6a>
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x3a>
 8000c40:	4d7b      	ldr	r5, [pc, #492]	@ (8000e30 <HAL_GPIO_Init+0x21c>)
 8000c42:	42ab      	cmp	r3, r5
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x3a>
 8000c46:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8000c4a:	42ab      	cmp	r3, r5
 8000c4c:	d117      	bne.n	8000c7e <HAL_GPIO_Init+0x6a>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c4e:	688b      	ldr	r3, [r1, #8]
 8000c50:	b1a3      	cbz	r3, 8000c7c <HAL_GPIO_Init+0x68>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d00d      	beq.n	8000c72 <HAL_GPIO_Init+0x5e>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000c56:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c58:	2408      	movs	r4, #8
 8000c5a:	e010      	b.n	8000c7e <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c5c:	68cc      	ldr	r4, [r1, #12]
          break;
 8000c5e:	e00e      	b.n	8000c7e <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c60:	68cc      	ldr	r4, [r1, #12]
 8000c62:	3404      	adds	r4, #4
          break;
 8000c64:	e00b      	b.n	8000c7e <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c66:	68cc      	ldr	r4, [r1, #12]
 8000c68:	3408      	adds	r4, #8
          break;
 8000c6a:	e008      	b.n	8000c7e <HAL_GPIO_Init+0x6a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c6c:	68cc      	ldr	r4, [r1, #12]
 8000c6e:	340c      	adds	r4, #12
          break;
 8000c70:	e005      	b.n	8000c7e <HAL_GPIO_Init+0x6a>
            GPIOx->BSRR = ioposition;
 8000c72:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c74:	2408      	movs	r4, #8
 8000c76:	e002      	b.n	8000c7e <HAL_GPIO_Init+0x6a>
          }
          break;

        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c78:	2400      	movs	r4, #0
 8000c7a:	e000      	b.n	8000c7e <HAL_GPIO_Init+0x6a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c7c:	2404      	movs	r4, #4
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c7e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8000c82:	d841      	bhi.n	8000d08 <HAL_GPIO_Init+0xf4>
 8000c84:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c86:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c8a:	6833      	ldr	r3, [r6, #0]
 8000c8c:	250f      	movs	r5, #15
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea23 0305 	bic.w	r3, r3, r5
 8000c94:	fa04 f202 	lsl.w	r2, r4, r2
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c9c:	684b      	ldr	r3, [r1, #4]
 8000c9e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000ca2:	d063      	beq.n	8000d6c <HAL_GPIO_Init+0x158>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca4:	4b63      	ldr	r3, [pc, #396]	@ (8000e34 <HAL_GPIO_Init+0x220>)
 8000ca6:	699a      	ldr	r2, [r3, #24]
 8000ca8:	f042 0201 	orr.w	r2, r2, #1
 8000cac:	619a      	str	r2, [r3, #24]
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	9301      	str	r3, [sp, #4]
 8000cb6:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000cb8:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000cbc:	1c95      	adds	r5, r2, #2
 8000cbe:	4b5e      	ldr	r3, [pc, #376]	@ (8000e38 <HAL_GPIO_Init+0x224>)
 8000cc0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cc4:	f00c 0503 	and.w	r5, ip, #3
 8000cc8:	00ad      	lsls	r5, r5, #2
 8000cca:	230f      	movs	r3, #15
 8000ccc:	40ab      	lsls	r3, r5
 8000cce:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd2:	4b5a      	ldr	r3, [pc, #360]	@ (8000e3c <HAL_GPIO_Init+0x228>)
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	d01e      	beq.n	8000d16 <HAL_GPIO_Init+0x102>
 8000cd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000cdc:	4298      	cmp	r0, r3
 8000cde:	f000 8083 	beq.w	8000de8 <HAL_GPIO_Init+0x1d4>
 8000ce2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000ce6:	4298      	cmp	r0, r3
 8000ce8:	f000 8080 	beq.w	8000dec <HAL_GPIO_Init+0x1d8>
 8000cec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	d07d      	beq.n	8000df0 <HAL_GPIO_Init+0x1dc>
 8000cf4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	d07b      	beq.n	8000df4 <HAL_GPIO_Init+0x1e0>
 8000cfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000d00:	4298      	cmp	r0, r3
 8000d02:	d006      	beq.n	8000d12 <HAL_GPIO_Init+0xfe>
 8000d04:	2306      	movs	r3, #6
 8000d06:	e007      	b.n	8000d18 <HAL_GPIO_Init+0x104>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d08:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d0a:	f1ac 0208 	sub.w	r2, ip, #8
 8000d0e:	0092      	lsls	r2, r2, #2
 8000d10:	e7bb      	b.n	8000c8a <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d12:	2305      	movs	r3, #5
 8000d14:	e000      	b.n	8000d18 <HAL_GPIO_Init+0x104>
 8000d16:	2300      	movs	r3, #0
 8000d18:	40ab      	lsls	r3, r5
 8000d1a:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000d1c:	3202      	adds	r2, #2
 8000d1e:	4d46      	ldr	r5, [pc, #280]	@ (8000e38 <HAL_GPIO_Init+0x224>)
 8000d20:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d24:	684b      	ldr	r3, [r1, #4]
 8000d26:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000d2a:	d065      	beq.n	8000df8 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d2c:	4a44      	ldr	r2, [pc, #272]	@ (8000e40 <HAL_GPIO_Init+0x22c>)
 8000d2e:	6893      	ldr	r3, [r2, #8]
 8000d30:	ea43 030e 	orr.w	r3, r3, lr
 8000d34:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d36:	684b      	ldr	r3, [r1, #4]
 8000d38:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8000d3c:	d062      	beq.n	8000e04 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d3e:	4a40      	ldr	r2, [pc, #256]	@ (8000e40 <HAL_GPIO_Init+0x22c>)
 8000d40:	68d3      	ldr	r3, [r2, #12]
 8000d42:	ea43 030e 	orr.w	r3, r3, lr
 8000d46:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d48:	684b      	ldr	r3, [r1, #4]
 8000d4a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000d4e:	d05f      	beq.n	8000e10 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d50:	4a3b      	ldr	r2, [pc, #236]	@ (8000e40 <HAL_GPIO_Init+0x22c>)
 8000d52:	6853      	ldr	r3, [r2, #4]
 8000d54:	ea43 030e 	orr.w	r3, r3, lr
 8000d58:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d5a:	684b      	ldr	r3, [r1, #4]
 8000d5c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000d60:	d05c      	beq.n	8000e1c <HAL_GPIO_Init+0x208>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d62:	4a37      	ldr	r2, [pc, #220]	@ (8000e40 <HAL_GPIO_Init+0x22c>)
 8000d64:	6813      	ldr	r3, [r2, #0]
 8000d66:	ea43 030e 	orr.w	r3, r3, lr
 8000d6a:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8000d6c:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d70:	680b      	ldr	r3, [r1, #0]
 8000d72:	fa33 f20c 	lsrs.w	r2, r3, ip
 8000d76:	d057      	beq.n	8000e28 <HAL_GPIO_Init+0x214>
    ioposition = (0x01uL << position);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8000d82:	ea32 0303 	bics.w	r3, r2, r3
 8000d86:	d1f1      	bne.n	8000d6c <HAL_GPIO_Init+0x158>
      switch (GPIO_Init->Mode)
 8000d88:	684b      	ldr	r3, [r1, #4]
 8000d8a:	2b12      	cmp	r3, #18
 8000d8c:	f63f af47 	bhi.w	8000c1e <HAL_GPIO_Init+0xa>
 8000d90:	2b12      	cmp	r3, #18
 8000d92:	f63f af74 	bhi.w	8000c7e <HAL_GPIO_Init+0x6a>
 8000d96:	a501      	add	r5, pc, #4	@ (adr r5, 8000d9c <HAL_GPIO_Init+0x188>)
 8000d98:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8000d9c:	08000c4f 	.word	0x08000c4f
 8000da0:	08000c5d 	.word	0x08000c5d
 8000da4:	08000c67 	.word	0x08000c67
 8000da8:	08000c79 	.word	0x08000c79
 8000dac:	08000c7f 	.word	0x08000c7f
 8000db0:	08000c7f 	.word	0x08000c7f
 8000db4:	08000c7f 	.word	0x08000c7f
 8000db8:	08000c7f 	.word	0x08000c7f
 8000dbc:	08000c7f 	.word	0x08000c7f
 8000dc0:	08000c7f 	.word	0x08000c7f
 8000dc4:	08000c7f 	.word	0x08000c7f
 8000dc8:	08000c7f 	.word	0x08000c7f
 8000dcc:	08000c7f 	.word	0x08000c7f
 8000dd0:	08000c7f 	.word	0x08000c7f
 8000dd4:	08000c7f 	.word	0x08000c7f
 8000dd8:	08000c7f 	.word	0x08000c7f
 8000ddc:	08000c7f 	.word	0x08000c7f
 8000de0:	08000c61 	.word	0x08000c61
 8000de4:	08000c6d 	.word	0x08000c6d
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000de8:	2301      	movs	r3, #1
 8000dea:	e795      	b.n	8000d18 <HAL_GPIO_Init+0x104>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e793      	b.n	8000d18 <HAL_GPIO_Init+0x104>
 8000df0:	2303      	movs	r3, #3
 8000df2:	e791      	b.n	8000d18 <HAL_GPIO_Init+0x104>
 8000df4:	2304      	movs	r3, #4
 8000df6:	e78f      	b.n	8000d18 <HAL_GPIO_Init+0x104>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000df8:	4a11      	ldr	r2, [pc, #68]	@ (8000e40 <HAL_GPIO_Init+0x22c>)
 8000dfa:	6893      	ldr	r3, [r2, #8]
 8000dfc:	ea23 030e 	bic.w	r3, r3, lr
 8000e00:	6093      	str	r3, [r2, #8]
 8000e02:	e798      	b.n	8000d36 <HAL_GPIO_Init+0x122>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e04:	4a0e      	ldr	r2, [pc, #56]	@ (8000e40 <HAL_GPIO_Init+0x22c>)
 8000e06:	68d3      	ldr	r3, [r2, #12]
 8000e08:	ea23 030e 	bic.w	r3, r3, lr
 8000e0c:	60d3      	str	r3, [r2, #12]
 8000e0e:	e79b      	b.n	8000d48 <HAL_GPIO_Init+0x134>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e10:	4a0b      	ldr	r2, [pc, #44]	@ (8000e40 <HAL_GPIO_Init+0x22c>)
 8000e12:	6853      	ldr	r3, [r2, #4]
 8000e14:	ea23 030e 	bic.w	r3, r3, lr
 8000e18:	6053      	str	r3, [r2, #4]
 8000e1a:	e79e      	b.n	8000d5a <HAL_GPIO_Init+0x146>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e1c:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <HAL_GPIO_Init+0x22c>)
 8000e1e:	6813      	ldr	r3, [r2, #0]
 8000e20:	ea23 030e 	bic.w	r3, r3, lr
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e7a1      	b.n	8000d6c <HAL_GPIO_Init+0x158>
  }
}
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}
 8000e2c:	10220000 	.word	0x10220000
 8000e30:	10310000 	.word	0x10310000
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	40010800 	.word	0x40010800
 8000e40:	40010400 	.word	0x40010400

08000e44 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e44:	b10a      	cbz	r2, 8000e4a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e46:	6101      	str	r1, [r0, #16]
 8000e48:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e4a:	0409      	lsls	r1, r1, #16
 8000e4c:	6101      	str	r1, [r0, #16]
  }
}
 8000e4e:	4770      	bx	lr

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <HAL_MspInit+0x3c>)
 8000e54:	699a      	ldr	r2, [r3, #24]
 8000e56:	f042 0201 	orr.w	r2, r2, #1
 8000e5a:	619a      	str	r2, [r3, #24]
 8000e5c:	699a      	ldr	r2, [r3, #24]
 8000e5e:	f002 0201 	and.w	r2, r2, #1
 8000e62:	9200      	str	r2, [sp, #0]
 8000e64:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	69da      	ldr	r2, [r3, #28]
 8000e68:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e6c:	61da      	str	r2, [r3, #28]
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e78:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <HAL_MspInit+0x40>)
 8000e7a:	6853      	ldr	r3, [r2, #4]
 8000e7c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e86:	b002      	add	sp, #8
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010000 	.word	0x40010000

08000e94 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e94:	b500      	push	{lr}
 8000e96:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9302      	str	r3, [sp, #8]
 8000e9c:	9303      	str	r3, [sp, #12]
 8000e9e:	9304      	str	r3, [sp, #16]
 8000ea0:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8000ea2:	6802      	ldr	r2, [r0, #0]
 8000ea4:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <HAL_ADC_MspInit+0x58>)
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d002      	beq.n	8000eb0 <HAL_ADC_MspInit+0x1c>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000eaa:	b007      	add	sp, #28
 8000eac:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eb0:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8000eb4:	699a      	ldr	r2, [r3, #24]
 8000eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000eba:	619a      	str	r2, [r3, #24]
 8000ebc:	699a      	ldr	r2, [r3, #24]
 8000ebe:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000ec2:	9200      	str	r2, [sp, #0]
 8000ec4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	699a      	ldr	r2, [r3, #24]
 8000ec8:	f042 0204 	orr.w	r2, r2, #4
 8000ecc:	619a      	str	r2, [r3, #24]
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8000ed8:	2334      	movs	r3, #52	@ 0x34
 8000eda:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000edc:	2303      	movs	r3, #3
 8000ede:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	a902      	add	r1, sp, #8
 8000ee2:	4803      	ldr	r0, [pc, #12]	@ (8000ef0 <HAL_ADC_MspInit+0x5c>)
 8000ee4:	f7ff fe96 	bl	8000c14 <HAL_GPIO_Init>
}
 8000ee8:	e7df      	b.n	8000eaa <HAL_ADC_MspInit+0x16>
 8000eea:	bf00      	nop
 8000eec:	40012400 	.word	0x40012400
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ef4:	b530      	push	{r4, r5, lr}
 8000ef6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	2300      	movs	r3, #0
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	9303      	str	r3, [sp, #12]
 8000efe:	9304      	str	r3, [sp, #16]
 8000f00:	9305      	str	r3, [sp, #20]
  if(hcan->Instance==CAN1)
 8000f02:	6802      	ldr	r2, [r0, #0]
 8000f04:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <HAL_CAN_MspInit+0x74>)
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d001      	beq.n	8000f0e <HAL_CAN_MspInit+0x1a>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000f0a:	b007      	add	sp, #28
 8000f0c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f0e:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
 8000f12:	69da      	ldr	r2, [r3, #28]
 8000f14:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8000f18:	61da      	str	r2, [r3, #28]
 8000f1a:	69da      	ldr	r2, [r3, #28]
 8000f1c:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8000f20:	9200      	str	r2, [sp, #0]
 8000f22:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f24:	699a      	ldr	r2, [r3, #24]
 8000f26:	f042 0220 	orr.w	r2, r2, #32
 8000f2a:	619a      	str	r2, [r3, #24]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f003 0320 	and.w	r3, r3, #32
 8000f32:	9301      	str	r3, [sp, #4]
 8000f34:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f36:	2301      	movs	r3, #1
 8000f38:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3a:	ad02      	add	r5, sp, #8
 8000f3c:	4c0b      	ldr	r4, [pc, #44]	@ (8000f6c <HAL_CAN_MspInit+0x78>)
 8000f3e:	4629      	mov	r1, r5
 8000f40:	4620      	mov	r0, r4
 8000f42:	f7ff fe67 	bl	8000c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f46:	2302      	movs	r3, #2
 8000f48:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f50:	4629      	mov	r1, r5
 8000f52:	4620      	mov	r0, r4
 8000f54:	f7ff fe5e 	bl	8000c14 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN1_3();
 8000f58:	4a05      	ldr	r2, [pc, #20]	@ (8000f70 <HAL_CAN_MspInit+0x7c>)
 8000f5a:	6853      	ldr	r3, [r2, #4]
 8000f5c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000f60:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000f64:	6053      	str	r3, [r2, #4]
}
 8000f66:	e7d0      	b.n	8000f0a <HAL_CAN_MspInit+0x16>
 8000f68:	40006400 	.word	0x40006400
 8000f6c:	40011400 	.word	0x40011400
 8000f70:	40010000 	.word	0x40010000

08000f74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f74:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f76:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <RCC_Delay+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a08      	ldr	r2, [pc, #32]	@ (8000f9c <RCC_Delay+0x28>)
 8000f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f80:	0a5b      	lsrs	r3, r3, #9
 8000f82:	fb00 f303 	mul.w	r3, r0, r3
 8000f86:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000f88:	bf00      	nop
  }
  while (Delay --);
 8000f8a:	9b01      	ldr	r3, [sp, #4]
 8000f8c:	1e5a      	subs	r2, r3, #1
 8000f8e:	9201      	str	r2, [sp, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f9      	bne.n	8000f88 <RCC_Delay+0x14>
}
 8000f94:	b002      	add	sp, #8
 8000f96:	4770      	bx	lr
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	10624dd3 	.word	0x10624dd3

08000fa0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	f000 81f1 	beq.w	8001388 <HAL_RCC_OscConfig+0x3e8>
{
 8000fa6:	b570      	push	{r4, r5, r6, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fac:	6803      	ldr	r3, [r0, #0]
 8000fae:	f013 0f01 	tst.w	r3, #1
 8000fb2:	d02c      	beq.n	800100e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb4:	4b99      	ldr	r3, [pc, #612]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 030c 	and.w	r3, r3, #12
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d01d      	beq.n	8000ffc <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fc0:	4b96      	ldr	r3, [pc, #600]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d012      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fcc:	6863      	ldr	r3, [r4, #4]
 8000fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fd2:	d041      	beq.n	8001058 <HAL_RCC_OscConfig+0xb8>
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d155      	bne.n	8001084 <HAL_RCC_OscConfig+0xe4>
 8000fd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000fdc:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	e037      	b.n	8001062 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff2:	4b8a      	ldr	r3, [pc, #552]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000ffa:	d0e7      	beq.n	8000fcc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffc:	4b87      	ldr	r3, [pc, #540]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001004:	d003      	beq.n	800100e <HAL_RCC_OscConfig+0x6e>
 8001006:	6863      	ldr	r3, [r4, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 81bf 	beq.w	800138c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	f013 0f02 	tst.w	r3, #2
 8001014:	d075      	beq.n	8001102 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001016:	4b81      	ldr	r3, [pc, #516]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f013 0f0c 	tst.w	r3, #12
 800101e:	d05f      	beq.n	80010e0 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001020:	4b7e      	ldr	r3, [pc, #504]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b08      	cmp	r3, #8
 800102a:	d054      	beq.n	80010d6 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800102c:	6923      	ldr	r3, [r4, #16]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 808a 	beq.w	8001148 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8001034:	4b7a      	ldr	r3, [pc, #488]	@ (8001220 <HAL_RCC_OscConfig+0x280>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800103a:	f7ff fb67 	bl	800070c <HAL_GetTick>
 800103e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	4b76      	ldr	r3, [pc, #472]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f013 0f02 	tst.w	r3, #2
 8001048:	d175      	bne.n	8001136 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800104a:	f7ff fb5f 	bl	800070c <HAL_GetTick>
 800104e:	1b40      	subs	r0, r0, r5
 8001050:	2802      	cmp	r0, #2
 8001052:	d9f5      	bls.n	8001040 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001054:	2003      	movs	r0, #3
 8001056:	e19e      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001058:	4a70      	ldr	r2, [pc, #448]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 800105a:	6813      	ldr	r3, [r2, #0]
 800105c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001060:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001062:	6863      	ldr	r3, [r4, #4]
 8001064:	b343      	cbz	r3, 80010b8 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001066:	f7ff fb51 	bl	800070c <HAL_GetTick>
 800106a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106c:	4b6b      	ldr	r3, [pc, #428]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001074:	d1cb      	bne.n	800100e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001076:	f7ff fb49 	bl	800070c <HAL_GetTick>
 800107a:	1b40      	subs	r0, r0, r5
 800107c:	2864      	cmp	r0, #100	@ 0x64
 800107e:	d9f5      	bls.n	800106c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001080:	2003      	movs	r0, #3
 8001082:	e188      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001088:	d009      	beq.n	800109e <HAL_RCC_OscConfig+0xfe>
 800108a:	4b64      	ldr	r3, [pc, #400]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e7e1      	b.n	8001062 <HAL_RCC_OscConfig+0xc2>
 800109e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80010a2:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e7d4      	b.n	8001062 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80010b8:	f7ff fb28 	bl	800070c <HAL_GetTick>
 80010bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010be:	4b57      	ldr	r3, [pc, #348]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80010c6:	d0a2      	beq.n	800100e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fb20 	bl	800070c <HAL_GetTick>
 80010cc:	1b40      	subs	r0, r0, r5
 80010ce:	2864      	cmp	r0, #100	@ 0x64
 80010d0:	d9f5      	bls.n	80010be <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80010d2:	2003      	movs	r0, #3
 80010d4:	e15f      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010d6:	4b51      	ldr	r3, [pc, #324]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80010de:	d1a5      	bne.n	800102c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e0:	4b4e      	ldr	r3, [pc, #312]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f013 0f02 	tst.w	r3, #2
 80010e8:	d003      	beq.n	80010f2 <HAL_RCC_OscConfig+0x152>
 80010ea:	6923      	ldr	r3, [r4, #16]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	f040 814f 	bne.w	8001390 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f2:	4a4a      	ldr	r2, [pc, #296]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 80010f4:	6813      	ldr	r3, [r2, #0]
 80010f6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80010fa:	6961      	ldr	r1, [r4, #20]
 80010fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001100:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	f013 0f08 	tst.w	r3, #8
 8001108:	d033      	beq.n	8001172 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800110a:	69a3      	ldr	r3, [r4, #24]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d05c      	beq.n	80011ca <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8001110:	4b43      	ldr	r3, [pc, #268]	@ (8001220 <HAL_RCC_OscConfig+0x280>)
 8001112:	2201      	movs	r2, #1
 8001114:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001118:	f7ff faf8 	bl	800070c <HAL_GetTick>
 800111c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111e:	4b3f      	ldr	r3, [pc, #252]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	f013 0f02 	tst.w	r3, #2
 8001126:	d121      	bne.n	800116c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001128:	f7ff faf0 	bl	800070c <HAL_GetTick>
 800112c:	1b40      	subs	r0, r0, r5
 800112e:	2802      	cmp	r0, #2
 8001130:	d9f5      	bls.n	800111e <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8001132:	2003      	movs	r0, #3
 8001134:	e12f      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001136:	4a39      	ldr	r2, [pc, #228]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 8001138:	6813      	ldr	r3, [r2, #0]
 800113a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800113e:	6961      	ldr	r1, [r4, #20]
 8001140:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e7dc      	b.n	8001102 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001148:	4b35      	ldr	r3, [pc, #212]	@ (8001220 <HAL_RCC_OscConfig+0x280>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800114e:	f7ff fadd 	bl	800070c <HAL_GetTick>
 8001152:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001154:	4b31      	ldr	r3, [pc, #196]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f013 0f02 	tst.w	r3, #2
 800115c:	d0d1      	beq.n	8001102 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115e:	f7ff fad5 	bl	800070c <HAL_GetTick>
 8001162:	1b40      	subs	r0, r0, r5
 8001164:	2802      	cmp	r0, #2
 8001166:	d9f5      	bls.n	8001154 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8001168:	2003      	movs	r0, #3
 800116a:	e114      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff ff01 	bl	8000f74 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	f013 0f04 	tst.w	r3, #4
 8001178:	f000 8096 	beq.w	80012a8 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117c:	4b27      	ldr	r3, [pc, #156]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001184:	d134      	bne.n	80011f0 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b25      	ldr	r3, [pc, #148]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 8001188:	69da      	ldr	r2, [r3, #28]
 800118a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800118e:	61da      	str	r2, [r3, #28]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800119a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119c:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <HAL_RCC_OscConfig+0x284>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80011a4:	d026      	beq.n	80011f4 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a6:	68e3      	ldr	r3, [r4, #12]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d03d      	beq.n	8001228 <HAL_RCC_OscConfig+0x288>
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d153      	bne.n	8001258 <HAL_RCC_OscConfig+0x2b8>
 80011b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80011b4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80011b8:	6a1a      	ldr	r2, [r3, #32]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	621a      	str	r2, [r3, #32]
 80011c0:	6a1a      	ldr	r2, [r3, #32]
 80011c2:	f022 0204 	bic.w	r2, r2, #4
 80011c6:	621a      	str	r2, [r3, #32]
 80011c8:	e033      	b.n	8001232 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <HAL_RCC_OscConfig+0x280>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80011d2:	f7ff fa9b 	bl	800070c <HAL_GetTick>
 80011d6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <HAL_RCC_OscConfig+0x27c>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011dc:	f013 0f02 	tst.w	r3, #2
 80011e0:	d0c7      	beq.n	8001172 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e2:	f7ff fa93 	bl	800070c <HAL_GetTick>
 80011e6:	1b40      	subs	r0, r0, r5
 80011e8:	2802      	cmp	r0, #2
 80011ea:	d9f5      	bls.n	80011d8 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80011ec:	2003      	movs	r0, #3
 80011ee:	e0d2      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80011f0:	2500      	movs	r5, #0
 80011f2:	e7d3      	b.n	800119c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <HAL_RCC_OscConfig+0x284>)
 80011f6:	6813      	ldr	r3, [r2, #0]
 80011f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011fc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80011fe:	f7ff fa85 	bl	800070c <HAL_GetTick>
 8001202:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <HAL_RCC_OscConfig+0x284>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800120c:	d1cb      	bne.n	80011a6 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120e:	f7ff fa7d 	bl	800070c <HAL_GetTick>
 8001212:	1b80      	subs	r0, r0, r6
 8001214:	2864      	cmp	r0, #100	@ 0x64
 8001216:	d9f5      	bls.n	8001204 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8001218:	2003      	movs	r0, #3
 800121a:	e0bc      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
 800121c:	40021000 	.word	0x40021000
 8001220:	42420000 	.word	0x42420000
 8001224:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001228:	4a5f      	ldr	r2, [pc, #380]	@ (80013a8 <HAL_RCC_OscConfig+0x408>)
 800122a:	6a13      	ldr	r3, [r2, #32]
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001232:	68e3      	ldr	r3, [r4, #12]
 8001234:	b333      	cbz	r3, 8001284 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001236:	f7ff fa69 	bl	800070c <HAL_GetTick>
 800123a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123c:	4b5a      	ldr	r3, [pc, #360]	@ (80013a8 <HAL_RCC_OscConfig+0x408>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	f013 0f02 	tst.w	r3, #2
 8001244:	d12f      	bne.n	80012a6 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff fa61 	bl	800070c <HAL_GetTick>
 800124a:	1b80      	subs	r0, r0, r6
 800124c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001250:	4298      	cmp	r0, r3
 8001252:	d9f3      	bls.n	800123c <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8001254:	2003      	movs	r0, #3
 8001256:	e09e      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001258:	2b05      	cmp	r3, #5
 800125a:	d009      	beq.n	8001270 <HAL_RCC_OscConfig+0x2d0>
 800125c:	4b52      	ldr	r3, [pc, #328]	@ (80013a8 <HAL_RCC_OscConfig+0x408>)
 800125e:	6a1a      	ldr	r2, [r3, #32]
 8001260:	f022 0201 	bic.w	r2, r2, #1
 8001264:	621a      	str	r2, [r3, #32]
 8001266:	6a1a      	ldr	r2, [r3, #32]
 8001268:	f022 0204 	bic.w	r2, r2, #4
 800126c:	621a      	str	r2, [r3, #32]
 800126e:	e7e0      	b.n	8001232 <HAL_RCC_OscConfig+0x292>
 8001270:	4b4d      	ldr	r3, [pc, #308]	@ (80013a8 <HAL_RCC_OscConfig+0x408>)
 8001272:	6a1a      	ldr	r2, [r3, #32]
 8001274:	f042 0204 	orr.w	r2, r2, #4
 8001278:	621a      	str	r2, [r3, #32]
 800127a:	6a1a      	ldr	r2, [r3, #32]
 800127c:	f042 0201 	orr.w	r2, r2, #1
 8001280:	621a      	str	r2, [r3, #32]
 8001282:	e7d6      	b.n	8001232 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8001284:	f7ff fa42 	bl	800070c <HAL_GetTick>
 8001288:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128a:	4b47      	ldr	r3, [pc, #284]	@ (80013a8 <HAL_RCC_OscConfig+0x408>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	f013 0f02 	tst.w	r3, #2
 8001292:	d008      	beq.n	80012a6 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001294:	f7ff fa3a 	bl	800070c <HAL_GetTick>
 8001298:	1b80      	subs	r0, r0, r6
 800129a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800129e:	4298      	cmp	r0, r3
 80012a0:	d9f3      	bls.n	800128a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80012a2:	2003      	movs	r0, #3
 80012a4:	e077      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 80012a6:	b9e5      	cbnz	r5, 80012e2 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a8:	69e3      	ldr	r3, [r4, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d072      	beq.n	8001394 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ae:	4a3e      	ldr	r2, [pc, #248]	@ (80013a8 <HAL_RCC_OscConfig+0x408>)
 80012b0:	6852      	ldr	r2, [r2, #4]
 80012b2:	f002 020c 	and.w	r2, r2, #12
 80012b6:	2a08      	cmp	r2, #8
 80012b8:	d056      	beq.n	8001368 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d017      	beq.n	80012ee <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80012be:	4b3b      	ldr	r3, [pc, #236]	@ (80013ac <HAL_RCC_OscConfig+0x40c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80012c4:	f7ff fa22 	bl	800070c <HAL_GetTick>
 80012c8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ca:	4b37      	ldr	r3, [pc, #220]	@ (80013a8 <HAL_RCC_OscConfig+0x408>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80012d2:	d047      	beq.n	8001364 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d4:	f7ff fa1a 	bl	800070c <HAL_GetTick>
 80012d8:	1b00      	subs	r0, r0, r4
 80012da:	2802      	cmp	r0, #2
 80012dc:	d9f5      	bls.n	80012ca <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80012de:	2003      	movs	r0, #3
 80012e0:	e059      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e2:	4a31      	ldr	r2, [pc, #196]	@ (80013a8 <HAL_RCC_OscConfig+0x408>)
 80012e4:	69d3      	ldr	r3, [r2, #28]
 80012e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	61d3      	str	r3, [r2, #28]
 80012ec:	e7dc      	b.n	80012a8 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80012ee:	4b2f      	ldr	r3, [pc, #188]	@ (80013ac <HAL_RCC_OscConfig+0x40c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80012f4:	f7ff fa0a 	bl	800070c <HAL_GetTick>
 80012f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fa:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <HAL_RCC_OscConfig+0x408>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001302:	d006      	beq.n	8001312 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001304:	f7ff fa02 	bl	800070c <HAL_GetTick>
 8001308:	1b40      	subs	r0, r0, r5
 800130a:	2802      	cmp	r0, #2
 800130c:	d9f5      	bls.n	80012fa <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800130e:	2003      	movs	r0, #3
 8001310:	e041      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001312:	6a23      	ldr	r3, [r4, #32]
 8001314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001318:	d01a      	beq.n	8001350 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131a:	4923      	ldr	r1, [pc, #140]	@ (80013a8 <HAL_RCC_OscConfig+0x408>)
 800131c:	684b      	ldr	r3, [r1, #4]
 800131e:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8001322:	6a22      	ldr	r2, [r4, #32]
 8001324:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001326:	4302      	orrs	r2, r0
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800132c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <HAL_RCC_OscConfig+0x40c>)
 800132e:	2201      	movs	r2, #1
 8001330:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001332:	f7ff f9eb 	bl	800070c <HAL_GetTick>
 8001336:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <HAL_RCC_OscConfig+0x408>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001340:	d10e      	bne.n	8001360 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001342:	f7ff f9e3 	bl	800070c <HAL_GetTick>
 8001346:	1b00      	subs	r0, r0, r4
 8001348:	2802      	cmp	r0, #2
 800134a:	d9f5      	bls.n	8001338 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 800134c:	2003      	movs	r0, #3
 800134e:	e022      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001350:	4a15      	ldr	r2, [pc, #84]	@ (80013a8 <HAL_RCC_OscConfig+0x408>)
 8001352:	6853      	ldr	r3, [r2, #4]
 8001354:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001358:	68a1      	ldr	r1, [r4, #8]
 800135a:	430b      	orrs	r3, r1
 800135c:	6053      	str	r3, [r2, #4]
 800135e:	e7dc      	b.n	800131a <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001360:	2000      	movs	r0, #0
 8001362:	e018      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
 8001364:	2000      	movs	r0, #0
 8001366:	e016      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001368:	2b01      	cmp	r3, #1
 800136a:	d016      	beq.n	800139a <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <HAL_RCC_OscConfig+0x408>)
 800136e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001370:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8001374:	6a22      	ldr	r2, [r4, #32]
 8001376:	4291      	cmp	r1, r2
 8001378:	d111      	bne.n	800139e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800137a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800137e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001380:	4293      	cmp	r3, r2
 8001382:	d10e      	bne.n	80013a2 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001384:	2000      	movs	r0, #0
 8001386:	e006      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001388:	2001      	movs	r0, #1
}
 800138a:	4770      	bx	lr
        return HAL_ERROR;
 800138c:	2001      	movs	r0, #1
 800138e:	e002      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8001390:	2001      	movs	r0, #1
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8001394:	2000      	movs	r0, #0
}
 8001396:	b002      	add	sp, #8
 8001398:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800139a:	2001      	movs	r0, #1
 800139c:	e7fb      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800139e:	2001      	movs	r0, #1
 80013a0:	e7f9      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
 80013a2:	2001      	movs	r0, #1
 80013a4:	e7f7      	b.n	8001396 <HAL_RCC_OscConfig+0x3f6>
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000
 80013ac:	42420000 	.word	0x42420000

080013b0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x40>)
 80013b2:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80013b4:	f003 020c 	and.w	r2, r3, #12
 80013b8:	2a08      	cmp	r2, #8
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80013bc:	480d      	ldr	r0, [pc, #52]	@ (80013f4 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80013be:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013c0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80013c4:	490c      	ldr	r1, [pc, #48]	@ (80013f8 <HAL_RCC_GetSysClockFreq+0x48>)
 80013c6:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013c8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80013cc:	d00b      	beq.n	80013e6 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <HAL_RCC_GetSysClockFreq+0x40>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80013d6:	4a09      	ldr	r2, [pc, #36]	@ (80013fc <HAL_RCC_GetSysClockFreq+0x4c>)
 80013d8:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013da:	4a06      	ldr	r2, [pc, #24]	@ (80013f4 <HAL_RCC_GetSysClockFreq+0x44>)
 80013dc:	fb02 f000 	mul.w	r0, r2, r0
 80013e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80013e4:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_RCC_GetSysClockFreq+0x50>)
 80013e8:	fb03 f000 	mul.w	r0, r3, r0
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	007a1200 	.word	0x007a1200
 80013f8:	08001ff8 	.word	0x08001ff8
 80013fc:	08001ff4 	.word	0x08001ff4
 8001400:	003d0900 	.word	0x003d0900

08001404 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001404:	2800      	cmp	r0, #0
 8001406:	f000 80a0 	beq.w	800154a <HAL_RCC_ClockConfig+0x146>
{
 800140a:	b570      	push	{r4, r5, r6, lr}
 800140c:	460d      	mov	r5, r1
 800140e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001410:	4b52      	ldr	r3, [pc, #328]	@ (800155c <HAL_RCC_ClockConfig+0x158>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	428b      	cmp	r3, r1
 800141a:	d20b      	bcs.n	8001434 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141c:	4a4f      	ldr	r2, [pc, #316]	@ (800155c <HAL_RCC_ClockConfig+0x158>)
 800141e:	6813      	ldr	r3, [r2, #0]
 8001420:	f023 0307 	bic.w	r3, r3, #7
 8001424:	430b      	orrs	r3, r1
 8001426:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001428:	6813      	ldr	r3, [r2, #0]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	428b      	cmp	r3, r1
 8001430:	f040 808d 	bne.w	800154e <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	f013 0f02 	tst.w	r3, #2
 800143a:	d017      	beq.n	800146c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143c:	f013 0f04 	tst.w	r3, #4
 8001440:	d004      	beq.n	800144c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001442:	4a47      	ldr	r2, [pc, #284]	@ (8001560 <HAL_RCC_ClockConfig+0x15c>)
 8001444:	6853      	ldr	r3, [r2, #4]
 8001446:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800144a:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	f013 0f08 	tst.w	r3, #8
 8001452:	d004      	beq.n	800145e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001454:	4a42      	ldr	r2, [pc, #264]	@ (8001560 <HAL_RCC_ClockConfig+0x15c>)
 8001456:	6853      	ldr	r3, [r2, #4]
 8001458:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800145c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800145e:	4a40      	ldr	r2, [pc, #256]	@ (8001560 <HAL_RCC_ClockConfig+0x15c>)
 8001460:	6853      	ldr	r3, [r2, #4]
 8001462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001466:	68a1      	ldr	r1, [r4, #8]
 8001468:	430b      	orrs	r3, r1
 800146a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146c:	6823      	ldr	r3, [r4, #0]
 800146e:	f013 0f01 	tst.w	r3, #1
 8001472:	d031      	beq.n	80014d8 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001474:	6863      	ldr	r3, [r4, #4]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d020      	beq.n	80014bc <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800147a:	2b02      	cmp	r3, #2
 800147c:	d025      	beq.n	80014ca <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147e:	4a38      	ldr	r2, [pc, #224]	@ (8001560 <HAL_RCC_ClockConfig+0x15c>)
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	f012 0f02 	tst.w	r2, #2
 8001486:	d064      	beq.n	8001552 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001488:	4935      	ldr	r1, [pc, #212]	@ (8001560 <HAL_RCC_ClockConfig+0x15c>)
 800148a:	684a      	ldr	r2, [r1, #4]
 800148c:	f022 0203 	bic.w	r2, r2, #3
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001494:	f7ff f93a 	bl	800070c <HAL_GetTick>
 8001498:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149a:	4b31      	ldr	r3, [pc, #196]	@ (8001560 <HAL_RCC_ClockConfig+0x15c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	6862      	ldr	r2, [r4, #4]
 80014a4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014a8:	d016      	beq.n	80014d8 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014aa:	f7ff f92f 	bl	800070c <HAL_GetTick>
 80014ae:	1b80      	subs	r0, r0, r6
 80014b0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014b4:	4298      	cmp	r0, r3
 80014b6:	d9f0      	bls.n	800149a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80014b8:	2003      	movs	r0, #3
 80014ba:	e045      	b.n	8001548 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014bc:	4a28      	ldr	r2, [pc, #160]	@ (8001560 <HAL_RCC_ClockConfig+0x15c>)
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80014c4:	d1e0      	bne.n	8001488 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80014c6:	2001      	movs	r0, #1
 80014c8:	e03e      	b.n	8001548 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ca:	4a25      	ldr	r2, [pc, #148]	@ (8001560 <HAL_RCC_ClockConfig+0x15c>)
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80014d2:	d1d9      	bne.n	8001488 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80014d4:	2001      	movs	r0, #1
 80014d6:	e037      	b.n	8001548 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014d8:	4b20      	ldr	r3, [pc, #128]	@ (800155c <HAL_RCC_ClockConfig+0x158>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	42ab      	cmp	r3, r5
 80014e2:	d90a      	bls.n	80014fa <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e4:	4a1d      	ldr	r2, [pc, #116]	@ (800155c <HAL_RCC_ClockConfig+0x158>)
 80014e6:	6813      	ldr	r3, [r2, #0]
 80014e8:	f023 0307 	bic.w	r3, r3, #7
 80014ec:	432b      	orrs	r3, r5
 80014ee:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f0:	6813      	ldr	r3, [r2, #0]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	42ab      	cmp	r3, r5
 80014f8:	d12d      	bne.n	8001556 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	f013 0f04 	tst.w	r3, #4
 8001500:	d006      	beq.n	8001510 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001502:	4a17      	ldr	r2, [pc, #92]	@ (8001560 <HAL_RCC_ClockConfig+0x15c>)
 8001504:	6853      	ldr	r3, [r2, #4]
 8001506:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800150a:	68e1      	ldr	r1, [r4, #12]
 800150c:	430b      	orrs	r3, r1
 800150e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	f013 0f08 	tst.w	r3, #8
 8001516:	d007      	beq.n	8001528 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001518:	4a11      	ldr	r2, [pc, #68]	@ (8001560 <HAL_RCC_ClockConfig+0x15c>)
 800151a:	6853      	ldr	r3, [r2, #4]
 800151c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001520:	6921      	ldr	r1, [r4, #16]
 8001522:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001526:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001528:	f7ff ff42 	bl	80013b0 <HAL_RCC_GetSysClockFreq>
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <HAL_RCC_ClockConfig+0x15c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001534:	4a0b      	ldr	r2, [pc, #44]	@ (8001564 <HAL_RCC_ClockConfig+0x160>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	40d8      	lsrs	r0, r3
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_RCC_ClockConfig+0x164>)
 800153c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <HAL_RCC_ClockConfig+0x168>)
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	f7ff f89f 	bl	8000684 <HAL_InitTick>
  return HAL_OK;
 8001546:	2000      	movs	r0, #0
}
 8001548:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800154a:	2001      	movs	r0, #1
}
 800154c:	4770      	bx	lr
    return HAL_ERROR;
 800154e:	2001      	movs	r0, #1
 8001550:	e7fa      	b.n	8001548 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001552:	2001      	movs	r0, #1
 8001554:	e7f8      	b.n	8001548 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8001556:	2001      	movs	r0, #1
 8001558:	e7f6      	b.n	8001548 <HAL_RCC_ClockConfig+0x144>
 800155a:	bf00      	nop
 800155c:	40022000 	.word	0x40022000
 8001560:	40021000 	.word	0x40021000
 8001564:	08002008 	.word	0x08002008
 8001568:	20000008 	.word	0x20000008
 800156c:	20000004 	.word	0x20000004

08001570 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001570:	b570      	push	{r4, r5, r6, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001576:	6803      	ldr	r3, [r0, #0]
 8001578:	f013 0f01 	tst.w	r3, #1
 800157c:	d036      	beq.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157e:	4b3f      	ldr	r3, [pc, #252]	@ (800167c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001586:	d14a      	bne.n	800161e <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001588:	4b3c      	ldr	r3, [pc, #240]	@ (800167c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800158a:	69da      	ldr	r2, [r3, #28]
 800158c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001590:	61da      	str	r2, [r3, #28]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800159c:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159e:	4b38      	ldr	r3, [pc, #224]	@ (8001680 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80015a6:	d03c      	beq.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015a8:	4b34      	ldr	r3, [pc, #208]	@ (800167c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015ac:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80015b0:	d013      	beq.n	80015da <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80015b2:	6862      	ldr	r2, [r4, #4]
 80015b4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d00e      	beq.n	80015da <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015bc:	4a2f      	ldr	r2, [pc, #188]	@ (800167c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80015be:	6a13      	ldr	r3, [r2, #32]
 80015c0:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015c4:	492f      	ldr	r1, [pc, #188]	@ (8001684 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80015c6:	2601      	movs	r6, #1
 80015c8:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015cc:	2600      	movs	r6, #0
 80015ce:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80015d2:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80015d4:	f013 0f01 	tst.w	r3, #1
 80015d8:	d137      	bne.n	800164a <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015da:	4a28      	ldr	r2, [pc, #160]	@ (800167c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80015dc:	6a13      	ldr	r3, [r2, #32]
 80015de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015e2:	6861      	ldr	r1, [r4, #4]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015e8:	2d00      	cmp	r5, #0
 80015ea:	d13f      	bne.n	800166c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	f013 0f02 	tst.w	r3, #2
 80015f2:	d006      	beq.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80015f4:	4a21      	ldr	r2, [pc, #132]	@ (800167c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80015f6:	6853      	ldr	r3, [r2, #4]
 80015f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015fc:	68a1      	ldr	r1, [r4, #8]
 80015fe:	430b      	orrs	r3, r1
 8001600:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	f013 0f10 	tst.w	r3, #16
 8001608:	d035      	beq.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800160a:	4a1c      	ldr	r2, [pc, #112]	@ (800167c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800160c:	6853      	ldr	r3, [r2, #4]
 800160e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001612:	6961      	ldr	r1, [r4, #20]
 8001614:	430b      	orrs	r3, r1
 8001616:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001618:	2000      	movs	r0, #0
}
 800161a:	b002      	add	sp, #8
 800161c:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus pwrclkchanged = RESET;
 800161e:	2500      	movs	r5, #0
 8001620:	e7bd      	b.n	800159e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001622:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001624:	6813      	ldr	r3, [r2, #0]
 8001626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800162c:	f7ff f86e 	bl	800070c <HAL_GetTick>
 8001630:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800163a:	d1b5      	bne.n	80015a8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163c:	f7ff f866 	bl	800070c <HAL_GetTick>
 8001640:	1b80      	subs	r0, r0, r6
 8001642:	2864      	cmp	r0, #100	@ 0x64
 8001644:	d9f5      	bls.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0xc2>
          return HAL_TIMEOUT;
 8001646:	2003      	movs	r0, #3
 8001648:	e7e7      	b.n	800161a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        tickstart = HAL_GetTick();
 800164a:	f7ff f85f 	bl	800070c <HAL_GetTick>
 800164e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001650:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	f013 0f02 	tst.w	r3, #2
 8001658:	d1bf      	bne.n	80015da <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7ff f857 	bl	800070c <HAL_GetTick>
 800165e:	1b80      	subs	r0, r0, r6
 8001660:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001664:	4298      	cmp	r0, r3
 8001666:	d9f3      	bls.n	8001650 <HAL_RCCEx_PeriphCLKConfig+0xe0>
            return HAL_TIMEOUT;
 8001668:	2003      	movs	r0, #3
 800166a:	e7d6      	b.n	800161a <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 800166c:	69d3      	ldr	r3, [r2, #28]
 800166e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001672:	61d3      	str	r3, [r2, #28]
 8001674:	e7ba      	b.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8001676:	2000      	movs	r0, #0
 8001678:	e7cf      	b.n	800161a <HAL_RCCEx_PeriphCLKConfig+0xaa>
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	40007000 	.word	0x40007000
 8001684:	42420000 	.word	0x42420000

08001688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001688:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800168a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800168c:	6a02      	ldr	r2, [r0, #32]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001694:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001696:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001698:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800169c:	680c      	ldr	r4, [r1, #0]
 800169e:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80016a2:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80016a6:	688b      	ldr	r3, [r1, #8]
 80016a8:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80016ac:	4d11      	ldr	r5, [pc, #68]	@ (80016f4 <TIM_OC1_SetConfig+0x6c>)
 80016ae:	42a8      	cmp	r0, r5
 80016b0:	d003      	beq.n	80016ba <TIM_OC1_SetConfig+0x32>
 80016b2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80016b6:	42a8      	cmp	r0, r5
 80016b8:	d105      	bne.n	80016c6 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80016ba:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80016be:	68cd      	ldr	r5, [r1, #12]
 80016c0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80016c2:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016c6:	4d0b      	ldr	r5, [pc, #44]	@ (80016f4 <TIM_OC1_SetConfig+0x6c>)
 80016c8:	42a8      	cmp	r0, r5
 80016ca:	d003      	beq.n	80016d4 <TIM_OC1_SetConfig+0x4c>
 80016cc:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80016d0:	42a8      	cmp	r0, r5
 80016d2:	d107      	bne.n	80016e4 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80016d4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80016d8:	694d      	ldr	r5, [r1, #20]
 80016da:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80016de:	698a      	ldr	r2, [r1, #24]
 80016e0:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016e4:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80016e6:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80016e8:	684a      	ldr	r2, [r1, #4]
 80016ea:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016ec:	6203      	str	r3, [r0, #32]
}
 80016ee:	bc30      	pop	{r4, r5}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40012c00 	.word	0x40012c00

080016f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80016f8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016fa:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80016fc:	6a02      	ldr	r2, [r0, #32]
 80016fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001702:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001704:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001706:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001708:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800170c:	680c      	ldr	r4, [r1, #0]
 800170e:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001712:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001716:	688c      	ldr	r4, [r1, #8]
 8001718:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800171c:	4c11      	ldr	r4, [pc, #68]	@ (8001764 <TIM_OC3_SetConfig+0x6c>)
 800171e:	42a0      	cmp	r0, r4
 8001720:	d003      	beq.n	800172a <TIM_OC3_SetConfig+0x32>
 8001722:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8001726:	42a0      	cmp	r0, r4
 8001728:	d106      	bne.n	8001738 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800172a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800172e:	68cc      	ldr	r4, [r1, #12]
 8001730:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001734:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001738:	4c0a      	ldr	r4, [pc, #40]	@ (8001764 <TIM_OC3_SetConfig+0x6c>)
 800173a:	42a0      	cmp	r0, r4
 800173c:	d003      	beq.n	8001746 <TIM_OC3_SetConfig+0x4e>
 800173e:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8001742:	42a0      	cmp	r0, r4
 8001744:	d107      	bne.n	8001756 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001746:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800174a:	694c      	ldr	r4, [r1, #20]
 800174c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001750:	698c      	ldr	r4, [r1, #24]
 8001752:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001756:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001758:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800175a:	684a      	ldr	r2, [r1, #4]
 800175c:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800175e:	6203      	str	r3, [r0, #32]
}
 8001760:	bc30      	pop	{r4, r5}
 8001762:	4770      	bx	lr
 8001764:	40012c00 	.word	0x40012c00

08001768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001768:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800176a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800176c:	6a02      	ldr	r2, [r0, #32]
 800176e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001772:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001774:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001776:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001778:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800177c:	680d      	ldr	r5, [r1, #0]
 800177e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001782:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001786:	688d      	ldr	r5, [r1, #8]
 8001788:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800178c:	4d09      	ldr	r5, [pc, #36]	@ (80017b4 <TIM_OC4_SetConfig+0x4c>)
 800178e:	42a8      	cmp	r0, r5
 8001790:	d003      	beq.n	800179a <TIM_OC4_SetConfig+0x32>
 8001792:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8001796:	42a8      	cmp	r0, r5
 8001798:	d104      	bne.n	80017a4 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800179a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800179e:	694d      	ldr	r5, [r1, #20]
 80017a0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017a4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80017a6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80017a8:	684a      	ldr	r2, [r1, #4]
 80017aa:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017ac:	6203      	str	r3, [r0, #32]
}
 80017ae:	bc30      	pop	{r4, r5}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40012c00 	.word	0x40012c00

080017b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80017b8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80017ba:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017bc:	6a04      	ldr	r4, [r0, #32]
 80017be:	f024 0401 	bic.w	r4, r4, #1
 80017c2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017c4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017c6:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017ca:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017ce:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80017d2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80017d4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80017d6:	6203      	str	r3, [r0, #32]
}
 80017d8:	bc10      	pop	{r4}
 80017da:	4770      	bx	lr

080017dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80017dc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80017de:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017e0:	6a04      	ldr	r4, [r0, #32]
 80017e2:	f024 0410 	bic.w	r4, r4, #16
 80017e6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017e8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80017ea:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80017ee:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80017f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80017f6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80017fa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80017fc:	6203      	str	r3, [r0, #32]
}
 80017fe:	bc10      	pop	{r4}
 8001800:	4770      	bx	lr

08001802 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001802:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001808:	430b      	orrs	r3, r1
 800180a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800180e:	6083      	str	r3, [r0, #8]
}
 8001810:	4770      	bx	lr

08001812 <HAL_TIM_Base_MspInit>:
}
 8001812:	4770      	bx	lr

08001814 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001814:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001818:	2b01      	cmp	r3, #1
 800181a:	d12f      	bne.n	800187c <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 800181c:	2302      	movs	r3, #2
 800181e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001822:	6802      	ldr	r2, [r0, #0]
 8001824:	68d3      	ldr	r3, [r2, #12]
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800182c:	6803      	ldr	r3, [r0, #0]
 800182e:	4a15      	ldr	r2, [pc, #84]	@ (8001884 <HAL_TIM_Base_Start_IT+0x70>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d018      	beq.n	8001866 <HAL_TIM_Base_Start_IT+0x52>
 8001834:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001838:	4293      	cmp	r3, r2
 800183a:	d014      	beq.n	8001866 <HAL_TIM_Base_Start_IT+0x52>
 800183c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001840:	d011      	beq.n	8001866 <HAL_TIM_Base_Start_IT+0x52>
 8001842:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8001846:	4293      	cmp	r3, r2
 8001848:	d00d      	beq.n	8001866 <HAL_TIM_Base_Start_IT+0x52>
 800184a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800184e:	4293      	cmp	r3, r2
 8001850:	d009      	beq.n	8001866 <HAL_TIM_Base_Start_IT+0x52>
 8001852:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001856:	4293      	cmp	r3, r2
 8001858:	d005      	beq.n	8001866 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001862:	2000      	movs	r0, #0
 8001864:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800186c:	2a06      	cmp	r2, #6
 800186e:	d007      	beq.n	8001880 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	f042 0201 	orr.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001878:	2000      	movs	r0, #0
 800187a:	4770      	bx	lr
    return HAL_ERROR;
 800187c:	2001      	movs	r0, #1
 800187e:	4770      	bx	lr
  return HAL_OK;
 8001880:	2000      	movs	r0, #0
}
 8001882:	4770      	bx	lr
 8001884:	40012c00 	.word	0x40012c00

08001888 <HAL_TIM_PWM_MspInit>:
}
 8001888:	4770      	bx	lr
	...

0800188c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800188c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800188e:	4a28      	ldr	r2, [pc, #160]	@ (8001930 <TIM_Base_SetConfig+0xa4>)
 8001890:	4290      	cmp	r0, r2
 8001892:	d012      	beq.n	80018ba <TIM_Base_SetConfig+0x2e>
 8001894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001898:	4290      	cmp	r0, r2
 800189a:	d00e      	beq.n	80018ba <TIM_Base_SetConfig+0x2e>
 800189c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80018a0:	d00b      	beq.n	80018ba <TIM_Base_SetConfig+0x2e>
 80018a2:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80018a6:	4290      	cmp	r0, r2
 80018a8:	d007      	beq.n	80018ba <TIM_Base_SetConfig+0x2e>
 80018aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018ae:	4290      	cmp	r0, r2
 80018b0:	d003      	beq.n	80018ba <TIM_Base_SetConfig+0x2e>
 80018b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018b6:	4290      	cmp	r0, r2
 80018b8:	d103      	bne.n	80018c2 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80018be:	684a      	ldr	r2, [r1, #4]
 80018c0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001930 <TIM_Base_SetConfig+0xa4>)
 80018c4:	4290      	cmp	r0, r2
 80018c6:	d012      	beq.n	80018ee <TIM_Base_SetConfig+0x62>
 80018c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018cc:	4290      	cmp	r0, r2
 80018ce:	d00e      	beq.n	80018ee <TIM_Base_SetConfig+0x62>
 80018d0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80018d4:	d00b      	beq.n	80018ee <TIM_Base_SetConfig+0x62>
 80018d6:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80018da:	4290      	cmp	r0, r2
 80018dc:	d007      	beq.n	80018ee <TIM_Base_SetConfig+0x62>
 80018de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018e2:	4290      	cmp	r0, r2
 80018e4:	d003      	beq.n	80018ee <TIM_Base_SetConfig+0x62>
 80018e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80018ea:	4290      	cmp	r0, r2
 80018ec:	d103      	bne.n	80018f6 <TIM_Base_SetConfig+0x6a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80018ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018f2:	68ca      	ldr	r2, [r1, #12]
 80018f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018fa:	694a      	ldr	r2, [r1, #20]
 80018fc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80018fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001900:	688b      	ldr	r3, [r1, #8]
 8001902:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001904:	680b      	ldr	r3, [r1, #0]
 8001906:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001908:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <TIM_Base_SetConfig+0xa4>)
 800190a:	4298      	cmp	r0, r3
 800190c:	d003      	beq.n	8001916 <TIM_Base_SetConfig+0x8a>
 800190e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001912:	4298      	cmp	r0, r3
 8001914:	d101      	bne.n	800191a <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 8001916:	690b      	ldr	r3, [r1, #16]
 8001918:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800191a:	2301      	movs	r3, #1
 800191c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800191e:	6903      	ldr	r3, [r0, #16]
 8001920:	f013 0f01 	tst.w	r3, #1
 8001924:	d003      	beq.n	800192e <TIM_Base_SetConfig+0xa2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001926:	6903      	ldr	r3, [r0, #16]
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	6103      	str	r3, [r0, #16]
}
 800192e:	4770      	bx	lr
 8001930:	40012c00 	.word	0x40012c00

08001934 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001934:	b340      	cbz	r0, 8001988 <HAL_TIM_Base_Init+0x54>
{
 8001936:	b510      	push	{r4, lr}
 8001938:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800193a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800193e:	b1f3      	cbz	r3, 800197e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001940:	2302      	movs	r3, #2
 8001942:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001946:	4621      	mov	r1, r4
 8001948:	f851 0b04 	ldr.w	r0, [r1], #4
 800194c:	f7ff ff9e 	bl	800188c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001950:	2301      	movs	r3, #1
 8001952:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001956:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800195a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800195e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001962:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001966:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800196a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800196e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001972:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001976:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800197a:	2000      	movs	r0, #0
}
 800197c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800197e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001982:	f7ff ff46 	bl	8001812 <HAL_TIM_Base_MspInit>
 8001986:	e7db      	b.n	8001940 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001988:	2001      	movs	r0, #1
}
 800198a:	4770      	bx	lr

0800198c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800198c:	b340      	cbz	r0, 80019e0 <HAL_TIM_PWM_Init+0x54>
{
 800198e:	b510      	push	{r4, lr}
 8001990:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001992:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001996:	b1f3      	cbz	r3, 80019d6 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001998:	2302      	movs	r3, #2
 800199a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800199e:	4621      	mov	r1, r4
 80019a0:	f851 0b04 	ldr.w	r0, [r1], #4
 80019a4:	f7ff ff72 	bl	800188c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80019b2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80019b6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80019ba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019be:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80019c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80019c6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80019ca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80019ce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80019d2:	2000      	movs	r0, #0
}
 80019d4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80019d6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80019da:	f7ff ff55 	bl	8001888 <HAL_TIM_PWM_MspInit>
 80019de:	e7db      	b.n	8001998 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80019e0:	2001      	movs	r0, #1
}
 80019e2:	4770      	bx	lr

080019e4 <TIM_OC2_SetConfig>:
{
 80019e4:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80019e6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019e8:	6a02      	ldr	r2, [r0, #32]
 80019ea:	f022 0210 	bic.w	r2, r2, #16
 80019ee:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80019f0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80019f2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80019f4:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019f8:	680d      	ldr	r5, [r1, #0]
 80019fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80019fe:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a02:	688d      	ldr	r5, [r1, #8]
 8001a04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001a08:	4d11      	ldr	r5, [pc, #68]	@ (8001a50 <TIM_OC2_SetConfig+0x6c>)
 8001a0a:	42a8      	cmp	r0, r5
 8001a0c:	d003      	beq.n	8001a16 <TIM_OC2_SetConfig+0x32>
 8001a0e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8001a12:	42a8      	cmp	r0, r5
 8001a14:	d106      	bne.n	8001a24 <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a1a:	68cd      	ldr	r5, [r1, #12]
 8001a1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a24:	4d0a      	ldr	r5, [pc, #40]	@ (8001a50 <TIM_OC2_SetConfig+0x6c>)
 8001a26:	42a8      	cmp	r0, r5
 8001a28:	d003      	beq.n	8001a32 <TIM_OC2_SetConfig+0x4e>
 8001a2a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8001a2e:	42a8      	cmp	r0, r5
 8001a30:	d107      	bne.n	8001a42 <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a32:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001a36:	694d      	ldr	r5, [r1, #20]
 8001a38:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a3c:	698d      	ldr	r5, [r1, #24]
 8001a3e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001a42:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001a44:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001a46:	684a      	ldr	r2, [r1, #4]
 8001a48:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8001a4a:	6203      	str	r3, [r0, #32]
}
 8001a4c:	bc30      	pop	{r4, r5}
 8001a4e:	4770      	bx	lr
 8001a50:	40012c00 	.word	0x40012c00

08001a54 <HAL_TIM_PWM_ConfigChannel>:
{
 8001a54:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001a56:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d066      	beq.n	8001b2c <HAL_TIM_PWM_ConfigChannel+0xd8>
 8001a5e:	4604      	mov	r4, r0
 8001a60:	460d      	mov	r5, r1
 8001a62:	2301      	movs	r3, #1
 8001a64:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8001a68:	2a0c      	cmp	r2, #12
 8001a6a:	d85a      	bhi.n	8001b22 <HAL_TIM_PWM_ConfigChannel+0xce>
 8001a6c:	e8df f002 	tbb	[pc, r2]
 8001a70:	59595907 	.word	0x59595907
 8001a74:	5959591b 	.word	0x5959591b
 8001a78:	59595930 	.word	0x59595930
 8001a7c:	44          	.byte	0x44
 8001a7d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a7e:	6800      	ldr	r0, [r0, #0]
 8001a80:	f7ff fe02 	bl	8001688 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a84:	6822      	ldr	r2, [r4, #0]
 8001a86:	6993      	ldr	r3, [r2, #24]
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a8e:	6822      	ldr	r2, [r4, #0]
 8001a90:	6993      	ldr	r3, [r2, #24]
 8001a92:	f023 0304 	bic.w	r3, r3, #4
 8001a96:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a98:	6822      	ldr	r2, [r4, #0]
 8001a9a:	6993      	ldr	r3, [r2, #24]
 8001a9c:	6929      	ldr	r1, [r5, #16]
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa2:	2000      	movs	r0, #0
      break;
 8001aa4:	e03e      	b.n	8001b24 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001aa6:	6800      	ldr	r0, [r0, #0]
 8001aa8:	f7ff ff9c 	bl	80019e4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001aac:	6822      	ldr	r2, [r4, #0]
 8001aae:	6993      	ldr	r3, [r2, #24]
 8001ab0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ab4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ab6:	6822      	ldr	r2, [r4, #0]
 8001ab8:	6993      	ldr	r3, [r2, #24]
 8001aba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001abe:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ac0:	6822      	ldr	r2, [r4, #0]
 8001ac2:	6993      	ldr	r3, [r2, #24]
 8001ac4:	6929      	ldr	r1, [r5, #16]
 8001ac6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001aca:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001acc:	2000      	movs	r0, #0
      break;
 8001ace:	e029      	b.n	8001b24 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ad0:	6800      	ldr	r0, [r0, #0]
 8001ad2:	f7ff fe11 	bl	80016f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ad6:	6822      	ldr	r2, [r4, #0]
 8001ad8:	69d3      	ldr	r3, [r2, #28]
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ae0:	6822      	ldr	r2, [r4, #0]
 8001ae2:	69d3      	ldr	r3, [r2, #28]
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001aea:	6822      	ldr	r2, [r4, #0]
 8001aec:	69d3      	ldr	r3, [r2, #28]
 8001aee:	6929      	ldr	r1, [r5, #16]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001af4:	2000      	movs	r0, #0
      break;
 8001af6:	e015      	b.n	8001b24 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001af8:	6800      	ldr	r0, [r0, #0]
 8001afa:	f7ff fe35 	bl	8001768 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001afe:	6822      	ldr	r2, [r4, #0]
 8001b00:	69d3      	ldr	r3, [r2, #28]
 8001b02:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b06:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b08:	6822      	ldr	r2, [r4, #0]
 8001b0a:	69d3      	ldr	r3, [r2, #28]
 8001b0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b10:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b12:	6822      	ldr	r2, [r4, #0]
 8001b14:	69d3      	ldr	r3, [r2, #28]
 8001b16:	6929      	ldr	r1, [r5, #16]
 8001b18:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001b1c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1e:	2000      	movs	r0, #0
      break;
 8001b20:	e000      	b.n	8001b24 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8001b22:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001b24:	2300      	movs	r3, #0
 8001b26:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001b2a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	e7fc      	b.n	8001b2a <HAL_TIM_PWM_ConfigChannel+0xd6>

08001b30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b30:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b32:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b34:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b38:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b42:	6082      	str	r2, [r0, #8]
}
 8001b44:	bc10      	pop	{r4}
 8001b46:	4770      	bx	lr

08001b48 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001b48:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d078      	beq.n	8001c42 <HAL_TIM_ConfigClockSource+0xfa>
{
 8001b50:	b510      	push	{r4, lr}
 8001b52:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001b54:	2301      	movs	r3, #1
 8001b56:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001b60:	6802      	ldr	r2, [r0, #0]
 8001b62:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001b68:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001b6c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001b6e:	680b      	ldr	r3, [r1, #0]
 8001b70:	2b60      	cmp	r3, #96	@ 0x60
 8001b72:	d04c      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0xc6>
 8001b74:	d823      	bhi.n	8001bbe <HAL_TIM_ConfigClockSource+0x76>
 8001b76:	2b40      	cmp	r3, #64	@ 0x40
 8001b78:	d054      	beq.n	8001c24 <HAL_TIM_ConfigClockSource+0xdc>
 8001b7a:	d811      	bhi.n	8001ba0 <HAL_TIM_ConfigClockSource+0x58>
 8001b7c:	2b20      	cmp	r3, #32
 8001b7e:	d003      	beq.n	8001b88 <HAL_TIM_ConfigClockSource+0x40>
 8001b80:	d80a      	bhi.n	8001b98 <HAL_TIM_ConfigClockSource+0x50>
 8001b82:	b10b      	cbz	r3, 8001b88 <HAL_TIM_ConfigClockSource+0x40>
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d105      	bne.n	8001b94 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6820      	ldr	r0, [r4, #0]
 8001b8c:	f7ff fe39 	bl	8001802 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001b90:	2000      	movs	r0, #0
      break;
 8001b92:	e028      	b.n	8001be6 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001b94:	2001      	movs	r0, #1
 8001b96:	e026      	b.n	8001be6 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001b98:	2b30      	cmp	r3, #48	@ 0x30
 8001b9a:	d0f5      	beq.n	8001b88 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	e022      	b.n	8001be6 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001ba0:	2b50      	cmp	r3, #80	@ 0x50
 8001ba2:	d10a      	bne.n	8001bba <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ba4:	68ca      	ldr	r2, [r1, #12]
 8001ba6:	6849      	ldr	r1, [r1, #4]
 8001ba8:	6800      	ldr	r0, [r0, #0]
 8001baa:	f7ff fe05 	bl	80017b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001bae:	2150      	movs	r1, #80	@ 0x50
 8001bb0:	6820      	ldr	r0, [r4, #0]
 8001bb2:	f7ff fe26 	bl	8001802 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	2000      	movs	r0, #0
      break;
 8001bb8:	e015      	b.n	8001be6 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001bba:	2001      	movs	r0, #1
 8001bbc:	e013      	b.n	8001be6 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001bbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bc2:	d03a      	beq.n	8001c3a <HAL_TIM_ConfigClockSource+0xf2>
 8001bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bc8:	d014      	beq.n	8001bf4 <HAL_TIM_ConfigClockSource+0xac>
 8001bca:	2b70      	cmp	r3, #112	@ 0x70
 8001bcc:	d137      	bne.n	8001c3e <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8001bce:	68cb      	ldr	r3, [r1, #12]
 8001bd0:	684a      	ldr	r2, [r1, #4]
 8001bd2:	6889      	ldr	r1, [r1, #8]
 8001bd4:	6800      	ldr	r0, [r0, #0]
 8001bd6:	f7ff ffab 	bl	8001b30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001bda:	6822      	ldr	r2, [r4, #0]
 8001bdc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bde:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001be2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001be4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001be6:	2301      	movs	r3, #1
 8001be8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001bec:	2300      	movs	r3, #0
 8001bee:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001bf2:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8001bf4:	68cb      	ldr	r3, [r1, #12]
 8001bf6:	684a      	ldr	r2, [r1, #4]
 8001bf8:	6889      	ldr	r1, [r1, #8]
 8001bfa:	6800      	ldr	r0, [r0, #0]
 8001bfc:	f7ff ff98 	bl	8001b30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c00:	6822      	ldr	r2, [r4, #0]
 8001c02:	6893      	ldr	r3, [r2, #8]
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c08:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001c0a:	2000      	movs	r0, #0
      break;
 8001c0c:	e7eb      	b.n	8001be6 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c0e:	68ca      	ldr	r2, [r1, #12]
 8001c10:	6849      	ldr	r1, [r1, #4]
 8001c12:	6800      	ldr	r0, [r0, #0]
 8001c14:	f7ff fde2 	bl	80017dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c18:	2160      	movs	r1, #96	@ 0x60
 8001c1a:	6820      	ldr	r0, [r4, #0]
 8001c1c:	f7ff fdf1 	bl	8001802 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001c20:	2000      	movs	r0, #0
      break;
 8001c22:	e7e0      	b.n	8001be6 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c24:	68ca      	ldr	r2, [r1, #12]
 8001c26:	6849      	ldr	r1, [r1, #4]
 8001c28:	6800      	ldr	r0, [r0, #0]
 8001c2a:	f7ff fdc5 	bl	80017b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c2e:	2140      	movs	r1, #64	@ 0x40
 8001c30:	6820      	ldr	r0, [r4, #0]
 8001c32:	f7ff fde6 	bl	8001802 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2000      	movs	r0, #0
      break;
 8001c38:	e7d5      	b.n	8001be6 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	e7d3      	b.n	8001be6 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8001c3e:	2001      	movs	r0, #1
 8001c40:	e7d1      	b.n	8001be6 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8001c42:	2002      	movs	r0, #2
}
 8001c44:	4770      	bx	lr

08001c46 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001c46:	f001 011f 	and.w	r1, r1, #31
 8001c4a:	f04f 0c01 	mov.w	ip, #1
 8001c4e:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001c52:	6a03      	ldr	r3, [r0, #32]
 8001c54:	ea23 030c 	bic.w	r3, r3, ip
 8001c58:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001c5a:	6a03      	ldr	r3, [r0, #32]
 8001c5c:	408a      	lsls	r2, r1
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	6203      	str	r3, [r0, #32]
}
 8001c62:	4770      	bx	lr

08001c64 <HAL_TIM_PWM_Start>:
{
 8001c64:	b510      	push	{r4, lr}
 8001c66:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c68:	4608      	mov	r0, r1
 8001c6a:	2900      	cmp	r1, #0
 8001c6c:	d139      	bne.n	8001ce2 <HAL_TIM_PWM_Start+0x7e>
 8001c6e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8001c72:	3b01      	subs	r3, #1
 8001c74:	bf18      	it	ne
 8001c76:	2301      	movne	r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d163      	bne.n	8001d44 <HAL_TIM_PWM_Start+0xe0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d146      	bne.n	8001d0e <HAL_TIM_PWM_Start+0xaa>
 8001c80:	2302      	movs	r3, #2
 8001c82:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c86:	2201      	movs	r2, #1
 8001c88:	4601      	mov	r1, r0
 8001c8a:	6820      	ldr	r0, [r4, #0]
 8001c8c:	f7ff ffdb 	bl	8001c46 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	4a2e      	ldr	r2, [pc, #184]	@ (8001d4c <HAL_TIM_PWM_Start+0xe8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d003      	beq.n	8001ca0 <HAL_TIM_PWM_Start+0x3c>
 8001c98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d103      	bne.n	8001ca8 <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8001ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ca6:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	4a28      	ldr	r2, [pc, #160]	@ (8001d4c <HAL_TIM_PWM_Start+0xe8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d03e      	beq.n	8001d2e <HAL_TIM_PWM_Start+0xca>
 8001cb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d03a      	beq.n	8001d2e <HAL_TIM_PWM_Start+0xca>
 8001cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cbc:	d037      	beq.n	8001d2e <HAL_TIM_PWM_Start+0xca>
 8001cbe:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d033      	beq.n	8001d2e <HAL_TIM_PWM_Start+0xca>
 8001cc6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d02f      	beq.n	8001d2e <HAL_TIM_PWM_Start+0xca>
 8001cce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d02b      	beq.n	8001d2e <HAL_TIM_PWM_Start+0xca>
    __HAL_TIM_ENABLE(htim);
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001cde:	2000      	movs	r0, #0
 8001ce0:	e02f      	b.n	8001d42 <HAL_TIM_PWM_Start+0xde>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ce2:	2904      	cmp	r1, #4
 8001ce4:	d007      	beq.n	8001cf6 <HAL_TIM_PWM_Start+0x92>
 8001ce6:	2908      	cmp	r1, #8
 8001ce8:	d00b      	beq.n	8001d02 <HAL_TIM_PWM_Start+0x9e>
 8001cea:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	bf18      	it	ne
 8001cf2:	2301      	movne	r3, #1
 8001cf4:	e7c0      	b.n	8001c78 <HAL_TIM_PWM_Start+0x14>
 8001cf6:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	bf18      	it	ne
 8001cfe:	2301      	movne	r3, #1
 8001d00:	e7ba      	b.n	8001c78 <HAL_TIM_PWM_Start+0x14>
 8001d02:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001d06:	3b01      	subs	r3, #1
 8001d08:	bf18      	it	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	e7b4      	b.n	8001c78 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d0e:	2804      	cmp	r0, #4
 8001d10:	d005      	beq.n	8001d1e <HAL_TIM_PWM_Start+0xba>
 8001d12:	2808      	cmp	r0, #8
 8001d14:	d007      	beq.n	8001d26 <HAL_TIM_PWM_Start+0xc2>
 8001d16:	2302      	movs	r3, #2
 8001d18:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8001d1c:	e7b3      	b.n	8001c86 <HAL_TIM_PWM_Start+0x22>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001d24:	e7af      	b.n	8001c86 <HAL_TIM_PWM_Start+0x22>
 8001d26:	2302      	movs	r3, #2
 8001d28:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001d2c:	e7ab      	b.n	8001c86 <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d34:	2a06      	cmp	r2, #6
 8001d36:	d007      	beq.n	8001d48 <HAL_TIM_PWM_Start+0xe4>
      __HAL_TIM_ENABLE(htim);
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	f042 0201 	orr.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001d40:	2000      	movs	r0, #0
}
 8001d42:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d44:	2001      	movs	r0, #1
 8001d46:	e7fc      	b.n	8001d42 <HAL_TIM_PWM_Start+0xde>
  return HAL_OK;
 8001d48:	2000      	movs	r0, #0
 8001d4a:	e7fa      	b.n	8001d42 <HAL_TIM_PWM_Start+0xde>
 8001d4c:	40012c00 	.word	0x40012c00

08001d50 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8001d50:	f001 010f 	and.w	r1, r1, #15
 8001d54:	f04f 0c04 	mov.w	ip, #4
 8001d58:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8001d5c:	6a03      	ldr	r3, [r0, #32]
 8001d5e:	ea23 030c 	bic.w	r3, r3, ip
 8001d62:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8001d64:	6a03      	ldr	r3, [r0, #32]
 8001d66:	408a      	lsls	r2, r1
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	6203      	str	r3, [r0, #32]
}
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_TIMEx_PWMN_Start>:
{
 8001d70:	b510      	push	{r4, lr}
 8001d72:	4604      	mov	r4, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d74:	4608      	mov	r0, r1
 8001d76:	2900      	cmp	r1, #0
 8001d78:	d132      	bne.n	8001de0 <HAL_TIMEx_PWMN_Start+0x70>
 8001d7a:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	bf18      	it	ne
 8001d82:	2301      	movne	r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d15c      	bne.n	8001e42 <HAL_TIMEx_PWMN_Start+0xd2>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	d13f      	bne.n	8001e0c <HAL_TIMEx_PWMN_Start+0x9c>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8001d92:	2204      	movs	r2, #4
 8001d94:	4601      	mov	r1, r0
 8001d96:	6820      	ldr	r0, [r4, #0]
 8001d98:	f7ff ffda 	bl	8001d50 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8001d9c:	6822      	ldr	r2, [r4, #0]
 8001d9e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8001da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001da4:	6453      	str	r3, [r2, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	4a28      	ldr	r2, [pc, #160]	@ (8001e4c <HAL_TIMEx_PWMN_Start+0xdc>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d03e      	beq.n	8001e2c <HAL_TIMEx_PWMN_Start+0xbc>
 8001dae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d03a      	beq.n	8001e2c <HAL_TIMEx_PWMN_Start+0xbc>
 8001db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dba:	d037      	beq.n	8001e2c <HAL_TIMEx_PWMN_Start+0xbc>
 8001dbc:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d033      	beq.n	8001e2c <HAL_TIMEx_PWMN_Start+0xbc>
 8001dc4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d02f      	beq.n	8001e2c <HAL_TIMEx_PWMN_Start+0xbc>
 8001dcc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d02b      	beq.n	8001e2c <HAL_TIMEx_PWMN_Start+0xbc>
    __HAL_TIM_ENABLE(htim);
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001ddc:	2000      	movs	r0, #0
 8001dde:	e02f      	b.n	8001e40 <HAL_TIMEx_PWMN_Start+0xd0>
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001de0:	2904      	cmp	r1, #4
 8001de2:	d007      	beq.n	8001df4 <HAL_TIMEx_PWMN_Start+0x84>
 8001de4:	2908      	cmp	r1, #8
 8001de6:	d00b      	beq.n	8001e00 <HAL_TIMEx_PWMN_Start+0x90>
 8001de8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001dec:	3b01      	subs	r3, #1
 8001dee:	bf18      	it	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	e7c7      	b.n	8001d84 <HAL_TIMEx_PWMN_Start+0x14>
 8001df4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	bf18      	it	ne
 8001dfc:	2301      	movne	r3, #1
 8001dfe:	e7c1      	b.n	8001d84 <HAL_TIMEx_PWMN_Start+0x14>
 8001e00:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001e04:	3b01      	subs	r3, #1
 8001e06:	bf18      	it	ne
 8001e08:	2301      	movne	r3, #1
 8001e0a:	e7bb      	b.n	8001d84 <HAL_TIMEx_PWMN_Start+0x14>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e0c:	2804      	cmp	r0, #4
 8001e0e:	d005      	beq.n	8001e1c <HAL_TIMEx_PWMN_Start+0xac>
 8001e10:	2808      	cmp	r0, #8
 8001e12:	d007      	beq.n	8001e24 <HAL_TIMEx_PWMN_Start+0xb4>
 8001e14:	2302      	movs	r3, #2
 8001e16:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8001e1a:	e7ba      	b.n	8001d92 <HAL_TIMEx_PWMN_Start+0x22>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e22:	e7b6      	b.n	8001d92 <HAL_TIMEx_PWMN_Start+0x22>
 8001e24:	2302      	movs	r3, #2
 8001e26:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001e2a:	e7b2      	b.n	8001d92 <HAL_TIMEx_PWMN_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e32:	2a06      	cmp	r2, #6
 8001e34:	d007      	beq.n	8001e46 <HAL_TIMEx_PWMN_Start+0xd6>
      __HAL_TIM_ENABLE(htim);
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	f042 0201 	orr.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001e3e:	2000      	movs	r0, #0
}
 8001e40:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e42:	2001      	movs	r0, #1
 8001e44:	e7fc      	b.n	8001e40 <HAL_TIMEx_PWMN_Start+0xd0>
  return HAL_OK;
 8001e46:	2000      	movs	r0, #0
 8001e48:	e7fa      	b.n	8001e40 <HAL_TIMEx_PWMN_Start+0xd0>
 8001e4a:	bf00      	nop
 8001e4c:	40012c00 	.word	0x40012c00

08001e50 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8001e50:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001e54:	2a01      	cmp	r2, #1
 8001e56:	d034      	beq.n	8001ec2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
{
 8001e58:	b410      	push	{r4}
 8001e5a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001e62:	2202      	movs	r2, #2
 8001e64:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001e68:	6802      	ldr	r2, [r0, #0]
 8001e6a:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001e6c:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e6e:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e72:	6808      	ldr	r0, [r1, #0]
 8001e74:	ea40 000c 	orr.w	r0, r0, ip
  htim->Instance->CR2 = tmpcr2;
 8001e78:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4812      	ldr	r0, [pc, #72]	@ (8001ec8 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8001e7e:	4282      	cmp	r2, r0
 8001e80:	d012      	beq.n	8001ea8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001e82:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8001e86:	4282      	cmp	r2, r0
 8001e88:	d00e      	beq.n	8001ea8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001e8a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001e8e:	d00b      	beq.n	8001ea8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001e90:	f5a0 3098 	sub.w	r0, r0, #77824	@ 0x13000
 8001e94:	4282      	cmp	r2, r0
 8001e96:	d007      	beq.n	8001ea8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001e98:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001e9c:	4282      	cmp	r2, r0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001ea0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001ea4:	4282      	cmp	r2, r0
 8001ea6:	d104      	bne.n	8001eb2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ea8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001eac:	6849      	ldr	r1, [r1, #4]
 8001eae:	4321      	orrs	r1, r4
    htim->Instance->SMCR = tmpsmcr;
 8001eb0:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8001ebe:	bc10      	pop	{r4}
 8001ec0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001ec2:	2002      	movs	r0, #2
}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40012c00 	.word	0x40012c00

08001ecc <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8001ecc:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8001ece:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d021      	beq.n	8001f1a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001edc:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001ede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ee2:	6888      	ldr	r0, [r1, #8]
 8001ee4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001ee6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001eea:	6848      	ldr	r0, [r1, #4]
 8001eec:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001eee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ef2:	6808      	ldr	r0, [r1, #0]
 8001ef4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001ef6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001efa:	6908      	ldr	r0, [r1, #16]
 8001efc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001efe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001f02:	6948      	ldr	r0, [r1, #20]
 8001f04:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001f06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f0a:	69c9      	ldr	r1, [r1, #28]
 8001f0c:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8001f0e:	6811      	ldr	r1, [r2, #0]
 8001f10:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  return HAL_OK;
 8001f18:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001f1a:	2002      	movs	r0, #2
}
 8001f1c:	4770      	bx	lr

08001f1e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f1e:	e7fe      	b.n	8001f1e <NMI_Handler>

08001f20 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <HardFault_Handler>

08001f22 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <MemManage_Handler>

08001f24 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <BusFault_Handler>

08001f26 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <UsageFault_Handler>

08001f28 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f28:	4770      	bx	lr

08001f2a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2a:	4770      	bx	lr

08001f2c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2c:	4770      	bx	lr

08001f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f30:	f7fe fbe0 	bl	80006f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f34:	bd08      	pop	{r3, pc}

08001f36 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f36:	4770      	bx	lr

08001f38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f38:	f7ff fffd 	bl	8001f36 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f3c:	480b      	ldr	r0, [pc, #44]	@ (8001f6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f3e:	490c      	ldr	r1, [pc, #48]	@ (8001f70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f40:	4a0c      	ldr	r2, [pc, #48]	@ (8001f74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f44:	e002      	b.n	8001f4c <LoopCopyDataInit>

08001f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4a:	3304      	adds	r3, #4

08001f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f50:	d3f9      	bcc.n	8001f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f52:	4a09      	ldr	r2, [pc, #36]	@ (8001f78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f54:	4c09      	ldr	r4, [pc, #36]	@ (8001f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f58:	e001      	b.n	8001f5e <LoopFillZerobss>

08001f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f5c:	3204      	adds	r2, #4

08001f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f60:	d3fb      	bcc.n	8001f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f62:	f000 f817 	bl	8001f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f66:	f7fe fb51 	bl	800060c <main>
  bx lr
 8001f6a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f74:	08002020 	.word	0x08002020
  ldr r2, =_sbss
 8001f78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f7c:	20000114 	.word	0x20000114

08001f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC1_2_IRQHandler>

08001f82 <memset>:
 8001f82:	4603      	mov	r3, r0
 8001f84:	4402      	add	r2, r0
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d100      	bne.n	8001f8c <memset+0xa>
 8001f8a:	4770      	bx	lr
 8001f8c:	f803 1b01 	strb.w	r1, [r3], #1
 8001f90:	e7f9      	b.n	8001f86 <memset+0x4>
	...

08001f94 <__libc_init_array>:
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	2600      	movs	r6, #0
 8001f98:	4d0c      	ldr	r5, [pc, #48]	@ (8001fcc <__libc_init_array+0x38>)
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <__libc_init_array+0x3c>)
 8001f9c:	1b5b      	subs	r3, r3, r5
 8001f9e:	109c      	asrs	r4, r3, #2
 8001fa0:	42a6      	cmp	r6, r4
 8001fa2:	d109      	bne.n	8001fb8 <__libc_init_array+0x24>
 8001fa4:	2600      	movs	r6, #0
 8001fa6:	f000 f819 	bl	8001fdc <_init>
 8001faa:	4d0a      	ldr	r5, [pc, #40]	@ (8001fd4 <__libc_init_array+0x40>)
 8001fac:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <__libc_init_array+0x44>)
 8001fae:	1b5b      	subs	r3, r3, r5
 8001fb0:	109c      	asrs	r4, r3, #2
 8001fb2:	42a6      	cmp	r6, r4
 8001fb4:	d105      	bne.n	8001fc2 <__libc_init_array+0x2e>
 8001fb6:	bd70      	pop	{r4, r5, r6, pc}
 8001fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fbc:	4798      	blx	r3
 8001fbe:	3601      	adds	r6, #1
 8001fc0:	e7ee      	b.n	8001fa0 <__libc_init_array+0xc>
 8001fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fc6:	4798      	blx	r3
 8001fc8:	3601      	adds	r6, #1
 8001fca:	e7f2      	b.n	8001fb2 <__libc_init_array+0x1e>
 8001fcc:	08002018 	.word	0x08002018
 8001fd0:	08002018 	.word	0x08002018
 8001fd4:	08002018 	.word	0x08002018
 8001fd8:	0800201c 	.word	0x0800201c

08001fdc <_init>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	bf00      	nop
 8001fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe2:	bc08      	pop	{r3}
 8001fe4:	469e      	mov	lr, r3
 8001fe6:	4770      	bx	lr

08001fe8 <_fini>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	bf00      	nop
 8001fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fee:	bc08      	pop	{r3}
 8001ff0:	469e      	mov	lr, r3
 8001ff2:	4770      	bx	lr
